pipeline {
	agent {
	    node {
		    label "docker"
        }
    }
    stages {
        stage('run unit tests') {
            agent {
                // build and run (later also cleanup) the Docker container
                dockerfile {
                    reuseNode true
                    dir 'ejbca/jenkins-files/EE_AL35_OpenJDK8_UNIT_EXPERIMENTAL'
                    filename 'Dockerfile'
                    additionalBuildArgs  '--disable-content-trust=false --pull'
                    // 1001 = jenkins user's UID/GID
                    args '--user 1001:1001 --group-add root --group-add 1001'
                }
            }
            environment {
                common = load_common()
                ANTOPT = common.getAntOpts()
                ANT_OPTS = "-XX:+UseG1GC -XX:+UseCompressedOops -XX:OnOutOfMemoryError='kill -9 %p' -Xms64m -Xmx1024m"
                TEST_OPTS = "-XX:+UseG1GC -XX:+UseCompressedOops -XX:OnOutOfMemoryError='kill -9 %p' -Xms64m -Xmx256m"
            }
            steps {
                println("JOB_BASE_NAME: " + env.JOB_BASE_NAME)
                println("common: " + env.common)
                println("ANTOPT: " + env.ANTOPT)
                //sh "ls -la $rootDir"
                // Run these steps inside the running docker container
                dir ('ejbca') {
                    sh "cp /opt/conf/* conf/"
                    sh "ant -q -Dappserver.home=/tmp -Dappserver.type=jboss -Dejbca.productionmode=false clean build test:runsa -Dtests.jvmargs=\"\$TEST_OPTS\""
                }
                // gather the results
                junit "ejbca/**/reports/**/TEST-*.xml"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

def load_common() {
    println("load_common():")
    println("pwd(): " + pwd())
    def common = load "../common_jenkins/Jenkinsfile.groovy"
    println("common(): " + common)
}
