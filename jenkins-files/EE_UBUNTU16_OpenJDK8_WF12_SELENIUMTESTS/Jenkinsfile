pipeline {
	agent {
		label "docker"
	}
    stages {
		stage('verify that space is clean') {
            steps {
                sh "docker container rm mariadb_selenium -f || true"
                sh "docker container rm seleniumtests -f || true"
                sh "docker container rm mypeer -f || true"
                sh "docker network rm selenium-network || true"
                sh "rm -rf ear"
            }
        }
        stage('network') {
            steps {
                sh "docker network create --driver bridge selenium-network || true"
            }
        }
		stage('database') {
            steps {
                sh "docker run --name mariadb_selenium -e MYSQL_ROOT_PASSWORD=foo123 -e MYSQL_DATABASE=ejbca -e MYSQL_USER=ejbca -e MYSQL_PASSWORD=ejbca --net=selenium-network -d mariadb:10.2.17"
            }
        }
        
        stage('deploy EJBCA (mypeer)') {
            steps {
                sh "mkdir ear || true"
                sh "chmod 777 " + "$env.WORKSPACE"
                
                dir ('ejbca/jenkins-files/EE_UBUNTU16_OpenJDK8_WF12_SELENIUMTESTS/ejbca_image') {
                    sh "docker build -t mypeer -m 2GB ."
                    
                    sh "mkdir -p " + "$env.WORKSPACE/ejbca/p12"
                    sh "chmod 777 " + "$env.WORKSPACE/ejbca/p12"
                    
                    // set it running on background (-d parameter). needs to stay up, until selniumtests use it. will be killed later at cleanup phase.
                    sh "docker run --name mypeer --net=selenium-network -p 28443:8443 -p 28080:8080 -p 24447:4447 -v " + "$env.WORKSPACE" + ":/app -d mypeer"
                    
                    timeout(10) {
                        waitUntil {
                            script {
                                try {
                                    // the command needs to be its own variable, otherwise sh call doesn't handle the | pipe correctly
                                    def command = 'docker logs mypeer 2>&1 | grep  -c -m 1 "import cert commands done"'
                                    def r = sh script: command, returnStatus: true
                                    return (r == 0)
                                } catch (exc) {
                                    echo exc;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('run Selenium tests') {
            steps {
                sh "mkdir ear || true"
                sh "chmod 777 " + "$env.WORKSPACE"
                
                // to allow creation of /app/ejbca/reports/test folder for ant test task
                sh "chmod 777 " + "$env.WORKSPACE/ejbca"
                
                // pre-create necessary folders and give permissions, so that seluser can later do its stuff
                sh "chmod +w " + "$env.WORKSPACE/ejbca/conf"
                sh "chmod +w " + "$env.WORKSPACE/ejbca/modules/ejbca-webtest/conf/"
                sh "chmod +w " + "$env.WORKSPACE/ejbca"
                sh "mkdir -p " + "$env.WORKSPACE/ejbca/reports"
                sh "chmod 777 " + "$env.WORKSPACE/ejbca/reports"
                sh "chmod 777 $env.WORKSPACE/ejbca/modules/ejbca-webtest"
                sh "chmod 777 " + "$env.WORKSPACE/ejbca/modules/ejbca-webtest/resources"

                // copy Remote EJB client JAR (jboss-client.jar)
                sh "mkdir -p -m 755 " + "$env.WORKSPACE/ejbca/lib/jee-client"
                sh "docker cp mypeer:/opt/jboss/wildfly/bin/client/jboss-client.jar $env.WORKSPACE/ejbca/lib/jee-client/jboss-client.jar"

                dir ('ejbca/jenkins-files/EE_UBUNTU16_OpenJDK8_WF12_SELENIUMTESTS/selenium_image') {
                    sh "docker build -t seleniumtests -m 5GB ."
                    sh "docker run --name seleniumtests --net=selenium-network -p 4444:4444 --shm-size=5g -v " + "$env.WORKSPACE" + ":/app seleniumtests"
                }
            }
        }
    }
    post {
        always {
            sh "chown -R 1001:1001 $env.WORKSPACE"
            junit "ejbca/**/reports/**/TEST-*.xml"
            
            sh "docker stop --time=1 seleniumtests || true"
            sh "docker rm -f seleniumtests || true"
            
            sh "docker stop --time=1 mypeer || true"
            sh "docker rm -f mypeer || true"
            
            sh "docker stop --time=1 mariadb_selenium"
            sh "docker rm -f mariadb_selenium"

            sh "docker network rm selenium-network || true"
            cleanWs()
        }
    }
}
