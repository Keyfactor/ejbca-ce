pipeline {
	agent {
		label "docker"
	}
	environment {
		JENKINS_JOB_FOLDER = 'EE_COS7_OpenJDK8_WF10_NOHSM_MSSQL2017'
		DOCKER_NAME_BASE = 'ee_cos7_openjdk8_wf10_nohsm_mssql2017'
		DOCKER_NAME_NET = 'net_ee_cos7_openjdk8_wf10_nohsm_mssql2017'
		DOCKER_NAME_DB = 'db_ee_cos7_openjdk8_wf10_nohsm_mssql2017'
		DB_VERSION = '2017-latest'
		DB_PORTS = '1433:1433'
		DB_PASSWORD = 'MyEjbcaPass'
	}
	parameters {
		string(name: 'JENKINS_JOB_FOLDER', defaultValue: env.JENKINS_JOB_FOLDER, description: 'The name of the folder containing the jenkins job\'s artifacts.')
		string(name: 'DOCKER_NAME_BASE', defaultValue: env.DOCKER_NAME_BASE, description: 'The name of the base docker describing the environment setup.')
		string(name: 'DOCKER_NAME_NET', defaultValue: env.DOCKER_NAME_NET, description: 'The name of the network for these dockers.')
		string(name: 'DOCKER_NAME_DB', defaultValue: env.DOCKER_NAME_DB, description: 'The name of the database docker.')
		string(name: 'DB_VERSION', defaultValue: env.DB_VERSION, description: 'Database Docker version.')
		string(name: 'DB_PORTS', defaultValue: env.DB_PORTS, description: 'Database Internal:External ports.')
		string(name: 'DB_PASSWORD', defaultValue: env.DB_PASSWORD, description: 'Database password.')
	}
	stages {
		stage('verify that space is clean') {
			steps {
				sh "docker container rm ${params.DOCKER_NAME_DB} -f || true"
				sh "docker container rm ${params.DOCKER_NAME_BASE} -f || true"
				sh "docker network rm ${params.DOCKER_NAME_NET} || true"
				sh "rm -rf ear"
			}
		}
		stage('network') {
			steps {
				sh "docker network create --driver bridge ${params.DOCKER_NAME_NET} || true"
			}
		}
		stage('database') {
			steps {
				sh "docker run --name ${params.DOCKER_NAME_DB} --net=${params.DOCKER_NAME_NET} -p ${params.DB_PORTS} -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=${params.DB_PASSWORD}' -d mcr.microsoft.com/mssql/server:${params.DB_VERSION}"
				sh "sleep 5"
				sh "docker exec -i ${params.DOCKER_NAME_DB} /opt/mssql-tools/bin/sqlcmd -S ${params.DOCKER_NAME_NET} -U sa -P '${params.DB_PASSWORD}' -Q 'CREATE DATABASE ejbca'"
			}
		}
		stage('deploy and run system tests') {
			steps {
				sh "mkdir ear || true"
				dir ("ejbca/jenkins-files/${params.JENKINS_JOB_FOLDER}") {
					sh "docker build -t ${params.DOCKER_NAME_BASE} -m 3GB ."
					sh "docker run --name ${params.DOCKER_NAME_BASE} --net=${params.DOCKER_NAME_NET} -v ${env.WORKSPACE}:/app ${params.DOCKER_NAME_BASE}"
				}
			}
		}
		stage('save test results') {
			steps {
				junit "ejbca/**/reports/**/TEST-*.xml"
			}
		}
	}
	post {
		always {
			sh "docker stop --time=1 ${params.DOCKER_NAME_BASE} || true"
			sh "docker rm -f ${params.DOCKER_NAME_BASE} || true"
			sh "docker stop --time=1 ${params.DOCKER_NAME_DB} || true"
			sh "docker rm -f ${params.DOCKER_NAME_DB} || true"
			sh "docker network rm ${params.DOCKER_NAME_NET} || true"
			cleanWs()
		}
	}
}
