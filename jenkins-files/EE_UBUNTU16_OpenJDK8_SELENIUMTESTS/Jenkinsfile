pipeline {
	agent {
		label "docker"
	}
    stages {
		stage('verify that space is clean') {
            steps {
                sh "docker container rm mariadb_selenium -f || true"
                sh "docker container rm seleniumtests -f || true"
                sh "docker container rm mypeer -f || true"
                sh "rm -rf ear"
            }
        }
        stage('network') {
            steps {
                sh "docker network create --driver bridge selenium-network || true"
            }
        }
		stage('database') {
            steps {
                sh "docker run --name mariadb_selenium -e MYSQL_ROOT_PASSWORD=foo123 -e MYSQL_DATABASE=ejbca -e MYSQL_USER=ejbca -e MYSQL_PASSWORD=ejbca --net=selenium-network -d mariadb:10.2.17"
            }
        }
        
        stage('deploy EJBCA') {
            steps {
                sh "mkdir ear || true"
                sh "chmod 777 " + "$env.WORKSPACE"
                dir ('ejbca/jenkins-files/EE_UBUNTU16_OpenJDK8_SELENIUMTESTS/ejbca_image') {
                    sh "docker build -t mypeer -m 2GB ."
                    
                    // sh "docker run --name mypeer --net=selenium-network -v " + "$env.WORKSPACE" + ":/app mypeer"
                    sh "docker run --name mypeer --net=selenium-network -v " + "$env.WORKSPACE" + ":/app -d mypeer"
                    
                    timeout(7) {
                        waitUntil {
                           script {
                             def r = sh script: 'docker logs mypeer 2>&1 | grep -c -m 1 "import cert commands done"', returnStatus: true
                             //def r = sh returnStdout: true, script: 'docker logs mypeer 2>&1 | grep -c -m 1 "import cert commands done"';
                             sh 'echo "$r"';
                             echo "here is the DOCKER LOGS output:";
                             sh "docker logs mypeer 2>&1";
                             return ($r >= 1);
                           }
                        }
                    }
                }
            }
        }
        
        stage('run Selenium tests') {
            steps {
                sh "mkdir ear || true"
                dir ('ejbca/jenkins-files/EE_UBUNTU16_OpenJDK8_SELENIUMTESTS/selenium_image') {
                    sh "docker build -t seleniumtests -m 2GB ."
                    sh "docker run --name seleniumtests --net=selenium-network -p 4444:4444 --shm-size=2g -v " + "$env.WORKSPACE" + ":/app seleniumtests"
                }
            }
        }
    }
    post {
        always {
            junit "ejbca/**/reports/**/TEST-*.xml"
            sh "docker stop --time=1 seleniumtests || true"
            sh "docker rm -f seleniumtests || true"
            
            sh "docker stop --time=1 mypeer || true"
            sh "docker rm -f mypeer || true"
            
            sh "docker stop --time=1 mariadb_selenium"
            sh "docker rm -f mariadb_selenium"
            cleanWs()
        }
    }
}
