# File containing internal localization messages used by
# log comments, audit messages, etc. in EJBCA.
#
# The keys should be sections into which module the message
# originates from, example raadmin.msg1 or keyrecovery.testmessage.
#
# ENGLISH VERSION

# Native encoding:  ISO-8859-1
# EJBCA supported:  7.x
# Modified date:    $Id$
# 
# Contributors:
#   PrimeKey Solutions <info@primekey.com>


# Test resources - Only used with the test script
test.testmsg = Test en-US
test.testparams = Test {0} {1} {2} {3} {4} message {0} 

# Services resources
services.serviceadded                    = Service {0} added.
services.erroraddingservice              = Error adding service {0}
services.notauthorizedtoadd              = Error, not authorized to add service : {0}
services.serviceedited                   = Service {0} edited.
services.erroreditingservice             = Error service {0}.
services.notauthorizedto                 = Error, not authorized to service : {0}
services.servicecloned                   = New service {0}, used service {1} as template.
services.errorcloningservice             = Error adding service {0} using service {1} as template.
services.serviceremoved                  = Service {0} removed.
services.errorremovingservice            = Error removing user data source {0}.
services.servicerenamed                  = Service {0} renamed to {1}.
services.errorrenamingservice            = Error renaming Service {0} to {1}.
services.serviceexecuted                 = Service {0} executed with the following result: {1}. {2}
services.servicenotfound                 = Service with id {0} not found.
services.serviceexecutionfailed          = Service {0} execution failed.
services.servicerunonothernode           = Service {0} has been executed on another node in the cluster, waiting.
services.erroractionclasspath            = Error Monitoring Service {0} actionClassPath is misconfigured.
services.errorintervalclasspath          = Error Monitoring Service {0} intervalClassPath is misconfigured, service will not execute.
services.errorworkerconfig               = Worker {0} is misconfigured for service {1}, check the classpath.
services.errorworker.errornoemail        = Sending email notification to user {0} failed, no email address configured.
services.errorworker.errornoca           = CA with id {0} and name '{1}' does not exist. Has it been removed?
services.errorexpireworker.errorconfig   = Error: Expire Notification Worker {0} is misconfigured, check {1} value.
services.interval.errorconfig            = Error: Periodical service {0} is misconfigured, check {1} value.
services.mailaction.errorreceiveraddress = Error: No receiver address could be found.
services.mailaction.errorsenderaddress   = Error: A sender address must be configured.
services.mailaction.sent                 = Email Notification was sent to {0} successfully.
services.mailaction.errorsend            = Error when sending mail action notification to {0}.
services.mailaction.erroractioninfo      = Error: Only MailActionInfo is supported.
services.upgrade                         = Upgrading service configuration with version {0}.
services.alreadyrunninginvm              = Service {0} is already running in this VM! Not starting work.
services.servicefailedrescheduled        = Service failed and was rescheduled to run in {0} milliseconds.

# Sign session resources
signsession.requestcert              = Received certificate request for user {0} for CA {1} with certificate profile {2}.
signsession.nouserinrequest          = No username in request, request DN: {0}.
signsession.nopasswordinrequest      = No password in request.
signsession.wrongauthority           = CA from request ({0}) does not match users CA ({1}).
signsession.nosuchuser               = User {0} not found.
signsession.finishnouser             = Called finishUser for non existing user {0}.
signsession.certificateissued        = Certificate issued to user {0}.
signsession.caexpired                = Signing CA {0} has expired.
signsession.canotyetvalid            = Signing CA {0} is not yet valid.
signsession.canotfoundcaid           = Invalid CA Id: {0}.
signsession.errorupgradingcmsservice = Error initializing cms service when upgrading CA {0}.

# Card Verification Code resources
cvc.info.renewallowed = Verification of outer signature in CVC request was successful with valid certificate with fp {0}. Request allowed for user {1}.
cvc.error.outersignature = Verification of outer signature in CVC request failed for holderRef '{0}'. Message: {1}.
cvc.error.renewsamekeys = Trying to renew a certificate using the same key for holderRef '{0}'.

# CA administration resources
caadmin.activated = Activated CA with id {0}.
caadmin.deactivated = De-activated CA with id {0}.
caadmin.notauthorizedtocreateca = Administrator not authorized to create CA {0}.
caadmin.notauthorizedtocertreq = Administrator is not authorized to make certificate request for CA {0}.
caadmin.notauthorizedtocertresp = Administrator is not authorized to process CA {0}.
caadmin.notauthorizedtorenew = Administrator is not authorized to renew CA {0}.
caadmin.notauthorizedtorevoke = Administrator is not authorized to revoke CA {0}.
caadmin.notauthorizedtorollover = Administrator is not authorized to roll over CA {0}.
caadmin.notauthorizedtoactivatetoken = Administrator is not authorized to activate CA token for CA {0}.
caadmin.notauthorizedtodeactivatetoken = Administrator is not authorized to deactivate CA token for CA {0}.
caadmin.notauthorizedtoremovecatoken = Administrator is not authorized to remove CA token for CA {0}.
caadmin.notauthorizedtorestorecatoken = Administrator is not authorized to restore CA token for CA {0}.
caadmin.notauthorizedtoexportcatoken = Administrator is not authorized to export CA token for CA {0}.
caadmin.wrongcaid = Illegal CA id {0}, CA can not be created.
caadmin.badcaactivationcode = Activation code for CA {0} was rejected.
caadmin.errorcreatetoken = Error when creating CA token.
caadmin.errorcreatetokenpin = Error when creating hard CA token. Authorization code was wrong.
caadmin.errorcreateca = Could not create CA {0}.
caadmin.errorcreatecaservice = Could not Create ExternalCAService {0}.
caadmin.erroreditca = Could not edit CA {0}.
caadmin.errormissingcmscertpath = Could not start CMS service for CA {0} due to missing CMS certificate path.
caadmin.errorremoveca = Could not remove CA {0}. Message: {1}.
caadmin.errorrenameca = Could not rename CA {0}.
caadmin.errorrestorecakeystore = Could not restore keystore for CA {0}.
caadmin.errorgetcainfo = Error getting CA info for {0}.
caadmin.errorcertreq = Error creating certificate request for CA {0}.
caadmin.errorcertreqsign = Error signing certificate request by CA {0}.
caadmin.errorcertresp = Error receiving certificate response for CA {0}.
caadmin.errorprocess = Error processing CA {0}.
caadmin.errorrenewca = Error renewing CA {0}.
caadmin.errorrevoke = Error revoking CA {0}.
caadmin.errorrolloverca = Error rolling over CA {0}.
caadmin.certreqcreated = Certificate request generated successfully for CA {0}.
caadmin.certreqsigned = CA {0} Signed a certificate request.
caadmin.errorcertrespinternalca = Cannot receive certificate response for an Internal CA {0}.
caadmin.errorcertrespillegalmsg = Illegal response message of type {0}.
caadmin.errorcertrespwrongdn = Subject DN of received certificate ({0} does not match request ({1}).
caadmin.errorcaexists = Error when processing CA {0}. CA already exists.
caadmin.erroractivatetoken = Error when trying to activate CA token for CA {0}.
caadmin.errordeactivatetoken = Error when trying to deactivate CA token for CA {0}.
caadmin.errornotoffline = CA {0} must have the status 'offline' in order to be activated.
caadmin.errornotonline = CA {0} must have the status 'active' in order to be deactivated.
caadmin.errorcanotfound = Error when trying to access CA with caid {0}. CA could not be found.
caadmin.errorremovecakeystore = Error removing soft keystore for CA {0}.
caadmin.createdca = CA {0} created successfully, status: {1}.
caadmin.removedcakeystore = CA {0} soft keystore removed.
caadmin.restoredcakeystore = CA {0} soft keystore restored.
caadmin.processedca = CA {0} processed successfully.
caadmin.renewdca = CA {0} renewed successfully.
caadmin.revokedca = CA {0} revoked successfully, reason: {1}.
caadmin.rolledoverca = CA {0} rolled over successfully.
caadmin.catokenexternal = CA {0} is external and cannot be activated/deactivated.
caadmin.certrespreceived = Certificate response received successfully to CA {0}.
caadmin.exportedca = CA '{0}' exported successfully to {1} file.
caadmin.errorexportca = Error exporting CA '{0}' to {1} file: {2}.
caadmin.importedca = CA '{0}' imported successfully from old {1} file, status\: {2}.
caadmin.errorimportca = Error importing CA '{0} from {1} file: {2}.
caadmin.errornorequestchain = No request certificate chain for CA with id {0} and DN '{1}'.
caadmin.extendedserviceexecuted = Extended service with request class '{0}' executed for CA '{1}'.;
caadmin.signedcms = CA {0} signed CMS (PKCS#7) successfully.

# Authentication resources
authentication.invalidpwd = Got request for user with invalid password: {0}.
authentication.authok = Authenticated user {0}.
authentication.wrongstatus = Got request with status {0} ({1}), NEW, FAILED or INPROCESS required: {2}.
authentication.usernotfound = Got request for nonexisting user: {0}.
authentication.statuschanged = Changed status for '{0}' to STATUS_GENERATED.
authentication.certexpired = Certificate validity has expired. SubjectDN '{0}'. Expire date was: {1}.
authentication.revokedormissing = The certificate is revoked or cannot be located in the database. SubjectDN '{0}'.
authentication.failed.cli.usernotfound = Authentication failure from CLI. The user {0} was not found in database.

# Publisher resources
publisher.store = Published object {0} successfully to publisher {1}, status {2}.
publisher.storequeue = Stored publish to queue. Publisher {0}, fingerprint {1}, status {2}.
publisher.errorstore = Error when publishing to {0}, fingerprint: {1}.
publisher.errorstorequeue = Error when storing publish to queue. Publisher {0}, fingerprint {1}, status {2}.
publisher.nopublisher = Publisher with id {0} does not exist.
publisher.testedpublisher = Successfully tested the connection with publisher {0}.
publisher.errortestpublisher = Error when testing the connection with publisher {0}.
publisher.addedpublisher = Publisher {0} added.
publisher.erroraddpublisher = Error adding publisher {0}.
publisher.changedpublisher = Publisher {0} edited.
publisher.errorchangepublisher = Error editing publisher {0}.
publisher.clonedpublisher = New publisher {0} used publisher {1} as template.
publisher.errorclonepublisher = Error adding publisher {0} using publisher {1} as template.
publisher.removedpublisher = Publisher {0} removed.
publisher.errorremovepublisher = Error removing publisher {0}.
publisher.renamedpublisher = Publisher {0} renamed to {1}.
publisher.errorrenamepublisher = Error renaming publisher {0} to {1}.
publisher.queuedataupgrade = Upgrading publisher queue data with version {0}.
publisher.errornocert = Certificate or CRL to publish does not exist, fingerprint: {0}.
publisher.unknowntype = Publish type in publisher queue is of unknown type, {0}. Not publishing.

# Store resources
store.republishunrevokedcert = Republished unrevoked cert, reason: {0}.
store.storehistory = Storing certificate request history successful for user {0}.
store.errorstorehistory = Error storing certificate request history for user {0}.
store.removehistory = Removal of certificate request history successful for fingerprint {0}.
store.errorremovehistory = Error removing certificate request history for fingerprint {0}.
store.editpublishernotauthorized = Admin '{0}' is not authorized to edit publishers.
store.editkeyvalidatornotauthorized = Admin '{0}' is not authorized to edit key validators.
store.editblacklistnotauthorized = Admin '{0}' is not authorized to edit blacklists.

# Key recovery resources
keyrecovery.addedforapproval = Key Recovery Action has been added for approval by authorized administrators.
keyrecovery.addeddata = Keyrecovery data for certificate with serial number {0}, issuer '{1}' added. Protected with keyAlias '{2}' with keyId {3}, from Crypto Token {4}.
keyrecovery.erroradddata = Error when trying to add keyrecovery data for certificate with serial number {0}, issuer {1}.
keyrecovery.changeddata = Keyrecovery data for certificate with serial number {0}, issuer '{1}' changed.  Protected with keyAlias '{2}' with keyId {3}, from Crypto Token {4}.
keyrecovery.errorchangedata = Error when trying to update keyrecovery data for certificate with serial number {0}, issuer {1}.
keyrecovery.removeddata = Keyrecovery data for certificate with serial number {0}, issuer '{1}' removed.
keyrecovery.errorremovedata = Error when trying to remove keyrecovery data for certificate with serial number {0}, issuer {1}.
keyrecovery.removeduser = All keyrecovery data for user {0} removed.
keyrecovery.errorremoveuser = Error when removing all keyrecovery data for user {0}.
keyrecovery.sentdata = Keydata for user {0} have been sent for key recovery. Protected with keyAlias '{1}' with keyId {2}, from Crypto Token {3}.
keyrecovery.nodata = No key recovery keydata found for user {0}.
keyrecovery.errorsenddata = Error trying to recover keydata for user {0}.
keyrecovery.markeduser = User {0} newest certificate marked for recovery.
keyrecovery.errormarkuser = Error when trying to mark user {0} newest certificate for recovery.
keyrecovery.markedcert = Certificate with serialNo {0}, issuer {1} marked for recovery.
keyrecovery.errormarkcert = Error when trying to mark certificate with serialNo {0}, issuer {1} for recovery.

# RA resources
ra.adminprefadded = Administrator preference with id {0} added.
ra.changedadminpref = Administrator preference with key {0} changed.
ra.adminprefexists = Trying to add preference for administrator that already exists.
ra.adminprefnotfound = Administrator preference with key {0} cannot be found in database.
ra.defaultadminprefsaved = Default administrator preference changed.
ra.errorsavedefaultadminpref = Error saving default administrator preference.
ra.addedprofile = End entity profile {0} added.
ra.erroraddprofile = Error adding end entity profile {0}.
ra.erroraddprofileexists = Attempted to add an end entity profile '{0}' that already exists in the database.
ra.erroraddprofilefixed = Attempted to add an end entity profile, '{0}', matching fixed profile {1};
ra.clonedprofile = Added new end entity profile {0} using profile {1} as template.
ra.errorcloneprofile = Error adding new end entity profile {0} using profile {1} as template.
ra.removedprofile = End entity profile {0} removed.
ra.errorremoveprofile = Error removing end entity profile {0}.
ra.renamedprofile = End entity profile {0} renamed to {1}.
ra.errorrenameprofile = Error renaming end entity profile {0} to {1}.
ra.changedprofile = End entity profile {0} edited.
ra.errorchangeprofile = Error editing end entity profile {0}.
ra.errorprofilenotexist = End Entity profile {0} does not exist.
ra.errorgetids = Error getting authorized entity profile ids.
ra.errorreadprofiles = Error reading entity profiles.
ra.errorfulfillprofile = Userdata did not fulfill end entity profile {0}, dn '{1}': {2}.
ra.errorauthprofile = Administrator not authorized to end entity profile {0}. Admin: {1}.
ra.errorauthprofileexist = Administrator is not authorized to end entity profile {0} that existing user {1} was created with. Admin: {1}.
ra.errorauthca = Administrator not authorized to CA {0}. Admin: {1}.
ra.errorauthcaexist = Administrator not authorized to CA {0} that existing user {1} was created with. Admin: {2}.
ra.errorauthrevoke = Administrator not authorized to revoke end entities.
ra.errorcertnoadmin = Your certificate does not belong to an administrator. Issuer {0}, serialNo {1}.
ra.errorcertnouser = Your certificate does not belong to any user. Issuer {0}, serialNo {1}.
ra.errornocertificateprofile = There is no certificate profile with id {0}.
ra.errorprint = Error when printing userdata for user {0}, message: {1}.
ra.approvalad = Add Entity request has been added for approval by authorized administrators.
ra.approvaledit = Add Entity request has been added for approval by authorized administrators.
ra.approvalrevoke = Revocation has been sent for approval by authorized administrators.
ra.approvalcaactivation = CA activation has been sent for approval by authorized administrators.
ra.errorrevocationexists = Certificate is already revoked. Issuer: '{0}', serno: {1}.
ra.bad.date = '{0}' is not a valid ISO8601 revocation date. Example of a valid date: 2012-06-07T23:55:59+02:00
ra.norevokebackdate = Back dated revocation not allowed for certificate profile '{0}'. Certificate serialNumber '{1}', issuerDN '{2}'.
ra.addedentity = Added end entity {0}.
ra.errorentityexist = Entity {0} already exists.
ra.errorentitynotexist = Entity does not exist: {0}
ra.wrongusernameorpassword = Wrong username or password
ra.erroraddentity = Error adding end entity {0}.
ra.decreasedentityrequestcounter = Decreased request counter for entity {0}, new value {1}.
ra.decreasedloginattemptscounter = Decreased remaining login attempts counter for entity {0}, new value {1}.
ra.resettedloginattemptscounter = Reset remaining login attempts counter for entity {0}, new value {1}.
ra.errorrequestcounterinvalid = Invalid request counter '{0}' for entity {1}, errormsg: {2}.
ra.errorallowedrequestsinvalid = Invalid allowed requests value '{0}' for entity {1}, errormsg: {2}.
ra.editedentitystatus = Edited end entity {0}, new status {1}.
ra.editedentityrename = Renamed end entity {0} to {1}.
ra.editedentity = Edited end entity {0}.
ra.updatedentitycaid = Updated CA Id in end entity {0} from {1} to {2}. 
ra.erroreditentity = Error editing end entity {0}.
ra.removedentity = Removed end entity {0}.
ra.errorremoveentity = Error removing end entity {0}.
ra.editpwdentity = Password changed for end entity {0}.
ra.revokedentity = Revoked end entity {0}.
ra.errorfindentitycert = Could not find end entity certificate. Issuer {0}, serialNo {1}.
ra.errorunrevokenotonhold = Not allowed to unrevoke a certificate that is not on hold. Issuer {0}, serialNo {1}.
ra.errorinvalidrevokereason = Invalid operation trying to revoke user with unrevoke reason code. Username '{0}', reason {1}.
ra.errornotificationnoemail = Notification cannot be sent to user {0} where email field is null.
ra.sentnotification = Notification to user {0} with email {1} sent successfully.
ra.errorsendnotification = Error sending notification to user {0} with email {1}.
ra.eeprofileupgrade = Upgrading end entity profile with version {0}.
ra.eeprofileaddfield = Adding new field, {0}, to NUMBERARRAY.
ra.errorbadrequest = The requested action could not be performed.
ra.errorcustomrcptshort = Custom notification recipient specified, but string too short: {0}.
ra.errorcustomnoemail = Custom notification recipient specified, but no email addresses returned: {0}.
ra.errorcustomnoclasspath = Custom notification recipient specified, but classpath is empty: {0}.

# User data source resources
userdatasource.fetcheduserdatasource = Userdata fetched from user data source {0} successfully.
userdatasource.errorfetchuserdatasource = Error fetching from user data source {0}.
userdatasource.removeduserdata = Userdata removed from user data source {0} successfully.
userdatasource.errorremovinguserdatasource = Error removing from user data source {0}.
userdatasource.erroruserdatasourceexist = User data source with id {0} does not exist.
userdatasource.errornotauth = Error, not authorized to user data source {0}.
userdatasource.testedcon = Successfully tested the connection with user data source {0}.
userdatasource.errortestcon = Error when testing the connection with user data source {0}.
userdatasource.errortestconauth = Error, not authorized to test user data source {0}.
userdatasource.addedsource = User data source {0} added.
userdatasource.erroraddsource = Error adding user data source {0}.
userdatasource.changedsource = User data source {0} changed.
userdatasource.errorchangesource = Error changing user data source {0}.
userdatasource.clonedsource = Added user data source {0} using user data source {1} as template.
userdatasource.errorclonesource = Error adding user data source {0} using user data source {1} as template.
userdatasource.removedsource = User data source {0} removed.
userdatasource.errorremovesource = Error removing user data source {0} removed.
userdatasource.renamedsource = Renamed user data source {0} to {1}.
userdatasource.errorrenamesource = Error renaming user data source {0} to {1}.

# Service resources
caservice.notactive = {0} CA Service is not active. Activate it in the CA configuration under 'Edit Certificate Authorities'.
ocspcaservice.upgrade = Upgrading OCSPCAService with version {0}.
caservice.upgrade = Upgrading Extended CAService with version {0}.

# CA token resources
catoken.deletecert = Deleted certificate with alias '{0}'.

# Certificate profile resources
certprofile.upgrade = Upgrading certificate profile with version {0}.

# Publisher resources
publisher.upgrade = Upgrading LdapPublisher with version {0}.
publisher.entryexists = Duplicate entry, updating: {0}
publisher.noentry = No old entry exist for {0}.
publisher.infoexists = An entry with DN '{0}' exists.
publisher.errorvapubl = Validation Authority ERROR, publishing is not working on datasource {0} for {1}.
publisher.notpublwithstatus = Not publishing certificate with status, status={0}.
publisher.notpubltype = Certificate of type '{0}' will not be published.
publisher.errorldapdecode = LDAP ERROR: Error decoding {0}.
publisher.errorldapencodestore = LDAP ERROR: Error encoding {0} when storing in LDAP.
publisher.ldapadd = LDAP {0}: Added object: {1} successfully.
publisher.ldapmodify = LDAP {0}: Modified object: {1} successfully.
publisher.ldapremove = LDAP REVOKE: Removed certificate from object: {0}  successfully.
publisher.ldapaddedintermediate = LDAP {0}: Created intermediate nodes for {1}.
publisher.errorldapstore = LDAP ERROR: Error storing {0} ({1}) in LDAP ({2}) for DN ({3}). Message: {4}.
publisher.errorldapremove = LDAP ERROR: Error when removing certificate from LDAP ({0}).
publisher.ldapintermediatenotappropriate = LDAP: field '{0}' is not appropriate for intermediate node.
publisher.errorpassword = LDAP ERROR: Can't decode password for LDAP login: {0}.
publisher.errordisconnect = LDAP ERROR: LdapPublisher: LDAP disconnection failed.
publisher.errorrevokenoentry = LDAP ERROR: Entry holding certificate doesn't exist in LDAP.
publisher.inforevokenocert = Trying to remove certificate from LDAP, but no certificate attribute exists in the entry.
publisher.errorldapbind = LDAP ERROR: Error binding to LDAP server. {0}
publisher.errornobinddn = LDAP ERROR: Could not find bindDN.
publisher.errortempfile = Could not output to temporary file.
publisher.errormissingproperty = {0} must be specified.
publisher.errorexternalapp = Detected errors while running the external application {0}.
publisher.errordeletetempfile = Could not remove temporary file {0}.
publisher.errorcertconversion = Could not convert certificate for publishing.
publisher.commandnotfound = Could not find external command {0}.
publisher.certalreadyexists = Certificate with fingerprint {0} already published for entry with DN '{1}'. Msg: {2}.
publisher.erroroutputpath = Not an existing folder: '{0}'.
publisher.errorsamplingmethod = A correct sampling method must be specified.
publisher.errorinvalidvalue = Invalid value for property '{0}': {1}.
publisher.pvalueinterval = pvalue should be in the interval [0.0, 1.0]
publisher.errorinvalidkey = Invalid property name '{0}'.
publisher.ctlogtestnologs = No CT Logs have been configured. Please configure at least one log under System Configuration.
publisher.ctlogtesterror = CT Log URLs are not working: {0}

# Public Key Blacklists
blacklist.nopublickeyblacklist = Blacklist with id {0} does not exist.
blacklist.addedpublickeyblacklist = Blacklist {0} added.
blacklist.erroraddpublickeyblacklist = Error adding blacklist {0}.
blacklist.changedpublickeyblacklist = Blacklist {0} edited.
blacklist.errorchangepublickeyblacklist = Error editing blacklist {0}.
blacklist.errorclonepublickeyblacklist = Error adding blacklist {0} using blacklist {1} as template.
blacklist.removedpublickeyblacklist = Blacklist {0} removed.
blacklist.errorremovepublickeyblacklist = Error removing blacklist {0}.
blacklist.custompublickeyblacklistnotfound = Custom blacklist {0} of class {1} could not be loaded.

# General Protocol Resources
protocol.nosuchalias = {0} alias '{1}' does not exist

# CMP resources
cmp.errorunknownprotalg = Received CMP message with unknown protection alg: {0}.
cmp.errorcertconfirmstatus = Received a Cert Confirm with status {0}.
cmp.receivedmsg = CMP message received from: {0}, for CMP alias: {1}
cmp.sentresponsemsg = Sent a CMP response to: {0}, process time {1}.
cmp.receivedrevreq = Received a revocation request for issuer: '{0}', serno: {1}.
cmp.receivedrevreqnoissuer = Received a revocation request missing issuer or serno.
cmp.errornullresp = Response from CmpMessageDispatcher is null.
cmp.errortcptoolongmsg = Received a message of length {0}, which is way too much to be sane.
cmp.errortcpwronglen = Received a message of length {0}, that claimed to contain {1} bytes.
cmp.erroradduserupdate = Could not add user '{0}', although it did not exists a blink of an eye ago! Will update instead.
cmp.erroradduser = Error adding user '{0}'.
cmp.errorgeneral = Error during CMP processing. {0}.
cmp.errorauthmessage = Authentication failed for message. {0}.
cmp.errorexthandlerexec = "Error executing the ExtendedUserDataHandler. No certificate created."
cmp.errorcalcprotection = Error calculating protection.
cmp.errorunauthmessagera = Received an unauthenticated message in RA mode.
cmp.infonouserfordn = Did not find a username matching dn: {0}.
cmp.errornocmrfreq = ICmpMessage is not a CrmfRequestMessage.
cmp.errornotauthrevoke = Not authorized to revoke certificate for the user with issuer: {0} and serno: {1}.
cmp.errorcertnofound = Certificate not found for issuer: {0} and serno: {1}.
cmp.errormissingissuerrevoke = Received a revocation request missing issuer or serno.
cmp.errornoprot = No PKI protection to verify.
cmp.erroralreadyrequested = The request is already awaiting approval.
cmp.erroralreadyrevoked = Already revoked.
cmp.errornoasn1 = Message from client not ASN1 encoded.
cmp.errornotcmpmessage = Not a valid CMP message.
cmp.errortypenohandle = Can not handle message type '{0}'.
cmp.errorresponsenull = CmpMessageHandler returned a null response message.
cmp.errorprocess = Exception during CMP processing: {0}.
cmp.responsecodenotok = Response code from http post not OK. It was '{0}'.

# EST resources
est.receivedmsg = EST message received from: {0}, for EST alias: {1}, for operation: {2}
est.sentresponsemsg = Sent EST response to: {0}, for EST alias: {1}, for operation: {2}, process time {3}.

# SCEP resources
scep.errormissingparam = Got request missing parameters from {0}. Parameters 'operation' and 'message' must be supplied.
scep.receivedmsg = Received a SCEP message from {0}.
scep.sentresponsemsg = Sent a SCEP {0} response to {1}.
scep.errorunknownca = SCEP {0} request for unknown CA '{1}'.
scep.errorinvalidreq = Empty or invalid request received.
scep.errorauth = Authorization denied.
scep.errorclientstatus = Wrong client status.
scep.errorclientcertificaterenewal = Error during Client Certificate Renewal.
scep.errornorollovercert = No rollover certificate exists for CA '{0}'.
scep.errorgeneral = Error processing SCEP request.

# Batch resources
batch.createkeystore = Created Keystore for '{0}'.
batch.errornokeyrecoverydata = No Key Recovery Data available for user '{0}', can not be generated.
batch.retrieveingkeys = Retrieving keys for {0}.
batch.generatingkeys = Generating {0} keys of size {1} for {2}.
batch.generateduser = New user generated successfully - {0}.
batch.generatingallstatus = Generating for end entities with status {0}.
batch.generatingnoofusers = Batch generating {0} users.
batch.errorsetstatus = An error happened, setting status to {0}.
batch.infonoclearpwd = User '{0}' does not have clear text password.
batch.errorbatchfailed = BatchMakeP12 failed for {0} users ({1} succeeded) - {0}.
batch.errorbatchfaileduser = BatchMakeP12 failed for '{0}'.
batch.success = {0} new users generated successfully - {1}.
batch.generateindir = Generating keys in directory {0}.
batch.errorunknown = Unknown user, or clear text password is null: {0}.
batch.errorrootnotverify = RootCA certificate does not verify.
batch.errorrootnotselfsigned = RootCA certificate not self-signed.
batch.errorgennotverify = Generated certificate does not verify using CA-certificate.
batch.errorcheckconfig = See config file conf/batchtool.properties for settings.
batch.loadingconfig = Loading configuration from {0}.

# Certificate request resources
certreq.authorizationdenied = Request could not be fulfilled due to lack of authorization. 
certreq.sentlatestcertreq = Sent latest Certificate Request to client at {0}.
certreq.errorsendlatestcertreq = Error sending Certificate Request to {0}.
certreq.errorsendcert = Error sending processed certificate to {0}, cause: {1}.
certreq.sentlatestcrl = Sent latest CRL to client at {0}.
certreq.errorsendcrl = Error sending CRL to {0}, cause: {1}.
certreq.receivedcertreq = Received certificate request for user '{0}' from {1}.
certreq.badcertprofile = Requested certificate profile '{0}' is not allowed in end entity profile. Using default '{1}'.
certreq.nosuchcertprofile = Requested certificate profile '{0}' does not exist. Using default '{1}'.
certreq.ovpntnoruntime = Runtime (shell) is not available.
certreq.ovpntfailedexec = Could not execute of OpenVPN Windows installer script '{0}'.
certreq.ovpntexiterror = OpenVPN windows installer script returned '{0}' on exit.
certreq.wrongstatus = Wrong user status! To generate a certificate for a user the user must have status New, Failed or In process.
certreq.invalidreq = Empty or invalid request received. Please supply a correct request. {0}
certreq.invalidsign = Invalid signature on certificate request. Please supply a correctly signed request.
certreq.invalidkey = Invalid Key in request: {0}. Please supply a correct request.
certreq.catokenoffline = CA token is off line: {0}. Contact your administrator.
certreq.errorgeneral = An unknown error occurred.
certreq.parameters = Parameter names and values
certreq.postonly = The certificate request servlet only handles POST method.
certreq.csrreceivedforservergentoken = User was configured for server generated token but a CSR was sent in the request.\nFor client generated keys the token type User Generated should be used when adding/editing the end entity.\nPlease contact your RA administrator to correct this.
certreq.failed = Request failed. {0}

# Health check resources
healthcheck.allipsauthorized = All IPs are authorized.
healthcheck.errorauth = ERROR : Healthcheck request received from an non authorized IP: {0}.

# Start service resources
startservice.shutdown = Destroy, EJBCA shutdown.
startservice.startup = Init, {0} startup.
startservices.noauditdevices = No security audit logger devices configured.
startservices.noprotectedauditdevices = No integrity protected security audit logger devices configured.

# General error messages, used in several places
error.unknown = Unknown error.

# Messages used by the approval system
approval.alreadyexists = Approval request with approvalID {0} already exists.
approval.notexist = Approval request with requestID {0} does not exist.
approval.addedwaiting = Approval with requestID {0} added with status waiting.
approval.erroradding = Approval with requestID {0} could not be created.
approval.edited = Approval with requestID {0} was edited.
approval.errorediting = Approval with requestID {0} could not be edited.
approval.removed = Approval with requestID {0} removed successfully.
approval.errorremove = Error removing approval request with requestID {0}.
approval.extended = Approval request with requestID {0} was extended for {1} milliseconds.
approval.rejected = Approval request with requestID {0} has been rejected.
approval.expired = Approval request with requestID {0} has expired.
approval.error.alreadyapproved = Request with approvalID {0} has already been approved by current administrator.
approval.error.cannotapproveownrequest = You may not approve an action (approvalID {0}) which you requested yourself.
approval.sentnotification = Approval notification with requestID {0} was sent successfully.
approval.errornotification = Error sending approval notification with requestID {0}.
approval.errornotificationemail = Error sending notification to administrator requesting approval with requestID {0}. The email-addresses, either to administrators or from-address is not configured properly.
approval.approved = Approval request with requestID {0} has been approved.
approval.errorexecuting = Approval with requestID {0} could not execute properly.

# Messages used by approvals (copied from languagefile.*.properties)
APACTIVATECATOKEN         = Activate CA Token

APADDENDENTITY            = Add End Entity

APCHANGESTATUSENDENTITY   = Change Status of End Entity

APDUMMY                   = Dummy Action

APEDITENDENTITY           = Edit End Entity

APGENERATETOKEN           = Generate Token

APKEYRECOVERY             = Key Recover

APREVOKEENDENTITY         = Revoke End Entity

APREVOKEDELETEENDENTITY   = Revoke and Delete End Entity

APREVOKECERTIFICATE       = Revoke or Reactivate Certificate

CLITOOL                   = Command Line Tool

APPROVAL_WFSTATE_APPROVED = Partition approved
APPROVAL_WFSTATE_APPROVED_PARTIALLY = Pending additional approvals
APPROVAL_WFSTATE_REJECTED = Rejected
APPROVAL_WFSTATE_REQUIRES_ACTION = Pending
APPROVAL_WFSTATE_EXPIRED = Expired

# Messages used by peer connectors
PEERS_MGMT_SYNC_NFO_CANCELLED_SHORT = Cancelled.
PEERS_MGMT_SYNC_NFO_FINISHED_SHORT = Finished.
PEERS_MGMT_SYNC_NFO_ADDED = Added
PEERS_MGMT_SYNC_NFO_UPDATED = Updated
PEERS_MGMT_SYNC_NFO_FAILED = Failed
PEERS_MGMT_SYNC_NFO_FAILURE_SHORT = Failure.
PEERS_MGMT_SYNC_NFO_ESTIMATING = Estimating number of rows to process.
PEERS_MGMT_SYNC_NFO_RUNNING = Running.

# EOF
