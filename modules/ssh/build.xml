<?xml version="1.0" encoding="UTF-8"?>
<project name="ssh" default="build-ssh">

	<dirname property="ssh.dir" file="${ant.file.ssh}"/>

	<import file="../build-helpers.xml"/>

	<property name="ssh.build.dir" location="${ssh.dir}/build-ssh"/>
	<property name="ssh.build-test.dir" location="${ssh.dir}/build-test"/>
	<property name="ssh.src.plugins.dir" location="${ssh.dir}/src"/>
	<property name="ssh.src.plugins.test.dir" location="${ssh.dir}/src-test"/>
	<property name="ssh.src-war.dir" location="${ssh.dir}/src-war"/>
	<property name="ssh.build-war.dir" location="${ssh.dir}/build-war"/>
	<property name="resources.dir" location="${ssh.dir}/resources"/>

	<path id="compile.classpath">
		<path refid="lib.servlet.classpath"/>
		<path refid="lib.log4j.classpath"/>
		<path refid="lib.commons-config.classpath"/>
		<path refid="lib.commons-lang.classpath"/><!-- Dependency of commons-config -->
		<path refid="lib.commons-logging.classpath"/><!-- Dependency of commons-config -->
		<path refid="lib.commons-collections.classpath"/><!-- Dependency of commons-config -->
        <path refid="lib.commons-io.classpath"/>
        <path refid="lib.commons-codec.classpath"/>
        <path refid="lib.hc.classpath"/>
		<path refid="lib.jee.classpath"/>
		<path refid="lib.bouncycastle.classpath"/>
		<path refid="lib.ldap.classpath" />
		<path location="${mod.cesecore-x509ca.lib}"/>
        <path location="${mod.cesecore-cvcca.lib}"/>
		<path location="${mod.ejbca-ejb-interface.lib}"/>
		<path location="${mod.ejbca-common-web.lib}"/>
		<path location="${mod.ejbca-common.lib}"/>
        <path location="${mod.cesecore-entity.lib}"/>
        <path location="${mod.cesecore-common.lib}"/>
        <path location="${mod.cesecore-ejb-interface.lib}"/>
	</path>

	<path id="compile.war.classpath">
		<path refid="compile.classpath"/>
		<path location="${ssh.build.dir}"/>
		<path refid="lib.servlet.classpath"/>
	</path>

	<path id="test.classpath">
		<path refid="compile.classpath"/>
		<path refid="lib.commons-io.classpath"/>
		<path refid="lib.junit.classpath"/>
		<path refid="lib.jee-client.classpath"/>
		<path refid="lib.cert-cvc.classpath"/>
		<path refid="lib.ldap.classpath"/>
		<path refid="lib.xmlpull.classpath"/>
		<path location="${ssh.build.dir}"/>
		<path location="${ssh.build-test.dir}"/>
		<path location="${mod.ejbca-ejb-interface.lib}"/>
		<path location="${mod.systemtest-common.lib}"/>
		<path location="${mod.systemtest-interface.lib}"/>
		<path location="${mod.systemtest-ejb.lib}"/>
		<path location="${mod.ejbca-entity.lib}"/>
		<path location="${mod.cesecore-x509ca.lib}"/>
        <path location="${mod.cesecore-cvcca.lib}"/>
		<!-- Needed for WS common classes-->
		<path location="${mod.systemtest-src-test.path}"/>
		<pathelement location="${mod.ejbca-ws-cli.lib}"/>
		<pathelement location="${mod.ejbca-ws-ejb.jar}"/>
		<pathelement location="${mod.ejbca-ejb-cli.lib}"/>
		<path location="${ssh.build-war.dir}/WEB-INF/classes/"/>
	</path>

    <target name="clean" description="Clean up this module">
		<delete dir="${ssh.build-test.dir}" />
		<delete dir="${ssh.build.dir}" />
	 	<delete file="${mod.ssh.lib}" />
    	<delete dir="${ssh.build-war.dir}" />
    </target>

    <condition property="src.exists">
    	<available file="${ssh.src.plugins.dir}" />
    </condition>


	<target name="build-ssh" depends="compile, build-war">
		<buildservicemanifest interface="org.cesecore.certificates.ca.CACommon;org.cesecore.certificates.certificate.ssh.SshPublicKey;org.cesecore.certificates.certificate.ssh.SshCertificate" file="${ssh.build.dir}" classpath="compile.classpath"/>
		<jar destfile="${mod.ssh.lib}" basedir="${ssh.build.dir}"/>
	</target>

	<target name="build-war" depends="compile-war">
		<war destfile="${mod.ssh.war}" webxml="${resources.dir}/WEB-INF/web.xml" basedir="${ssh.build-war.dir}">
	    	<fileset dir="${resources.dir}" excludes="WEB-INF/web.xml"/>
		</war>
	</target>

	<target name="compile-war" depends="with.clover, compile">
		<mkdir dir="${ssh.build-war.dir}/WEB-INF/classes" />
	    <javac srcdir="${ssh.src-war.dir}" destdir="${ssh.build-war.dir}/WEB-INF/classes" debug="on" includeantruntime="no" encoding="UTF-8" target="${java.target.version}"
	        	classpathref="compile.war.classpath"/>
	</target>

	<target name="compile">
		<mkdir dir="${ssh.build.dir}" />
		<javac srcdir="${ssh.src.plugins.dir}" destdir="${ssh.build.dir}" debug="on" includeantruntime="no" encoding="iso8859-1"
			target="${java.target.version}" classpathref="compile.classpath"/>
	</target>

    <target name="tests-compile" depends="compile">
    	<mkdir dir="${ssh.build-test.dir}" />
    	<copy file="${log4j.test.file}" tofile="${ssh.build-test.dir}/log4j.xml" failonerror="true"/>
    	<copy todir="${ssh.build-test.dir}" failonerror="true">
            <fileset dir="${ejbca.home}/src" includes="intresources/**"/>
		    <fileset dir="${ejbca.home}/src/java/" includes="defaultvalues.properties"/>
		</copy>
		<!-- systemtests.properties needs to be in the classpath, if it exists for targeting non-default environment-->
		<copy file="${systemtests.properties.file}" todir="${ssh.build-test.dir}" failonerror="false"/>
    	<!-- jndi.properties needs to be in the classpath, if it exists (not for glassfish) -->
    	<copy file="${jndi.properties.file}" tofile="${ssh.build-test.dir}/jndi.properties" failonerror="false"/>
		<copy file="${jboss-ejb-client.properties}" todir="${ssh.build-test.dir}" failonerror="true"/>
    	<javac srcdir="${ssh.src.plugins.test.dir}" destdir="${ssh.build-test.dir}" debug="on" includeantruntime="no"
    	        	encoding="UTF-8" target="${java.target.version}" classpathref="test.classpath">
			<sourcepath location="${mod.systemtests.path}/src-test/"/>
    	</javac>
    </target>

	<target name="test:unit" depends="tests-compile">
	    <antcall target="showtime" inheritall="true" inheritrefs="true"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="${test.showoutput}" dir="${ssh.dir}">
			<classpath>
	        	<path refid="test.classpath"/>
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${ssh.build-test.dir}" includes="**/*UnitTest.class" />
			</batchtest>
			<jvmarg line="${tests.jvmargs}"/>
		</junit>
		<antcall target="showtime" inheritall="true" inheritrefs="true"/>
	</target>

	<target name="test:system" depends="tests-compile">
		<antcall target="showtime" inheritall="true" inheritrefs="true"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="${test.showoutput}" dir="${ssh.dir}">
			<classpath>
				<path refid="test.classpath"/>
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${ssh.build-test.dir}" includes="**/*SystemTest.class" />
			</batchtest>
			<jvmarg line="${tests.jvmargs}"/>
		</junit>
		<antcall target="showtime" inheritall="true" inheritrefs="true"/>
	</target>

	<!-- =================================
          Run a single test specified with -Dtest.runone=TestName
         ================================= -->
	<target name="runone" depends="tests-compile">
		<fail message="'test.runone' is not set. Example -Dtest.runone=TestName . You can also use -Dtest.showoutput=true to send test output to console." unless="test.runone" />
		<junit printsummary="yes" haltonfailure="no" showoutput="${test.showoutput}">
			<classpath>
        		<path refid="test.classpath"/>
				<path location="${ssh.build-test.dir}" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${ssh.build-test.dir}" includes="**/${test.runone}.class"/>
			</batchtest>
			<jvmarg line="${tests.jvmargs}"/>
		</junit>
	</target>
</project>
