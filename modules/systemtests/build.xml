<?xml version="1.0" encoding="UTF-8"?>
<project name="systemtests" default="build" basedir=".">
	<description>
            This module contains all system tests that require a running application server.
    </description>

	<dirname property="this.dir" file="${ant.file.systemtests}"/>
	<import file="${this.dir}/../build.xml"/>
	<property name="build.dir" location="${this.dir}/build"/>
	<property name="build.test.dir" location="${this.dir}/build/test"/>
	<property name="build.src.dir" location="${this.dir}/build/src"/>
	<property name="build.interface.dir" location="${this.dir}/build/interface"/>
	<property name="build.common.dir" location="${this.dir}/build/common"/>
	<property name="systemtests.dist.dir" location="${ejbca.home}/modules/dist"/>
	<property name="src.dir" location="${this.dir}/src"/>
	<property name="src.test.dir" location="${this.dir}/src-test"/>
	<property name="resources.dir" location="${this.dir}/resources"/>
	<property name="src.interface.dir" location="${this.dir}/src-interface"/>

	<!-- Include endorsed jars from Glassfish -->
	<condition property="tests.jvmargs" value="-Djava.endorsed.dirs=${appserver.home}/modules/endorsed" else="">
		<equals arg1="${appserver.subtype}" arg2="glassfish3"/>
	</condition>

	<!-- When running WS tests we don't want the JEE classes of the appserver, ws should be independent of that,
	     and in the case of JBoss 6 it pulls in apache cxf that does not work with client certificates, at least the same way as sun ws does -->
	<path id="systemtests.classpath.nojee">
		<path refid="lib.ctlog.classpath"/>
		<path refid="lib.guava.classpath"/>
		<path refid="lib.servlet.classpath"/>
		<path refid="lib.mail.classpath"/>
		<path refid="lib.easymock.classpath"/>
		<path refid="lib.junit.classpath"/>
		<path refid="lib.utils.classpath"/>
		<path refid="lib.jpa.classpath"/>
		<path refid="lib.bouncycastle.classpath"/>
		<path refid="lib.ldap.classpath"/>
		<path refid="lib.xstream.classpath"/>
		<path location="${mod.ejbca-common.lib}" />
		<!-- Use by ? -->
		<path refid="lib.commons-logging.classpath"/>
		<pathelement location="${mod.ejbca-ejb-interface.lib}"/>
		<pathelement location="${mod.ejbca-entity.lib}"/>
		<pathelement location="${mod.ejbca-properties.lib}"/>
		<pathelement location="${mod.ejbca-extensions.lib}"/>
		<pathelement location="${mod.ejbca-ws-cli.lib}"/>
		<pathelement location="${mod.ejbca-ws-ejb.jar}"/>
		<pathelement location="${mod.ct.lib}"/>
		<pathelement location="${mod.ejbca-db-cli.lib}"/>
		<pathelement location="${mod.clientToolBox.lib}"/>
		<pathelement location="${mod.ejbca-ejb-cli.lib}"/>
		<pathelement location="${mod.ejbca-common.lib}"/>
		<pathelement location="${mod.ejbca-common-web.lib}"/>
		<pathelement location="${mod.ejbca-ejb.lib}"/>
		<pathelement location="${mod.unidfnr-ejb.lib}"/>
		<pathelement location="${mod.edition-specific-interface.lib}"/>
		<pathelement location="${mod.edition-specific-ejb.lib}"/>
		<pathelement location="${mod.ejbca-common.lib}"/>
		<pathelement location="${mysql.lib}"/>
		<pathelement location="${mod.systemtest-common.lib}"/>
		<pathelement location="${mod.systemtest-interface.lib}"/>
		<pathelement location="${mod.systemtest-ejb.lib}"/>
		<pathelement location="${mod.systemtests.path}/resources"/>
	</path>

	<path id="systemtests.classpath">
		<path refid="systemtests.classpath.nojee"/>
		<path refid="lib.jee.classpath"/>
		<path refid="lib.jee-client.classpath"/>
		<pathelement path="${clover.jar}"/>
	</path>

	<path id="common.classpath">
		<path location="${mod.cesecore-common.lib}"/>
		<path location="${mod.ejbca-common.lib}"/>
	</path>

	<path id="interfaces.classpath">
		<path refid="lib.ejbca-common-web.classpath"/>
		<pathelement location="${mod.ejbca-entity.lib}" />
		<path refid="lib.log4j.classpath"/>
		<path refid="lib.jee.classpath"/>
		<path refid="lib.bouncycastle.classpath"/>
		<path location="${mod.cesecore-entity.lib}"/>
		<path location="${mod.cesecore-common.lib}"/>
		<path location="${mod.cesecore-ejb-interface.lib}"/>
		<path location="${mod.cesecore-ejb.lib}"/>
		<path location="${mod.ejbca-ws.lib}"/>
		<path refid="lib.commons-lang.classpath" />
		<path location="${build.common.dir}" />
	</path>

	<path id="compile-ejb.classpath">
		<path refid="lib.cert-cvc.classpath" />
		<path refid="lib.bouncycastle.classpath" />
		<path refid="lib.log4j.classpath" />
		<path refid="lib.commons-lang.classpath" />
		<path refid="lib.commons-config.classpath" />
		<path refid="lib.commons-collections.classpath" />
		<path refid="lib.commons-logging.classpath" />
		<path refid="lib.commons-io.classpath" />
		<path refid="lib.servlet.classpath" />
		<path refid="lib.ldap.classpath" />
		<path refid="lib.mail.classpath" />
		<path refid="lib.batik.classpath" />
		<path refid="lib.jee.classpath" />
		<path refid="lib.ejbca-common-web.classpath" />
		<pathelement location="${mod.ejbca-ejb.lib}"/>
		<pathelement location="${mod.ejbca-common.lib}"/>
		<path location="${mod.ejbca-entity.lib}" />
		<path refid="lib.quickserver.classpath" />
		<path location="${build.interface.dir}" />
		<path location="${build.common.dir}" />
		<pathelement location="${mod.ejbca-ws-cli.lib}"/>
		<path location="${mod.cesecore-entity.lib}"/>
		<path location="${mod.cesecore-common.lib}"/>
		<path location="${mod.cesecore-ejb-interface.lib}"/>
		<pathelement location="${mod.edition-specific-interface.lib}"/>
		<pathelement location="${mod.edition-specific-ejb.lib}"/>
		<path refid="lib.junit.classpath"/>
	</path>
	
	<path id="manifest.classpath">
	        <path refid="compile-ejb.classpath"/>
			<path location="${ejbca.home}/src/java"/>
			<path location="${ejbca.home}/src"/>
			<path location="${cesecore-common.dir}/build/classes"/>
		</path>

	<target name="build" description="Build this module" depends="cesecore-ejb, va-ejbca-war, build-libs, compile-tests" /> 
	
	<target name="clean" description="Clean up this module">
		<delete dir="${build.dir}" />
		<delete dir="${this.dir}/reports" />
	</target>

	<target name="systemtest-compile-interfaces" depends="ejbca-properties, with.clover">
		<mkdir dir="${build.interface.dir}" />
		<javac srcdir="${src.interface.dir}" destdir="${build.interface.dir}" debug="on" includeantruntime="no"
	        	encoding="UTF-8" classpathref="interfaces.classpath" target="${java.target.version}">
		</javac>
		<buildservicemanifest interface="org.cesecore.authentication.tokens.AuthenticationTokenMetaData" file="${build.interface.dir}" classpath="manifest.classpath"/>
		<!-- systemtests.properties needs to be in the classpath, if it exists for targeting non-default environment-->
		<copy file="${systemtests.properties.file}" todir="${build.interface.dir}" failonerror="false"/>
	</target>

	<target name="systemtest-compile-common" depends="ejbca-properties, with.clover">
		<mkdir dir="${build.common.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.common.dir}" debug="on" includeantruntime="no"
	        	encoding="UTF-8" classpathref="common.classpath" target="${java.target.version}">
            <include name="org/cesecore/audit/impl/*EventTypes.java"/>
            <include name="org/cesecore/keys/validation/DnsNameValidatorMock.java"/>
            <include name="org/cesecore/certificates/ca/TestExtendedCAServiceInfo.java"/>
            <include name="org/ejbca/core/ejb/ca/caadmin/UnAuthorizedCustomPublisherMock.java"/>			
            <include name="org/ejbca/core/ejb/ca/caadmin/AuthorizedCustomPublisherMock.java"/>			
		</javac>
	</target>

	<target name="systemtest-compile-src" depends="with.clover">
		<mkdir dir="${build.src.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.src.dir}" debug="on" includeantruntime="no"
			        	encoding="UTF-8" classpathref="compile-ejb.classpath" target="${java.target.version}">	
            <exclude name="org/cesecore/audit/impl/*EventTypes.java"/>
            <exclude name="org/cesecore/certificates/ca/TestExtendedCAServiceInfo.java"/>
            <exclude name="org/ejbca/core/ejb/ca/caadmin/UnAuthorizedCustomPublisherMock.java"/>			
            <exclude name="org/ejbca/core/ejb/ca/caadmin/AuthorizedCustomPublisherMock.java"/>			
		</javac>
	</target>

	<target name="build-libs" depends="check-inproduction" unless="in-production-mode">
		<antcall target="systemtest-compile-common" />
		<jar destfile="${mod.systemtest-common.lib}" basedir="${build.common.dir}"/>
		<antcall target="systemtest-compile-interfaces" />
		<jar destfile="${mod.systemtest-interface.lib}" basedir="${build.interface.dir}"/>
		<antcall target="systemtest-compile-src" />	
		<buildservicemanifest interface="org.cesecore.certificates.certificate.certextensions.CustomCertificateExtension"
							    		file="${build.src.dir}" classpath="manifest.classpath"/>
		<jar destfile="${mod.systemtest-ejb.lib}" basedir="${build.src.dir}">	
			<!--<fileset dir="${build.src.dir}" includes="META-INF/**/*"/>-->
		</jar>
	</target>

	<target name="compile-tests" depends="assert-notinproduction, ejbca-properties, ejbca-ejb, ejbca-common, ejbca-ws-cli, ejbca-db-cli, ejbca-ejb-cli, clientToolBox, ejbca-ws, with.clover">
		<mkdir dir="${build.test.dir}" />
		<javac srcdir="${src.test.dir}" destdir="${build.test.dir}" debug="on" includeantruntime="no"
        	encoding="UTF-8" classpathref="systemtests.classpath" target="${java.target.version}">
		</javac>
		<javac srcdir="${src.test.dir}" destdir="${build.test.dir}" debug="on" includeantruntime="no" includejavaruntime="true"
        	encoding="UTF-8" classpathref="systemtests.classpath" target="${java.target.version}">
			<classpath path="${build.test.dir}"/>
		</javac>
		<copy file="${log4j.test.file}" tofile="${build.test.dir}/log4j.xml" failonerror="true"/>
		<!-- jndi.properties needs to be in the classpath, if it exists (not for glassfish) -->
		<copy file="${jndi.properties.file}" todir="${build.dir}" failonerror="false"/>
		<copy file="${jboss-ejb-client.properties}" todir="${build.dir}" failonerror="false"/>
		<!-- needed by the cesecore tests -->
		<copy todir="${build.test.dir}" file="${ejbca.home}/src/java/defaultvalues.properties"/>
		<copy todir="${build.test.dir}/org/ejbca/core/protocol/ws" enablemultiplemappings="true">
		    <fileset dir="${resources.dir}" includes="**/*" />
		</copy>
		<copy todir="${build.test.dir}/resources" enablemultiplemappings="true">
			<fileset dir="${resources.dir}" includes="**/*" />
		</copy>
		<chmod file="${build.test.dir}/resources/platform/unix/*.sh" perm="744"/>
		<chmod file="${build.test.dir}/resources/platform/windows/*.bat" perm="744"/>
	</target>

	<target name="assert-notinproduction">
		<fail message="You cannot run system tests in a production environment.">
			<condition>
				<or>
					<equals arg1="${ejbca.productionmode}" arg2="ocsp" casesensitive="false"/>
					<equals arg1="${ejbca.productionmode}" arg2="ca" casesensitive="false"/>
					<equals arg1="${ejbca.productionmode}" arg2="true" casesensitive="false"/>
				</or>
			</condition>
		</fail>
	</target>
	
	<target name="check-inproduction">
		<condition property="in-production-mode">
			<or>
				<equals arg1="${ejbca.productionmode}" arg2="ocsp" casesensitive="false"/>
				<equals arg1="${ejbca.productionmode}" arg2="ca" casesensitive="false"/>
				<equals arg1="${ejbca.productionmode}" arg2="true" casesensitive="false"/>
			</or>
		</condition>
	</target>

	<target name="assert-appserverrunning" description="Check that the server is running">
		<echo message="Verifying that the application server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="appserver.notrunning.publicweb">
			<http url="http://localhost:${httpserver.pubhttp}/ejbca/index.jsp"/>
		</waitfor>
		<fail message="Please start application server before running this script" if="appserver.notrunning.publicweb"/>
	</target>

	<target name="assert-appserverrunning-ocsp" description="Check that the server is at least running the OCSP service">
		<echo message="Verifying that the application server is up and running..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="appserver.notrunning.ocsp">
			<http url="http://localhost:${httpserver.pubhttp}/ejbca/publicweb/status/ocsp/"/>
		</waitfor>
		<fail message="Please start application server before running this script" if="appserver.notrunning.ocsp"/>
	</target>

	<!-- If using antcall you must use inheritrefs="true" in order for not having to call clover-setup every time -->
	<target name="runone-internal" depends="build, assert-appserverrunning-ocsp">
		<fail message="'test.runone' is not set. Example -Dtest.runone=LoggingStressTest" unless="test.runone" />
		<property name="test.runoneexclude" value=""/>
		<property name="httpCmpProxyURL" value=""/>
		<fail message="'test.runoneexclude' is not set. Example -Dtest.runoneclude=none" unless="test.runoneexclude" />
		<fail message="'reports.dir' is not set." unless="reports.dir" />
		<mkdir dir="${this.dir}/p12"/>
		<!-- Workaround for tests using BatchMakeP12 -->
		<mkdir dir="${build.test.dir}/conf"/>
		<!-- Workaround for tests TestCertificateProfile -->
		<copy todir="${build.test.dir}/conf" file="${ejbca.home}/conf/extendedkeyusage.properties" failonerror="false"/>
		<!-- Workaround for tests TestCertificateProfile -->
		<property name="runone-internal.classpath" value="systemtests.classpath"/>
		<echo message="runone-internal.classpath=${runone-internal.classpath}"/>
		<!-- needed by the cesecore tests -->
		<copy todir="${build.test.dir}" file="${ejbca.home}/src/java/defaultvalues.properties"/>
		<!-- conditional property for remote debugging -->
		<condition property="remoteDebugJvmArgs"
				   value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8787"
				   else="-ea">
			<istrue value="${remoteDebug}"/>
		</condition>
		<!-- set a default -->
		<junit printsummary="yes" haltonfailure="no" >
			<classpath>
				<path location="${build.test.dir}" />
				<path refid="${runone-internal.classpath}" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<sysproperty key="httpCmpProxyURL" value="${httpCmpProxyURL}"/>
			<jvmarg line="${tests.jvmargs}"/>
			<jvmarg value="${remoteDebugJvmArgs}"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}" includes="**/${test.runone}.class" excludes="**/${test.runoneexclude}.class"/>
			</batchtest>
		</junit>
		<delete dir="${this.dir}/p12" />
		<!-- Workaround for tests using BatchMakeP12 -->
	</target>

	<condition property="p11exclude" value="" else="**/*PKCS11*Test.class **/*Pkcs11*Test.class">
		<isset property="test.includep11"/>
	</condition>
	<!-- =================================
          Run most system tests
         ================================= -->
	<target name="run" depends="build, assert-appserverrunning, runws, edition-specific-interface, eedition-ejb" description="Run all system tests, enable CMP TCP to run those tests, set -Dmysql.lib=... to enable Cmp Unid test, use -Dtest.includep11=true to include P11 tests">
		<antcall target="showtime"/>
		<mkdir dir="${this.dir}/p12"/>
		<!-- Workaround for tests using BatchMakeP12 -->
		<mkdir dir="${build.test.dir}/conf"/>
		<!-- Workaround for tests TestCertificateProfile -->
		<copy todir="${build.test.dir}/conf" file="${ejbca.home}/conf/extendedkeyusage.properties" failonerror="false"/>
		<!-- Workaround for tests TestCertificateProfile -->
		<echo message="Checking if the CMP TCP listener is listening on port 127.0.0.1:5587... (will result in additional tests being run)"/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="cmptcplistener.notrunning">
			<socket server="127.0.0.1" port="5587"/>
		</waitfor>
		<!-- needed by the cesecore tests -->
		<copy todir="${build.test.dir}" file="${ejbca.home}/src/java/defaultvalues.properties"/>
		<!-- The CMP unid test requires the mysql.lib property to be set -->
		<condition property="cmpunid.enabled" value="true">
			<isset property="mysql.lib"/>
		</condition>
    	<echo message="pkcs11-exclude=${p11exclude}"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.test.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="${tests.jvmargs}"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}" includes="org/ejbca/core/ejb/ca/caadmin/CAsTest.class"/>
			</batchtest>
			<!-- Tests that require CAsTest to setup CAs -->
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}" includes="org/ejbca/core/ejb/ca/sign/SignSessionTest.class"/>
			</batchtest>
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}" includes="org/ejbca/core/ejb/ca/caadmin/RemoveCATest.class"/>
			</batchtest>
			<!-- Most system tests -->
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}">
					<include name="**/*Test.class" />
					<!-- optionally include PKCS11 tests, requires PKCS11 emulator -->
					<exclude name="${p11exclude}" />
					<!-- Tests that require TestCAs to setup CAs -->
					<exclude name="org/ejbca/core/ejb/ca/caadmin/CAsTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignSessionTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/caadmin/RemoveCATest.class" />
					<!-- Tests that take a very long time to complete -->
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest$SignTester.class" />
					<exclude name="org/ejbca/core/ejb/ca/sign/SignLotsOfCertsTest$1.class" />
					<exclude name="org/ejbca/core/ejb/log/LoggingStressTest.class" />
					<exclude name="org/ejbca/core/ejb/log/LoggingStressTest$LogTester.class" />
					<exclude name="org/ejbca/core/ejb/ra/AddLotsofCertsPerUserTest.class" />
					<exclude name="org/ejbca/core/ejb/ra/AddLotsofUsersTest.class" />
					<exclude name="org/ejbca/core/ejb/ra/RaMasterApiStressTest.class" />
					<!-- Tests that require special configuration to work -->
					<exclude name="org/ejbca/ui/web/pub/AutoEnrollServletTest.class" />	
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRAPbeMultipleKeyIdRequestTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolLookupServerHttpTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolLookupServerHttpTest$SimpleVerifier.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest$1.class" />
					<exclude name="org/ejbca/core/protocol/ocsp/ProtocolOcspHttpPerfTest$OcspTester.class" />
					<!--
					<exclude name="org/ejbca/ui/cli/OcspMonitoringToolTest.class" />-->
					<exclude name="org/ejbca/ejb/GlassfishVerifierReportParserTest.class" />
					<!-- Tests that are unstable and should be corrected or require special configuration -->
					<!-- Tests that require the CMP TCP listener -->
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRAPbeTcpRequestTest.class" />
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
					<!-- Tests that require the CMP Unid datahandler -->
					<exclude name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
					<!-- Tests that require unique index in the database to work -->
					<exclude name="org/ejbca/core/ejb/ca/sign/CustomCertSerialnumberTest.class" />
					<exclude name="org/ejbca/core/protocol/cmp/CrmfRARequestCustomSerialNoTest.class" />
					<!-- Exclude WS, they are run from their own target, runws -->
					<exclude name="**/protocol/ws/*" />
					<!-- Exclude profiling test, since we want to run it later -->
					<exclude name="org/ejbca/core/ejb/ProfilingTest.class" />
				</fileset>
			</batchtest>
			<!-- Tests that require the CMP TCP listener -->
			<batchtest fork="yes" todir="${reports.dir}" unless="cmptcplistener.notrunning">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/core/protocol/cmp/CrmfRAPbeTcpRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
				</fileset>
			</batchtest>
			<!-- Tests that require the CMP Unid data handler -->
			<batchtest fork="yes" todir="${reports.dir}" if="cmpunid.enabled">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
				</fileset>
			</batchtest>
			<!-- Run the profiling test last to get stats of all the previous tests -->
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/core/ejb/ProfilingTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<delete dir="${this.dir}/p12" />
		<antcall target="showtime"/>
	</target>

	<target name="runweb" depends="build, assert-appserverrunning" description="Run web-realted system tests">
		<antcall target="showtime"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.test.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="${tests.jvmargs}"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/core/protocol/scep/ProtocolScepHttpTest.class" />
					<include name="org/ejbca/core/protocol/scep/ProtocolOcspHttpTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRARequestTest.class" />
					<include name="org/ejbca/ui/web/pub/WebdistHttpTest.class" />
					<include name="org/ejbca/ui/web/pub/CertRequestHttpTest.class" />
					<include name="org/ejbca/ui/web/pub/WebEjbcaHealthCheckTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<antcall target="showtime"/>
	</target>

	<target name="runcmp" depends="build, assert-appserverrunning" description="Run CMP system tests">
		<antcall target="showtime"/>
		<echo message="Checking if the CMP TCP listener is listening on port 127.0.0.1:5587..."/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="cmptcplistener.notrunning">
			<socket server="127.0.0.1" port="5587"/>
		</waitfor>
		<fail if="cmptcplistener.notrunning" message="This test requires a running CMP TCP listener"/>
		<junit printsummary="yes" haltonfailure="no">
			<sysproperty key="httpCmpProxyURL" value="${httpCmpProxyURL}"/>
			<sysproperty key="tcpCmpProxyIP" value="${tcpCmpProxyIP}"/>
			<sysproperty key="tcpCmpProxyPort" value="${tcpCmpProxyPort}"/>
			<classpath>
				<path location="${build.test.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="${tests.jvmargs}"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}" unless="cmptcplistener.notrunning">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/core/protocol/cmp/CrmfRARequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRAPbeRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CrmfRATcpRequestTest.class" />
					<include name="org/ejbca/core/protocol/cmp/CmpRAUnidTest.class" />
				</fileset>
			</batchtest>
		</junit>
		<antcall target="showtime"/>
	</target>

	<!-- =================================
          Run a single test specified with -Dtest.runone=TestName
         ================================= -->
	<target name="runone" description="Run a single JUnit-test specified -Dtest.runone=classname" unless="test.runone.fileset.notempty">
		<antcall target="runone-internal" inheritrefs="true" />
	</target>

	<!-- =================================
          Run the log stress test
         ================================= -->
	<target name="runlogstress" description="Run the log stress test (runs for one hour)">
		<property name="test.runone" value="LoggingStressTest"/>
		<antcall target="runone-internal" inheritrefs="true" />
	</target>

	<target name="runws" description="Run Web Services system tests">
		<property name="runone-internal.classpath" value="systemtests.classpath.nojee"/>
		<!-- no jee classes for ws tests -->
		<antcall target="runone-internal" inheritrefs="true">
			<param name="test.runone" value="protocol/ws/*Test"/>
		</antcall>
	</target>

	<target name="runlotsperuser" description="Run system tests that creates lots of users and certificates for each user">
		<property name="test.runone" value="AddLotsofCertsPerUserTest"/>
		<antcall target="runone-internal" inheritrefs="true" />
	</target>

	<target name="runlotsofusers" description="Run system tests that creates lots of users">
		<property name="test.runone" value="AddLotsofUsersTest"/>
	</target>

	<target name="runperf" description="Run system tests that creates lots of certificates">
		<property name="test.runone" value="SignLotsOfCertsTest"/>
		<antcall target="runone-internal" inheritrefs="true" />
	</target>

	<target name="rungfver" depends="build">
		<condition property="isglassfish">
			<matches pattern="glassfish" string="${appserver.type}"/>
		</condition>
		<exec command="${appserver.home}/bin/verifier" failifexecutionfails="false">
			<arg line="-p -d ${reports.dir} ${ejbca.home}/dist/ejbca.ear"/>
		</exec>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<path location="${build.test.dir}" />
				<path refid="systemtests.classpath" />
				<pathelement path="${clover.jar}"/>
			</classpath>
			<jvmarg line="${tests.jvmargs}"/>
			<jvmarg line="-Dvertest.report=${reports.dir}/ejbca.ear.xml -Dvertest.expectedErrors=0 -Dvertest.expectedFailures=3 -Dvertest.expectedWarnings=0"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.dir}" if="isglassfish">
				<fileset dir="${build.test.dir}">
					<include name="org/ejbca/ejb/GlassfishVerifierReportParserTest.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>
