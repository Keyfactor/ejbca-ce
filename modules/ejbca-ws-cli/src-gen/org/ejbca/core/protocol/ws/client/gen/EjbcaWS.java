
package org.ejbca.core.protocol.ws.client.gen;

import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EjbcaWS", targetNamespace = "http://ws.protocol.core.ejbca.org/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EjbcaWS {


    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isAuthorized", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.IsAuthorized")
    @ResponseWrapper(localName = "isAuthorizedResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.IsAuthorizedResponse")
    public boolean isAuthorized(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws EjbcaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws UserDoesntFullfillEndEntityProfile_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "editUser", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.EditUser")
    @ResponseWrapper(localName = "editUserResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.EditUserResponse")
    public void editUser(
        @WebParam(name = "arg0", targetNamespace = "")
        UserDataVOWS arg0)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, UserDoesntFullfillEndEntityProfile_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.UserDataVOWS>
     * @throws EndEntityProfileNotFoundException_Exception
     * @throws IllegalQueryException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findUser", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FindUser")
    @ResponseWrapper(localName = "findUserResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FindUserResponse")
    public List<UserDataVOWS> findUser(
        @WebParam(name = "arg0", targetNamespace = "")
        UserMatch arg0)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception, EndEntityProfileNotFoundException_Exception, IllegalQueryException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findCerts", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FindCerts")
    @ResponseWrapper(localName = "findCertsResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FindCertsResponse")
    public List<Certificate> findCerts(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        boolean arg1)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastCertChain", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLastCertChain")
    @ResponseWrapper(localName = "getLastCertChainResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLastCertChainResponse")
    public List<Certificate> getLastCertChain(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createCryptoToken", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCryptoToken")
    @ResponseWrapper(localName = "createCryptoTokenResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCryptoTokenResponse")
    public void createCryptoToken(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        boolean arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        List<KeyValuePair> arg4)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "generateCryptoTokenKeys", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GenerateCryptoTokenKeys")
    @ResponseWrapper(localName = "generateCryptoTokenKeysResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GenerateCryptoTokenKeysResponse")
    public void generateCryptoTokenKeys(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @param arg6
     * @param arg7
     * @param arg8
     * @param arg9
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createCA", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCA")
    @ResponseWrapper(localName = "createCAResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCAResponse")
    public void createCA(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        long arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6,
        @WebParam(name = "arg7", targetNamespace = "")
        String arg7,
        @WebParam(name = "arg8", targetNamespace = "")
        List<KeyValuePair> arg8,
        @WebParam(name = "arg9", targetNamespace = "")
        List<KeyValuePair> arg9)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addSubjectToRole", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.AddSubjectToRole")
    @ResponseWrapper(localName = "addSubjectToRoleResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.AddSubjectToRoleResponse")
    public void addSubjectToRole(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removeSubjectFromRole", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RemoveSubjectFromRole")
    @ResponseWrapper(localName = "removeSubjectFromRoleResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RemoveSubjectFromRoleResponse")
    public void removeSubjectFromRole(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCertificatesByExpirationTime", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTime")
    @ResponseWrapper(localName = "getCertificatesByExpirationTimeResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTimeResponse")
    public List<Certificate> getCertificatesByExpirationTime(
        @WebParam(name = "arg0", targetNamespace = "")
        long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws EjbcaException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCertificatesByExpirationTimeAndIssuer", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTimeAndIssuer")
    @ResponseWrapper(localName = "getCertificatesByExpirationTimeAndIssuerResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTimeAndIssuerResponse")
    public List<Certificate> getCertificatesByExpirationTimeAndIssuer(
        @WebParam(name = "arg0", targetNamespace = "")
        long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws EjbcaException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCertificatesByExpirationTimeAndType", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTimeAndType")
    @ResponseWrapper(localName = "getCertificatesByExpirationTimeAndTypeResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificatesByExpirationTimeAndTypeResponse")
    public List<Certificate> getCertificatesByExpirationTimeAndType(
        @WebParam(name = "arg0", targetNamespace = "")
        long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.CertificateResponse
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "crmfRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CrmfRequest")
    @ResponseWrapper(localName = "crmfRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CrmfRequestResponse")
    public CertificateResponse crmfRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, CesecoreException_Exception, EjbcaException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.CertificateResponse
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "spkacRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.SpkacRequest")
    @ResponseWrapper(localName = "spkacRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.SpkacRequestResponse")
    public CertificateResponse spkacRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, CesecoreException_Exception, EjbcaException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws WaitingForApprovalException_Exception
     * @throws CertificateExpiredException_Exception
     * @throws SignRequestException_Exception
     * @throws NotFoundException_Exception
     * @throws ApprovalException_Exception
     * @throws UserDoesntFullfillEndEntityProfile_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cvcRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CvcRequest")
    @ResponseWrapper(localName = "cvcRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CvcRequestResponse")
    public List<Certificate> cvcRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, CertificateExpiredException_Exception, CesecoreException_Exception, EjbcaException_Exception, NotFoundException_Exception, SignRequestException_Exception, UserDoesntFullfillEndEntityProfile_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "caRenewCertRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaRenewCertRequest")
    @ResponseWrapper(localName = "caRenewCertRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaRenewCertRequestResponse")
    public byte[] caRenewCertRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<byte[]> arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        boolean arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        boolean arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        boolean arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws CAExistsException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "importCaCert", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.ImportCaCert")
    @ResponseWrapper(localName = "importCaCertResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.ImportCaCertResponse")
    public void importCaCert(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1)
        throws AuthorizationDeniedException_Exception, CAExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws EjbcaException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCaCert", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.UpdateCaCert")
    @ResponseWrapper(localName = "updateCaCertResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.UpdateCaCertResponse")
    public void updateCaCert(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "caCertResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaCertResponse")
    @ResponseWrapper(localName = "caCertResponseResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaCertResponseResponse")
    public void caCertResponse(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        List<byte[]> arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CesecoreException_Exception, EjbcaException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "caCertResponseForRollover", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaCertResponseForRollover")
    @ResponseWrapper(localName = "caCertResponseForRolloverResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CaCertResponseForRolloverResponse")
    public void caCertResponseForRollover(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        List<byte[]> arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CesecoreException_Exception, EjbcaException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "rolloverCACert", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RolloverCACert")
    @ResponseWrapper(localName = "rolloverCACertResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RolloverCACertResponse")
    public void rolloverCACert(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.CertificateResponse
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws CesecoreException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs10Request", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.Pkcs10Request")
    @ResponseWrapper(localName = "pkcs10RequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.Pkcs10RequestResponse")
    public CertificateResponse pkcs10Request(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, CesecoreException_Exception, EjbcaException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.KeyStore
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs12Req", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.Pkcs12Req")
    @ResponseWrapper(localName = "pkcs12ReqResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.Pkcs12ReqResponse")
    public KeyStore pkcs12Req(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws AlreadyRevokedException_Exception
     * @throws NotFoundException_Exception
     * @throws ApprovalException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "revokeCert", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCert")
    @ResponseWrapper(localName = "revokeCertResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCertResponse")
    public void revokeCert(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws AlreadyRevokedException_Exception, ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws RevokeBackDateNotAllowedForProfileException_Exception
     * @throws NotFoundException_Exception
     * @throws ApprovalException_Exception
     * @throws AlreadyRevokedException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws DateNotValidException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "revokeCertBackdated", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCertBackdated")
    @ResponseWrapper(localName = "revokeCertBackdatedResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCertBackdatedResponse")
    public void revokeCertBackdated(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3)
        throws AlreadyRevokedException_Exception, ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, DateNotValidException_Exception, EjbcaException_Exception, NotFoundException_Exception, RevokeBackDateNotAllowedForProfileException_Exception, WaitingForApprovalException_Exception
    ;

	/**
	* 
	* @param arg2
	* @param arg1
	* @param arg0
	* @throws CADoesntExistsException_Exception
	* @throws NotFoundException_Exception
	* @throws AuthorizationDeniedException_Exception
	* @throws WaitingForApprovalException_Exception
	* @throws ApprovalException_Exception
	* @throws EjbcaException_Exception
	* @throws DateNotValidException_Exception
	* @throws RevokeBackDateNotAllowedForProfileException_Exception
	* @throws AlreadyRevokedException_Exception
	* @throws CertificateProfileDoesNotExistException_Exception
	*/
    @WebMethod
    @RequestWrapper(localName = "revokeCertWithMetadata", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCertWithMetadata")
    @ResponseWrapper(localName = "revokeCertWithMetadataResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeCertWithMetadataResponse")
    public void revokeCertWithMetadata(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        List<KeyValuePair> arg2)
        throws AlreadyRevokedException_Exception, ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, 
        DateNotValidException_Exception, EjbcaException_Exception, NotFoundException_Exception, RevokeBackDateNotAllowedForProfileException_Exception, 
        WaitingForApprovalException_Exception, CertificateProfileDoesNotExistException_Exception
    ;
    
	/**
	* 
	* @param arg2
	* @param arg1
	* @param arg0
	* @throws WaitingForApprovalException_Exception
	* @throws AlreadyRevokedException_Exception
	* @throws NotFoundException_Exception
	* @throws ApprovalException_Exception
	* @throws CADoesntExistsException_Exception
	* @throws EjbcaException_Exception
	* @throws AuthorizationDeniedException_Exception
	*/
    @WebMethod
    @RequestWrapper(localName = "revokeUser", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeUser")
    @ResponseWrapper(localName = "revokeUserResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeUserResponse")
    public void revokeUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        boolean arg2)
        throws AlreadyRevokedException_Exception, ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "keyRecoverNewest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecoverNewest")
    @ResponseWrapper(localName = "keyRecoverNewestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecoverNewestResponse")
    public void keyRecoverNewest(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws WaitingForApprovalException_Exception
     * @throws ApprovalException_Exception
     * @throws NotFoundException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "keyRecover", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecover")
    @ResponseWrapper(localName = "keyRecoverResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecoverResponse")
    public void keyRecover(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @return
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws WaitingForApprovalException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "keyRecoverEnroll", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecoverEnroll")
    @ResponseWrapper(localName = "keyRecoverEnrollResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.KeyRecoverEnrollResponse")
    public KeyStore keyRecoverEnroll(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception, CADoesntExistsException_Exception, WaitingForApprovalException_Exception
    ;
    
//    /**
//     * 
//     * @param arg1
//     * @param arg0
//     * @throws WaitingForApprovalException_Exception
//     * @throws NotFoundException_Exception
//     * @throws ApprovalException_Exception
//     * @throws AlreadyRevokedException_Exception
//     * @throws CADoesntExistsException_Exception
//     * @throws EjbcaException_Exception
//     * @throws AuthorizationDeniedException_Exception
//     */
//    @WebMethod
//    @RequestWrapper(localName = "revokeToken", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeToken")
//    @ResponseWrapper(localName = "revokeTokenResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RevokeTokenResponse")
//    public void revokeToken(
//        @WebParam(name = "arg0", targetNamespace = "")
//        String arg0,
//        @WebParam(name = "arg1", targetNamespace = "")
//        int arg1)
//        throws AlreadyRevokedException_Exception, ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
//    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.RevokeStatus
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkRevokationStatus", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CheckRevokationStatus")
    @ResponseWrapper(localName = "checkRevokationStatusResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CheckRevokationStatusResponse")
    public RevokeStatus checkRevokationStatus(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.UserDataSourceVOWS>
     * @throws UserDataSourceException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "fetchUserData", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FetchUserData")
    @ResponseWrapper(localName = "fetchUserDataResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.FetchUserDataResponse")
    public List<UserDataSourceVOWS> fetchUserData(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception, UserDataSourceException_Exception
    ;

//    /**
//     * 
//     * @param arg4
//     * @param arg3
//     * @param arg2
//     * @param arg1
//     * @param arg0
//     * @return
//     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.TokenCertificateResponseWS>
//     * @throws WaitingForApprovalException_Exception
//     * @throws ApprovalException_Exception
//     * @throws ApprovalRequestExecutionException_Exception
//     * @throws UserDoesntFullfillEndEntityProfile_Exception
//     * @throws HardTokenExistsException_Exception
//     * @throws CADoesntExistsException_Exception
//     * @throws AuthorizationDeniedException_Exception
//     * @throws EjbcaException_Exception
//     * @throws ApprovalRequestExpiredException_Exception
//     */
//    @WebMethod
//    @WebResult(targetNamespace = "")
//    @RequestWrapper(localName = "genTokenCertificates", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GenTokenCertificates")
//    @ResponseWrapper(localName = "genTokenCertificatesResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GenTokenCertificatesResponse")
//    public List<TokenCertificateResponseWS> genTokenCertificates(
//        @WebParam(name = "arg0", targetNamespace = "")
//        UserDataVOWS arg0,
//        @WebParam(name = "arg1", targetNamespace = "")
//        List<TokenCertificateRequestWS> arg1,
//        @WebParam(name = "arg2", targetNamespace = "")
//        HardTokenDataWS arg2,
//        @WebParam(name = "arg3", targetNamespace = "")
//        boolean arg3,
//        @WebParam(name = "arg4", targetNamespace = "")
//        boolean arg4)
//        throws ApprovalException_Exception, ApprovalRequestExecutionException_Exception, ApprovalRequestExpiredException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, HardTokenExistsException_Exception, UserDoesntFullfillEndEntityProfile_Exception, WaitingForApprovalException_Exception
//    ;

//    /**
//     * 
//     * @param arg0
//     * @return
//     *     returns boolean
//     * @throws EjbcaException_Exception
//     */
//    @WebMethod
//    @WebResult(targetNamespace = "")
//    @RequestWrapper(localName = "existsHardToken", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.ExistsHardToken")
//    @ResponseWrapper(localName = "existsHardTokenResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.ExistsHardTokenResponse")
//    public boolean existsHardToken(
//        @WebParam(name = "arg0", targetNamespace = "")
//        String arg0)
//        throws EjbcaException_Exception
//    ;

//    /**
//     * 
//     * @param arg2
//     * @param arg1
//     * @param arg0
//     * @return
//     *     returns org.ejbca.core.protocol.ws.client.gen.HardTokenDataWS
//     * @throws WaitingForApprovalException_Exception
//     * @throws NotFoundException_Exception
//     * @throws ApprovalRequestExecutionException_Exception
//     * @throws HardTokenDoesntExistsException_Exception
//     * @throws CADoesntExistsException_Exception
//     * @throws AuthorizationDeniedException_Exception
//     * @throws EjbcaException_Exception
//     * @throws ApprovalRequestExpiredException_Exception
//     */
//    @WebMethod
//    @WebResult(targetNamespace = "")
//    @RequestWrapper(localName = "getHardTokenData", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetHardTokenData")
//    @ResponseWrapper(localName = "getHardTokenDataResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetHardTokenDataResponse")
//    public HardTokenDataWS getHardTokenData(
//        @WebParam(name = "arg0", targetNamespace = "")
//        String arg0,
//        @WebParam(name = "arg1", targetNamespace = "")
//        boolean arg1,
//        @WebParam(name = "arg2", targetNamespace = "")
//        boolean arg2)
//        throws ApprovalRequestExecutionException_Exception, ApprovalRequestExpiredException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, HardTokenDoesntExistsException_Exception, NotFoundException_Exception, WaitingForApprovalException_Exception
//    ;

//    /**
//     * 
//     * @param arg2
//     * @param arg1
//     * @param arg0
//     * @return
//     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.HardTokenDataWS>
//     * @throws CADoesntExistsException_Exception
//     * @throws AuthorizationDeniedException_Exception
//     * @throws EjbcaException_Exception
//     */
//    @WebMethod
//    @WebResult(targetNamespace = "")
//    @RequestWrapper(localName = "getHardTokenDatas", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetHardTokenDatas")
//    @ResponseWrapper(localName = "getHardTokenDatasResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetHardTokenDatasResponse")
//    public List<HardTokenDataWS> getHardTokenDatas(
//        @WebParam(name = "arg0", targetNamespace = "")
//        String arg0,
//        @WebParam(name = "arg1", targetNamespace = "")
//        boolean arg1,
//        @WebParam(name = "arg2", targetNamespace = "")
//        boolean arg2)
//        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
//    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws CADoesntExistsException_Exception
     * @throws PublisherException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "republishCertificate", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RepublishCertificate")
    @ResponseWrapper(localName = "republishCertificateResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.RepublishCertificateResponse")
    public void republishCertificate(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, PublisherException_Exception
    ;

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "customLog", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CustomLog")
    @ResponseWrapper(localName = "customLogResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CustomLogResponse")
    public void customLog(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        Certificate arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws MultipleMatchException_Exception
     * @throws UserDataSourceException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteUserDataFromSource", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.DeleteUserDataFromSource")
    @ResponseWrapper(localName = "deleteUserDataFromSourceResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.DeleteUserDataFromSourceResponse")
    public boolean deleteUserDataFromSource(
        @WebParam(name = "arg0", targetNamespace = "")
        List<String> arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        boolean arg2)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception, MultipleMatchException_Exception, UserDataSourceException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws ApprovalException_Exception
     * @throws EjbcaException_Exception
     * @throws ApprovalRequestExpiredException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isApproved", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.IsApproved")
    @ResponseWrapper(localName = "isApprovedResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.IsApprovedResponse")
    public int isApproved(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws ApprovalException_Exception, ApprovalRequestExpiredException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws ApprovalException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws ApprovalRequestExpiredException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRemainingNumberOfApprovals", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetRemainingNumberOfApprovals")
    @ResponseWrapper(localName = "getRemainingNumberOfApprovalsResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetRemainingNumberOfApprovalsResponse")
    public int getRemainingNumberOfApprovals(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, ApprovalRequestExpiredException_Exception
    ;
    
    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.Certificate
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCertificate", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificate")
    @ResponseWrapper(localName = "getCertificateResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetCertificateResponse")
    public Certificate getCertificate(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.NameAndId>
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAvailableCAs", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCAs")
    @ResponseWrapper(localName = "getAvailableCAsResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCAsResponse")
    public List<NameAndId> getAvailableCAs()
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.NameAndId>
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAuthorizedEndEntityProfiles", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAuthorizedEndEntityProfiles")
    @ResponseWrapper(localName = "getAuthorizedEndEntityProfilesResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAuthorizedEndEntityProfilesResponse")
    public List<NameAndId> getAuthorizedEndEntityProfiles()
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.NameAndId>
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAvailableCertificateProfiles", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCertificateProfiles")
    @ResponseWrapper(localName = "getAvailableCertificateProfilesResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCertificateProfilesResponse")
    public List<NameAndId> getAvailableCertificateProfiles(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.NameAndId>
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAvailableCAsInProfile", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCAsInProfile")
    @ResponseWrapper(localName = "getAvailableCAsInProfileResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetAvailableCAsInProfileResponse")
    public List<NameAndId> getAvailableCAsInProfile(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     * @throws UnknownProfileTypeException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProfile", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetProfile")
    @ResponseWrapper(localName = "getProfileResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetProfileResponse")
    public byte[] getProfile(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws AuthorizationDeniedException_Exception, EjbcaException_Exception, UnknownProfileTypeException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws ApprovalException_Exception
     * @throws CAOfflineException_Exception
     * @throws CryptoTokenOfflineException_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws ApprovalRequestExpiredException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createCRL", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCRL")
    @ResponseWrapper(localName = "createCRLResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CreateCRLResponse")
    public void createCRL(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws ApprovalException_Exception, ApprovalRequestExpiredException_Exception, CADoesntExistsException_Exception, CAOfflineException_Exception, CryptoTokenOfflineException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLatestCRL", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLatestCRL")
    @ResponseWrapper(localName = "getLatestCRLResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLatestCRLResponse")
    public byte[] getLatestCRL(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        boolean arg1)
        throws CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     *
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLatestCRLPartition", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLatestCRLPartition")
    @ResponseWrapper(localName = "getLatestCRLPartitionResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLatestCRLPartitionResponse")
    public byte[] getLatestCRLPartition(
            @WebParam(name = "arg0", targetNamespace = "")
                    String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
                    boolean arg1,
            @WebParam(name = "arg2", targetNamespace = "")
                    int arg2)
            throws CADoesntExistsException_Exception, EjbcaException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEjbcaVersion", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetEjbcaVersion")
    @ResponseWrapper(localName = "getEjbcaVersionResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetEjbcaVersionResponse")
    public String getEjbcaVersion();

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPublisherQueueLength", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetPublisherQueueLength")
    @ResponseWrapper(localName = "getPublisherQueueLengthResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetPublisherQueueLengthResponse")
    public int getPublisherQueueLength(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws EjbcaException_Exception
    ;

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.CertificateResponse
     * @throws WaitingForApprovalException_Exception
     * @throws NotFoundException_Exception
     * @throws ApprovalException_Exception
     * @throws UserDoesntFullfillEndEntityProfile_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "certificateRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CertificateRequest")
    @ResponseWrapper(localName = "certificateRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.CertificateRequestResponse")
    public CertificateResponse certificateRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        UserDataVOWS arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, EjbcaException_Exception, NotFoundException_Exception, UserDoesntFullfillEndEntityProfile_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns org.ejbca.core.protocol.ws.client.gen.KeyStore
     * @throws WaitingForApprovalException_Exception
     * @throws NotFoundException_Exception
     * @throws ApprovalException_Exception
     * @throws UserDoesntFullfillEndEntityProfile_Exception
     * @throws CADoesntExistsException_Exception
     * @throws EjbcaException_Exception
     * @throws AuthorizationDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "softTokenRequest", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.SoftTokenRequest")
    @ResponseWrapper(localName = "softTokenRequestResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.SoftTokenRequestResponse")
    public KeyStore softTokenRequest(
        @WebParam(name = "arg0", targetNamespace = "")
        UserDataVOWS arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3)
        throws ApprovalException_Exception, AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception, NotFoundException_Exception, UserDoesntFullfillEndEntityProfile_Exception, WaitingForApprovalException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<org.ejbca.core.protocol.ws.client.gen.Certificate>
     * @throws CADoesntExistsException_Exception
     * @throws AuthorizationDeniedException_Exception
     * @throws EjbcaException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastCAChain", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLastCAChain")
    @ResponseWrapper(localName = "getLastCAChainResponse", targetNamespace = "http://ws.protocol.core.ejbca.org/", className = "org.ejbca.core.protocol.ws.client.gen.GetLastCAChainResponse")
    public List<Certificate> getLastCAChain(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AuthorizationDeniedException_Exception, CADoesntExistsException_Exception, EjbcaException_Exception
    ;

}
