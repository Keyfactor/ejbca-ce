/*************************************************************************
 *                                                                       *
 *  EJBCA Community: The OpenSource Certificate Authority                *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.ejbca.core.protocol.cmp;

import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;

import org.bouncycastle.asn1.crmf.ProofOfPossession;
import org.cesecore.certificates.certificate.request.RequestMessage;


/**
 * The {link IRequestMessage} parameter must implement this to when calling {@link CrmfRequestMessage#createResponseMessage(Class, IRequestMessage, java.security.cert.Certificate, java.security.PrivateKey, String)}
 */
public interface ICrmfRequestMessage extends RequestMessage {

    // pbe parameters
	int getPbeIterationCount();

	String getPbeDigestAlg();

	String getPbeMacAlg();

	String getPbeKeyId();

	String getPbeKey();

    // pbmac1 parameters
	default String getPbmac1PrfAlg() {
        return null;
    }

	default String getPbmac1Key() {
        return null;
    }

	default String getPbmac1KeyId() {
        return null;
    }

	default String getPbmac1MacAlg() {
        return null;
    }

	default int getPbmac1IterationCount() {
        return 0;
    }

	default int getPbmac1DkLen() {
        return 0;
    }

	/**
	 * RFC4210 section 5.1.1.1
	 * @return true if the implicitConfirm OID is included in the request PKIHeader.generalInfo
	 */
	boolean isImplicitConfirm();

	/**
	 * Returns the protocolEncrKey, as sent by the client to encrypt server generated private keys with
	 * @return PublicKey to be used to encrypt a private key set by {@link #setServerGenKeyPair(KeyPair)}
	 */
    default PublicKey getProtocolEncrKey() throws InvalidKeyException, NoSuchAlgorithmException, NoSuchProviderException {
        return null;
    }

    /**
     * Sets a key pair generated by the CA, in case the client request such keys (protocol dependent).
     * @param serverGenKeyPair a KeyPair with a private and public key generated by the CA, where the private key is to be returned to the client in the response
     */
    default void setServerGenKeyPair(KeyPair serverGenKeyPair) {
    }

    /**
     * @return The server generated key pair set with {@link #setServerGenKeyPair(KeyPair)}
     */
    default KeyPair getServerGenKeyPair() {
        return null;
    }

    /**
     * @return The proof-of-possession sent by the client, can be a real POP signature, or an encryption request (encrCert), or raVerified
     */
    default ProofOfPossession getPOP() {
        return null;
    }

    /** The CMP protocol version, CMP version. RFC4210 - cmp2000(2), RFC9480 - cmp2021(3)
     * @return integer value, normally 2 (PKIHeader.CMP_2000), but 3 (PKIHeader.CMP_2021) for RFC9480 specifics
     */
    int getPvno();

}
