/*************************************************************************
 *                                                                       *
 *  EJBCA - Proprietary Modules: Enterprise Certificate Authority        *
 *                                                                       *
 *  Copyright (c), PrimeKey Solutions AB. All rights reserved.           *
 *  The use of the Proprietary Modules are subject to specific           * 
 *  commercial license terms.                                            *
 *                                                                       *
 *************************************************************************/
package org.cesecore.azure;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;

import org.apache.commons.io.IOUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

/**
 * I get bearer tokens for Azure access using the client ID and a secret value
 * (which should be generated by Azure under "Azure Active Directory/App
 * registrations/<client ID>/Certificates & Secrets"
 */
public class AzureClientAndSecretAuthenticator extends AzureAuthenticator {
    Logger logger = Logger.getLogger(getClass());

    final private String tenantID;
    final private String clientID;
    final private String clientSecret;
    final private HttpClientWithProxySupport client;

    public AzureClientAndSecretAuthenticator(String azureLoginUrl, String tenantID, String clientID, String clientSecret,
            HttpClientWithProxySupport client) {
        super(azureLoginUrl);
        this.tenantID = tenantID;
        this.clientID = clientID;
        this.clientSecret = clientSecret;
        this.client = client;
    }

    /**
     * Get a "service" style bearer token for "resource".  This returns a bearer token with 
     * ("openid", "profile", "offline_access" and resource) scopes.  For MSAL, resource should probably end
     * in "/.default", for reasons explained here: 
     * <a href="https://dev.to/425show/just-what-is-the-default-scope-in-the-microsoft-identity-platform-azure-ad-2o4d">
     * Just what *is* the /.default scope in the Microsoft identity platform & Azure AD?</a>
     */
    @Override
    public BearerToken getBearerTokenForResource(String resource) throws IOException, AzureException {
        String[] scopes = new String[] { resource, "openid", "profile", "offline_access" };

        final String oauthUrl = getAzureLoginUrl() + tenantID + "/oauth2/v2.0/token";
        if (logger.isDebugEnabled()) {
            logger.debug("Retrieving bearer token from:" + oauthUrl + " for tenant " + tenantID + " client " + clientID + " using a secret.  Scopes: "
                    + Arrays.toString(scopes));
        }

        try (CloseableHttpClient httpClient = client.getClient()) {
            final HttpPost request = client.getPost(oauthUrl);

            final ArrayList<NameValuePair> parameters = new ArrayList<>();
            parameters.add(new BasicNameValuePair("grant_type", "client_credentials"));
            parameters.add(new BasicNameValuePair("client_id", clientID));
            parameters.add(new BasicNameValuePair("client_secret", clientSecret));
            parameters.add(new BasicNameValuePair("scope", String.join(" ", scopes)));
            request.setEntity(new UrlEncodedFormEntity(parameters));
            try (CloseableHttpResponse response = httpClient.execute(request); InputStream content = response.getEntity().getContent()) {
                logger.debug(response.getStatusLine());
                if (response.getStatusLine().getStatusCode() < 200 || response.getStatusLine().getStatusCode() >= 300) {
                    String message = "Error getting bearer token from " + oauthUrl + ".  " + response.getStatusLine().getReasonPhrase();
                    logger.error(message);
                    if (content != null && logger.isDebugEnabled()) {
                        logger.debug(IOUtils.toString(content, StandardCharsets.UTF_8));
                    }
                    throw new AzureException(message);
                }

                JSONObject parsed = (JSONObject) JSONValue.parse(new InputStreamReader(content));
                String accessToken = (String) parsed.get("access_token");
                Long expiresIn = (Long) parsed.get("expires_in");
                return new BearerToken(accessToken, Instant.now().plusSeconds(expiresIn));
            }
        }
    }

    @Override
    public String toString() {
        return "AzureClientAndSecretAuthenticator [tenantID=" + tenantID + ", clientID=" + clientID + ", client=" + client + "]";
    }

}