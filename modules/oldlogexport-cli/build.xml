<?xml version="1.0" encoding="UTF-8"?>
<project name="oldlogexport-cli" default="build">
    <description>
		A CLI for exporting LogEntryData database table to file.
    </description>

	<dirname property="oldlogexport-cli.dir" file="${ant.file.oldlogexport-cli}"/>

    <import file="${oldlogexport-cli.dir}/../build-helpers.xml"/>
	
	<property name="oldlogexport-cli.src.dir" location="${oldlogexport-cli.dir}/src"/>
	<property name="oldlogexport-cli.build.dir" location="${oldlogexport-cli.dir}/build"/>

	<path id="oldlogexport.lib.classpath">
		<path refid="lib.jpa.classpath"/>
		<path refid="lib.log4j.classpath"/>
		<path refid="lib.commons-collections.classpath"/>
		<path refid="lib.commons-lang.classpath"/>
		<path refid="lib.commons-logging.classpath"/>
		<path refid="lib.commons-config.classpath"/>
		<path refid="lib.bouncycastle-provonly.classpath"/>
		<path refid="lib.cert-cvc.classpath"/>
		<path refid="lib.ldap.classpath"/>
                <path location="${mod.cesecore-entity.lib}"/>
                <path location="${mod.cesecore-common.lib}"/>
	</path>

    <target name="build" description="Build this module" depends="compile">
    	<pathconvert property="oldlogexport.dependencies" pathsep=" ">
    	    <path>
	        	<fileset dir="${mod.oldlogexport.dist}" includes="lib/*.jar"/>
    	    </path>
    		<map from="${mod.oldlogexport.dist}/" to=""/>
    	</pathconvert>
        <jar jarfile="${mod.oldlogexport.lib}">
    		<manifest >
    			<attribute name="Class-path" value="${oldlogexport.dependencies} ./" />
    			<attribute name="Main-Class" value="org.ejbca.ui.cli.OldLogExportCli"/>
    		</manifest>
            <fileset dir="${oldlogexport-cli.build.dir}"/>
        </jar>
    </target>

    <target name="clean" description="Clean up this module">
		<delete dir="${oldlogexport-cli.build.dir}" />
		<delete dir="${mod.oldlogexport.dist}" />
    </target>
	
    <target name="compile" depends="setup, with.clover">
    	<mkdir dir="${oldlogexport-cli.build.dir}" />
        <javac destdir="${oldlogexport-cli.build.dir}" debug="on" includeantruntime="no" encoding="utf-8" target="${java.target.version}" classpathref="oldlogexport.lib.classpath">
            <src path="${ejbca.home}/modules/ejbca-ejb/src" />
        	<src path="${oldlogexport-cli.src.dir}"/>
            <include name="org/ejbca/ui/cli/OldLogExportCli.java" />
        </javac>
    </target>

    <target name="setup">
    	<mkdir dir="${mod.oldlogexport.dist}/META-INF"/>
    	<!-- Copy all the files in the clientToolBox.lib.classpath to mod.clientToolBox.dist/lib -->
    	<pathconvert property="lib.oldlogexport.classpath.property" pathsep=" ">
    	    <path refid="oldlogexport.lib.classpath" />
    		<map from="${ejbca.home}/" to=""/>
    	</pathconvert>
    	<copy todir="${mod.oldlogexport.dist}/lib" flatten="true">
    		<fileset dir="${ejbca.home}" includes="${lib.oldlogexport.classpath.property}"/>
    	</copy>
    	<!-- Copy scripts etc to mod.clientToolBox.dist -->
        <copy todir="${mod.oldlogexport.dist}" file="${oldlogexport-cli.dir}/resources/README"/>
        <copy todir="${oldlogexport-cli.build.dir}">
            <fileset dir="${oldlogexport-cli.dir}/resources" includes="log4j.xml META-INF/*.*"/>
        </copy>
    	<!-- Specify Hibernate dialect -->
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.DB2Dialect"><equals arg1="${database.name}" arg2="db2"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect"><equals arg1="${database.name}" arg2="derby"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"><equals arg1="${database.name}" arg2="hsqldb"/></condition>
        <condition property="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"><equals arg1="${database.name}" arg2="h2"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.InformixDialect"><equals arg1="${database.name}" arg2="informix"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.IngresDialect"><equals arg1="${database.name}" arg2="ingres"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.SQLServer2008Dialect"><equals arg1="${database.name}" arg2="mssql"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"><equals arg1="${database.name}" arg2="mysql"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"><equals arg1="${database.name}" arg2="oracle"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"><equals arg1="${database.name}" arg2="postgres"/></condition>
    	<condition property="hibernate.dialect" value="org.hibernate.dialect.SybaseDialect"><equals arg1="${database.name}" arg2="sybase"/></condition>
    	<fail unless="hibernate.dialect" message="Unsupported database type '${database.name}'."/>
        <copy tofile="${mod.oldlogexport.dist}/META-INF/persistence.xml" file="${oldlogexport-cli.dir}/resources/persistence-template.xml" failonerror="true" overwrite="true">
        	<filterchain><expandproperties/></filterchain>
        </copy>
    </target>

</project>
