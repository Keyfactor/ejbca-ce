/*************************************************************************
 *                                                                       *
 *  EJBCA Community: The OpenSource Certificate Authority                *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.ejbca.ui.web.admin.endentityprofiles;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;


import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;

import javax.faces.context.FacesContext;

import javax.faces.model.SelectItem;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.cesecore.authorization.AuthorizationSessionLocal;

import org.cesecore.certificates.crl.RevocationReasons;

import org.cesecore.certificates.endentity.EndEntityConstants;
import org.cesecore.certificates.util.DnComponents;
import org.ejbca.core.ejb.ra.raadmin.EndEntityProfileSessionLocal;

import org.ejbca.core.model.authorization.AccessRulesConstants;
import org.ejbca.core.model.hardtoken.HardTokenIssuerInformation;
import org.ejbca.core.model.ra.raadmin.EndEntityProfile;

import org.ejbca.core.model.ra.raadmin.UserNotification;
import org.ejbca.core.model.ra.raadmin.validators.RegexFieldValidator;

import org.ejbca.ui.web.admin.BaseManagedBean;
import org.ejbca.ui.web.admin.cainterface.CAInterfaceBean;

import org.ejbca.ui.web.admin.configuration.EjbcaWebBean;

import org.ejbca.ui.web.admin.hardtokeninterface.HardTokenInterfaceBean;
import org.ejbca.ui.web.admin.rainterface.RAInterfaceBean;
import org.ejbca.ui.web.admin.rainterface.ViewEndEntityHelper;
/**
 * 
 * JSF MBean backing end entity profile page.
 *
 * @version $Id$
 */
@ManagedBean
@RequestScoped
public class EndEntityProfileMBean extends BaseManagedBean implements Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(EndEntityProfileMBean.class);

    @EJB
    private AuthorizationSessionLocal authorizationSession;
    @EJB
    private EndEntityProfileSessionLocal endEntityProfileSession;
    
    static final String CHECKBOX_VALUE = EndEntityProfile.TRUE; 
    
    
    private EndEntityProfilesMBean endEntityProfilesMBean;
    private EjbcaWebBean ejbcaWebBean = getEjbcaWebBean();
    private CAInterfaceBean caBean = new CAInterfaceBean();
    private RAInterfaceBean raBean = new RAInterfaceBean();
    private HardTokenInterfaceBean tokenBean = new HardTokenInterfaceBean();
    private EndEntityProfile profiledata;
    
    //POST CONSTRUCT
    @PostConstruct
    private void postConstruct() throws Exception {
        final HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
        ejbcaWebBean.initialize(req, AccessRulesConstants.REGULAR_VIEWENDENTITYPROFILES);
        caBean.initialize(ejbcaWebBean);
        raBean.initialize(req, ejbcaWebBean);
        tokenBean.initialize(req, ejbcaWebBean);
        int profileId = endEntityProfilesMBean.getSelectedEndEntityProfileId().intValue();
        profiledata = endEntityProfileSession.getEndEntityProfile(profileId);
    }
   
    
    public boolean isAuthorizedToEdit() {
        return authorizationSession.isAuthorizedNoLogging(getAdmin(), AccessRulesConstants.REGULAR_EDITENDENTITYPROFILES);
    }
    
    public boolean isAuthorizedToView() {
        return authorizationSession.isAuthorizedNoLogging(getAdmin(), AccessRulesConstants.REGULAR_VIEWENDENTITYPROFILES);
    }
        
    public EndEntityProfilesMBean getEndEntityProfilesMBean() { 
        return endEntityProfilesMBean; 
    }
        
    public void setEndEntityProfilesMBean(EndEntityProfilesMBean endEntityProfilesMBean) { 
        this.endEntityProfilesMBean = endEntityProfilesMBean; 
    } 
    
    public String getAutoGeneratedPasswordType() {
        return profiledata.getAutoGeneratedPasswdType();
    }
      
    public EndEntityProfile getEndEntityProfile() {
        return profiledata;
    }
    
    public void setEndEntityProfile(EndEntityProfile profile) {
        profiledata = profile;
    }
    
    public String getSelectedEndEntityProfileName() {
        return endEntityProfilesMBean.getSelectedEndEntityProfileName();
    }
    
    // use??
    public boolean isViewOnly() {
        return endEntityProfilesMBean.isViewOnly();
    }
        
    public Integer getSelectedEndEntityProfileId() {
        return endEntityProfilesMBean.getSelectedEndEntityProfileId();
    }
    
    public EndEntityProfile getProfiledata() {
       return profiledata;
    }
    
   // PASSWORD, USERNAME AND EMAIL
   
   // Verify this and create setter in profiledata
   public void setUseAutoGeneratedUserName(boolean bool) {
       profiledata.setModifyable(EndEntityProfile.USERNAME, 0, bool);
   }
   
   // create getter in profile
   public String getPassword() {
       return profiledata.getValue(EndEntityProfile.PASSWORD,0);
       //return profiledata.getPassword().toString();
   }
   
   // verify toString, move setter to profiledata
   public void setPassword(String pwd) {
       profiledata.setValue(EndEntityProfile.PASSWORD, 0, pwd);
   }
   
   //
   public boolean getPasswordRequired() {
       return profiledata.isPasswordRequired();
   }
   
   // verify this one and create setter in profile
   public void setPasswordRequired(boolean bool) {
       profiledata.setRequired(EndEntityProfile.PASSWORD, 0, bool);
   }
      
   // move to profiledata...
   
   public boolean isAutoGeneratedPassword() {
       return !profiledata.getUse(EndEntityProfile.PASSWORD,0);
   }
   
   // move to profiledata...
   public void setAutoGeneratedPassword(boolean bool) {
       if (bool) {
           setPasswordRequired(false);
           profiledata.setUse(EndEntityProfile.PASSWORD,0, false);
       } else {
           profiledata.setUse(EndEntityProfile.PASSWORD,0, true);
       }
   }
   
   /*public void toggleUseAutoGeneratedPassword() throws IOException {
       profiledata.setUse(EndEntityProfile.PASSWORD,0,(!profiledata.getUse(EndEntityProfile.PASSWORD,0)));
     }*/
   
   // verify this one
   public boolean isCurrentPasswordType(String pwdType) {
       return pwdType.equals(profiledata.getAutoGeneratedPasswdType());
   }
   
   //
   public String getCurrentPasswordType() {
       return profiledata.getAutoGeneratedPasswdType();
   }
   
   //
   public void setCurrentPasswordType(String pwdType) {
       profiledata.setValue(EndEntityProfile.AUTOGENPASSWORDTYPE, 0, pwdType);
   }
   
   //
   public List<SelectItem> getPasswordTypes() {
       final List<SelectItem> pwdTypesReturned = new ArrayList<>();
       String passwordType;
       String passwordTypeReadable;
       Iterator<String> iterator = EndEntityProfile.getAvailablePasswordTypes().iterator();
       while(iterator.hasNext()) {
           passwordType = (String) iterator.next();
           passwordTypeReadable = ejbcaWebBean.getText(passwordType);
           pwdTypesReturned.add(new SelectItem(passwordType, passwordTypeReadable));
       }
       return pwdTypesReturned;
   }
   
   //
   public List<SelectItem> getPasswordLen(){
       final List<SelectItem> pwdLenListReturned = new ArrayList<>();
       Integer len;
       for (len = 4; len<17; len++) {
           pwdLenListReturned.add(new SelectItem(len.toString() , len.toString()));
       }
       return pwdLenListReturned;
   }
   
   // verify if len or strength
   public void setCurrentPasswordLen(String len) {
       Integer i = new Integer(len);
       profiledata.setMinPwdStrength(i.intValue());
   }
   
   // verify
   public String getCurrentPasswordLen() {
      Integer i = 4;
      String str;
      i = profiledata.getMinPwdStrength();
      str = i.toString();
      return str;
   }
   
   // verify strength or len
   public int getMinPwdStrength() {
       return profiledata.getMinPwdStrength();
   }
   
   //
   public boolean isUseMaxFailLogins(){
       return profiledata.getMaxFailedLoginsUsed();
   }
   
   //move to profiledata
   public void setUseMaxFailLogins(boolean bool) {
       profiledata.setUse(EndEntityProfile.MAXFAILEDLOGINS, 0, bool);
   }
   
   //
   public boolean isFailedLoginsModifyable() {
       return profiledata.isModifyable(EndEntityProfile.MAXFAILEDLOGINS, 0);
   }
   
  //
   public void setFailedLoginsModifyable(boolean bool) {
       profiledata.setModifyable(EndEntityProfile.MAXFAILEDLOGINS, 0, bool);
   }
   
   //
   public String getMaxFailedLogins() {
       String maxString = profiledata.getValue(EndEntityProfile.MAXFAILEDLOGINS, 0);
       if ( maxString.equals("-1")) {
           return "";
       }
       return  maxString;
   }
   
   //
   public void setMaxFailedLogins(String max) {
       profiledata.setValue(EndEntityProfile.MAXFAILEDLOGINS, 0, max);
   }
   
   public boolean isMaxFailLoginsUnlimited() {
       return profiledata.getValue(EndEntityProfile.MAXFAILEDLOGINS, 0).equals("-1");
   }
   
   public void setMaxFailLoginsUnlimited(boolean bool) {
       if (bool) {
           profiledata.setValue(EndEntityProfile.MAXFAILEDLOGINS, 0, "-1");
       }else {
           profiledata.setValue(EndEntityProfile.MAXFAILEDLOGINS, 0, "");
       }
   }
   
   //
   public boolean isBatchGenerationUse() {
       return profiledata.getUse(EndEntityProfile.CLEARTEXTPASSWORD,0);
   }
   
   public void setBatchGenerationUse(boolean use) {
       profiledata.setUse(EndEntityProfile.CLEARTEXTPASSWORD, 0, use);
   }
   
   //
   public boolean isBatchGenerationDefault() {
       return profiledata.getValue(EndEntityProfile.CLEARTEXTPASSWORD,0).equals(EndEntityProfile.TRUE) && isBatchGenerationUse();
   }
   
   //
   public boolean isBatchGenerationRequired() {
       return profiledata.isRequired(EndEntityProfile.CLEARTEXTPASSWORD,0) && isBatchGenerationUse();
   }
   
   //
   public boolean isUseEmail() {
       return profiledata.getUse(EndEntityProfile.EMAIL,0);
   }
   
   //
   public void setUseEmail(boolean use) {
       profiledata.setUse(EndEntityProfile.EMAIL,0, use);
   }
   
   // ugly... btw, use getEmail() OR emailDomain... 
   public String getEmail() {
       String str = "";
       if (profiledata.getValue(EndEntityProfile.EMAIL,0) != null && isUseEmail()) {
           str = profiledata.getValue(EndEntityProfile.EMAIL,0);
       }
       return str;
   }
   
   //
   public boolean isEmailRequired(){
       return profiledata.getEmailDomainRequired();
   }
   
   //
   public void setEmailRequired(boolean bool){
       profiledata.setRequired(EndEntityProfile.EMAIL, 0, bool);
   }
   
   //
   public boolean isEmailModifyable(){
       return profiledata.getEmailDomainModifiable();
   }
   
   //
   public void setEmailModifyable(boolean bool){
       profiledata.setModifyable(EndEntityProfile.EMAIL, 0, bool);
   }
   
   // DIRECTIVES
   
   //
   public boolean isUseReverseFieldChecks() {
       return profiledata.getReverseFieldChecks();
   }
   
   //
   public void setUseReverseFieldChecks(boolean reverse) {
       profiledata.setReverseFieldChecks(reverse);
   }
   
   //
   public boolean isAllowMergeDNWebServices() {
       return profiledata.getAllowMergeDnWebServices();
   }
   
   //
   public void setAllowMergeDNWebServices(boolean merge) {
       profiledata.setAllowMergeDnWebServices(merge);
   }
   
   // SUBJECT DN ATTRIBUTES
   
   //
   public List<SelectItem> getSubjectDNAttributes() {
       final List<SelectItem> attributesReturned = new ArrayList<>();
       String attributeNr;
       String attribute;
       String attributeReturned;
       String[] attributeString = EndEntityProfile.getSubjectDNProfileFields();
       Integer stringElement;
       for(stringElement = 0; stringElement < attributeString.length; stringElement++) {
           attributeNr = stringElement.toString();
           attribute = attributeString[stringElement.intValue()];
           attributeReturned = ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileName(attribute));
           
           attributesReturned.add(new SelectItem(attributeReturned, attributeReturned ));
       }
       //To get the correct value in selectItem, check this?
       /*public static String[] getSubjectDNProfileFields() {
           return DnComponents.getDnProfileFields().toArray(new String[0]);
       }*/
     
       //From DnComponents class: getDnProfileFields() has this:  dnProfileFields.add(profilename) ... where profilename is from:
       //loadProfileMappingsFromFile(String propertiesFile) ... check what is in propertiesFile...?
       //loadProfileMappingsFromFile("/profilemappings_enterprise.properties").. so where is this .properties?
       
       /** returns two int : the first is the DN field which is a constant in DN field extractor,
        * the second is in which order the attribute is, 0 is first OU and 1 can mean second OU (if OU is specified in the first value).
        * 
        */
       //public int[] getSubjectDNFieldsInOrder(final int index) {
       //int[] fielddata = null;
       //fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       //if(!EndEntityProfile.isFieldOfType(fielddata[EndEntityProfile.FIELDTYPE], DnComponents.DNEMAILADDRESS) ){ %>
       return attributesReturned;
   }
   
   // doesn't return anything of value yet
   public String getCurrentSubjectDNAttribute() { 
       return currentAttribute;
   }
   
   public void setCurrentSubjectDNAttribute(String attribute) {
        currentAttribute = attribute;
   }
   
   //testing...
   //doesn't set value yet
   private String currentAttribute;
   private String value;
   private String addedAttribute;
   private boolean added = false;
   
   public String addSubjectDNAttribute(){
       //value = new String(currentAttribute);
       /*profiledata.addField(DnComponents.COUNTRYOFRESIDENCE);
       profiledata.setValue(DnComponents.COUNTRYOFRESIDENCE,0,"");
       profiledata.setRequired(DnComponents.COUNTRYOFRESIDENCE,0,false);
       profiledata.setUse(DnComponents.COUNTRYOFRESIDENCE,0,true);
       profiledata.setModifyable(DnComponents.COUNTRYOFRESIDENCE,0,true);*/
       /*profiledata.addField(value);
       profiledata.setValue(value,0,"");
       profiledata.setRequired(value,0,false);
       profiledata.setUse(value,0,true);
       profiledata.setModifyable(value,0,true);*/
       
       addedAttribute = new String(currentAttribute); // I need to fetch the value from the selected component here instead...
       subjectDnAdditions.add(addedAttribute);
       added = true;
       return "";
   }
   
   //but all components should be returned
   //Using a saved list of additions that is appended to existing components is temporary solution 
   private List<String> subjectDnAdditions = new ArrayList<String>();;
   
   public List<String> getSubjectDnComponent() {
       List<String> components = new ArrayList<String>();
       List<int[]> fielddatalist = new ArrayList<int[]>();
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddatalist.add(profiledata.getSubjectDNFieldsInOrder(i));
       }
       Iterator<int[]> iterator = fielddatalist.iterator();
       while (iterator.hasNext()) {
           int[] temp;
           temp = iterator.next();
           components.add(ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileId(temp[EndEntityProfile.FIELDTYPE])));
       } 
       if (added) {
           Iterator<String> addedAttributeIterator = subjectDnAdditions.iterator();
           while(addedAttributeIterator.hasNext()) {
               components.add(addedAttributeIterator.next());
           }
       }
       return components;
   }
   
   // but only last is returned and only if it has a value
   public String getSubjectDNAttributeValue() {
       String value = "NO VALUE IN THE LAST FIELD RETURNED";//REMOVE...
       int [] fielddata = null;
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       if(profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]) != null) {
           value = profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
       }
       return value;
   }
   
   //dummy method that only sets value of first field
   public void setSubjectDNAttributeValue(String subjectDnAttributeValue) {
       int currentAttributeField = 0;
       int [] fielddata = null;
       fielddata =  profiledata.getSubjectDNFieldsInOrder(currentAttributeField);
       profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER], subjectDnAttributeValue);
   }
   
   //useless; returns the last sdn field always!!!
   public boolean isSubjectDNAttributeRequired(){
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       return profiledata.isRequired(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   //only returns the last attribute field, should be dynamic; see currentAttribute or similar...
   public boolean isSubjectDNAttributeModifyable(){
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       return profiledata.isModifyable(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
      }
   
   public void setSubjectDNAttributeModifyable(boolean changeable) {
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER], changeable);//wrong fielddata!!
   }
   
   //... only returns the last fielddata
   public boolean isSubjectDNAttributeValidation() {
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       return null != profiledata.getValidation(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   //
   public LinkedHashMap<String, Serializable> getSubjectDNAttributeValidationString() {
       int numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
       int [] fielddata = null;
       LinkedHashMap<String, Serializable> validation = null;
       for(int i=0; i < numberofsubjectdnfields; i++){
           fielddata =  profiledata.getSubjectDNFieldsInOrder(i);
       }
       validation = profiledata.getValidation(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
       return validation;
   }
   
   // ...
   public String getValidationRegEx() {
       String validationRegex = "";
       if (isSubjectDNAttributeValidation()) validationRegex = (String)getSubjectDNAttributeValidationString().get(RegexFieldValidator.class.getName());
       return validationRegex;
   }
   
   // OTHER SUBJECT ATTRIBUTES
   
   //
   public List<SelectItem> getSubjectAltNameTypes(){
       final List<SelectItem> subjectAltNamesReturned = new ArrayList<>();
       String subjectAltNameNr;
       String subjectAltName;
       String subjectAltNameReturned;
       String[] attributeString = EndEntityProfile.getSubjectAltnameProfileFields();
       Integer stringElement;
       for(stringElement = 0; stringElement < attributeString.length; stringElement++) {
           subjectAltNameNr = stringElement.toString();
           subjectAltName = attributeString[stringElement.intValue()];
           if (EndEntityProfile.isFieldImplemented(subjectAltName)) {
               subjectAltNameReturned = ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileName(subjectAltName));
               subjectAltNamesReturned.add(new SelectItem(subjectAltNameNr, subjectAltNameReturned ));
           }
       }
       return subjectAltNamesReturned;
   }
   
   // just temp value atm
   public String getCurrentSubjectAltNameType() { 
       return "PLACEHOLDER";
   }
   
   // just temp value atm
   public void setCurrentSubjectAltNameType(String san) {
       String TEMPattribute = san ;
       TEMPattribute = TEMPattribute + "";
   }
   
   //
   public List<String> getSubjectAltNameComponent() {
       List<String> components = new ArrayList<String>();
       List<int[]> fielddatalist = new ArrayList<int[]>();
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddatalist.add(profiledata.getSubjectAltNameFieldsInOrder(i));
       }
       Iterator<int[]> iterator = fielddatalist.iterator();
       while (iterator.hasNext()) {
           int[] temp;
           temp = iterator.next();
           components.add(ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileId(temp[EndEntityProfile.FIELDTYPE]))); 
       }
       return components;
   }
     
   // only last is returned 
   public String getSubjectAltNameValue() {
       int [] fielddata = null;
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       if(profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]) != null) {
           value = profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
       }
       return value;
   }
   
   //only sets the last subject alt name field to given value, need to keep track of current field 
   public void setSubjectAltNameValue(String value) {
       int [] fielddata = null;
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER], value);
   }
     
   // only returns the last attribute value
   public boolean isSubjectAltNameRequired() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       return profiledata.isRequired(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   // but only returns the last attribute value
   public boolean isSubjectAltNameModifyable() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       return profiledata.isModifyable(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   // sets the last field only, need to keep track of current field
   public void setSubjectAltNameModifyable(boolean changeable) {
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER], changeable);//Sets the last field, change!!
   }
   
   // but only returns the last attribute value
   public boolean isSubjectAltNameValidation() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       return null != profiledata.getValidation(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   //..
   public LinkedHashMap<String, Serializable> getSubjectAltNameValidationString() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectAltNameFieldOrderLength();
       int [] fielddata = null;
       LinkedHashMap<String, Serializable> validation = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectAltNameFieldsInOrder(i);
       }
       validation = profiledata.getValidation(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
       return validation;
   }
   
   //...
   public String getSubjectAltNameValidationRegEx() {
       String validationRegex = "";
       if (isSubjectAltNameValidation()) validationRegex = (String)getSubjectAltNameValidationString().get(RegexFieldValidator.class.getName());
       return validationRegex;
   }
   
   //
   public List<SelectItem> getSubjectDirectoryAttributes(){
       final List<SelectItem> subjectDirectoryAttributesReturned = new ArrayList<>();
       String subjectDirectoryAttributeNr;
       String subjectDirectoryAttribute;
       String subjectDirectoryAttributeReturned;
       String[] attributeString = EndEntityProfile.getSubjectDirAttrProfileFields();
       Integer stringElement;
       for(stringElement = 0; stringElement < attributeString.length; stringElement++) {
           subjectDirectoryAttributeNr = stringElement.toString();
           subjectDirectoryAttribute = attributeString[stringElement.intValue()];
           subjectDirectoryAttributeReturned = ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileName(subjectDirectoryAttribute));
           /*if (EndEntityProfile.isFieldImplemented(subjectAltName)) {
               setCurrentSubjectAltNameTypes(subjectAltName);
           } */   
           subjectDirectoryAttributesReturned.add(new SelectItem(subjectDirectoryAttributeNr, subjectDirectoryAttributeReturned ));
       }
       return subjectDirectoryAttributesReturned;
   }
   
   // temp
   public String getCurrentSubjectDirectoryAttribute() {
       return "TEMPVALUE";
   }
   
   // temp...
   public void setCurrentSubjectDirectoryAttribute(String sda) { 
       String TEMPattribute = sda ;
       TEMPattribute = TEMPattribute + "";
   }
   
   // ...
   public String getSubjectDirectoryAttributeValue() {
       String value = "";
       int [] fielddata = null;
       int numberOfSubjectDirectoryAttributeFields = profiledata.getSubjectDirAttrFieldOrderLength();
       for(int i=0; i < numberOfSubjectDirectoryAttributeFields; i++){
           fielddata =  profiledata.getSubjectDirAttrFieldsInOrder(i);
       }
       if(profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]) != null) {
           value = profiledata.getValue(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
       }
       return value;
   }
   
   //
   public List<String> getSubjectDirectoryAttributeComponent() {
       List<String> components = new ArrayList<String>();
       List<int[]> fielddatalist = new ArrayList<int[]>();
       int numberOfSubjectDirectoryAttributeFields = profiledata.getSubjectDirAttrFieldOrderLength();
       for(int i=0; i < numberOfSubjectDirectoryAttributeFields; i++){
           fielddatalist.add(profiledata.getSubjectDirAttrFieldsInOrder(i));
       }
       Iterator<int[]> iterator = fielddatalist.iterator();
       while (iterator.hasNext()) {
           int[] temp;
           temp = iterator.next();
           components.add(ejbcaWebBean.getText(DnComponents.getLanguageConstantFromProfileId(temp[EndEntityProfile.FIELDTYPE]))); 
       }
       return components;
   }
   
   // but only returns the last attribute value
   public boolean isSubjectDirectoryAttributeRequired() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectDirAttrFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectDirAttrFieldsInOrder(i);
       }
       return profiledata.isRequired(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   // only returns the last attribute value
   public boolean isSubjectDirectoryAttributeModifyable() {
       int numberOfSubjectAltNameFields = profiledata.getSubjectDirAttrFieldOrderLength();
       int [] fielddata = null;
       for(int i=0; i < numberOfSubjectAltNameFields; i++){
           fielddata =  profiledata.getSubjectDirAttrFieldsInOrder(i);
       }
       return profiledata.isModifyable(fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER]);
   }
   
   // MAIN CERTIFICATE DATA
   
   //
   public List<SelectItem> getDefaultCertProfiles(){
       final List<SelectItem> defaultCertProfilesReturned = new ArrayList<>();
       String defaultCertProfile;
       TreeMap<String, Integer> eecertificateprofilenames = ejbcaWebBean.getAuthorizedEndEntityCertificateProfileNames();
       TreeMap<String, Integer> subcacertificateprofilenames = ejbcaWebBean.getAuthorizedSubCACertificateProfileNames();
       TreeMap<String, Integer> mergedMap = new TreeMap<String, Integer>();
       mergedMap.putAll(eecertificateprofilenames);
       mergedMap.putAll(subcacertificateprofilenames);
       Iterator<String> iterator = mergedMap.keySet().iterator();
       while(iterator.hasNext()) {
           defaultCertProfile = iterator.next();
           int certprofid = ((Integer) mergedMap.get(defaultCertProfile)).intValue();
           //defaultCertProfilesReturned.add(new SelectItem(certprofid, defaultCertProfile));
           defaultCertProfilesReturned.add(new SelectItem(defaultCertProfile, defaultCertProfile));// will need the ID, not the name, in the future
       }
       return defaultCertProfilesReturned;
   }
       
   //... fix and clean up...  
   public String getCurrentDefaultCertProfile() { 
       int certProfile = profiledata.getDefaultCertificateProfile();
       String defaultCertProfile;
       String retValue = "TEST";
       TreeMap<String, Integer> eecertificateprofilenames = ejbcaWebBean.getAuthorizedEndEntityCertificateProfileNames();//should probably b declared elsewhere
       TreeMap<String, Integer> subcacertificateprofilenames = ejbcaWebBean.getAuthorizedSubCACertificateProfileNames();//should probably b declared elsewhere
       TreeMap<String, Integer> mergedMap = new TreeMap<String, Integer>();
       mergedMap.putAll(eecertificateprofilenames);
       mergedMap.putAll(subcacertificateprofilenames);
       Iterator<String> iterator = mergedMap.keySet().iterator();
       while(iterator.hasNext()) {
           defaultCertProfile = iterator.next();
           int certprofid = ((Integer) mergedMap.get(defaultCertProfile)).intValue();
           if (certprofid == certProfile) {
               retValue = defaultCertProfile;
           }
       }
       return retValue;
   }
   
   // some value...
   public void setCurrentDefaultCertProfile(String dcp) { 
       TreeMap<String, Integer> eecertificateprofilenames = ejbcaWebBean.getAuthorizedEndEntityCertificateProfileNames();//should probably b declared elsewhere
       TreeMap<String, Integer> subcacertificateprofilenames = ejbcaWebBean.getAuthorizedSubCACertificateProfileNames();//should probably b declared elsewhere
       TreeMap<String, Integer> mergedMap = new TreeMap<String, Integer>();
       mergedMap.putAll(eecertificateprofilenames);
       mergedMap.putAll(subcacertificateprofilenames);
       int certprofid = ((Integer) mergedMap.get(dcp)).intValue();
       profiledata.setDefaultCertificateProfile(certprofid);
   }
   
   //
   public List<SelectItem> getDefaultCAs(){
       final List<SelectItem> defaultCAsReturned = new ArrayList<>();
       Map<Integer, String> caidtonamemap = caBean.getCAIdToNameMap();
       List<Integer> authorizedcas = ejbcaWebBean.getAuthorizedCAIds();    
       Iterator<Integer> iterator = authorizedcas.iterator();
       Integer caid;
       iterator = authorizedcas.iterator();
       String caidvalue;
       String caname;
       while(iterator.hasNext()){
           caid = iterator.next();
           caidvalue = caid.toString();
           caname = caidtonamemap.get(caid).toString();
           defaultCAsReturned.add(new SelectItem(caidvalue, caname));
       }
       return defaultCAsReturned;
   }
   
   // verify
   public String getCurrentDefaultCA() { 
       return profiledata.getValue(EndEntityProfile.DEFAULTCA ,0);
   }
   
   // verify...
   public void setCurrentDefaultCA(String dca) {
       Integer dcaInt = new Integer(dca); 
       profiledata.setDefaultCA(dcaInt.intValue());
   }
   
   //
   public List<SelectItem> getDefaultTokens(){
       String[] tokenString = RAInterfaceBean.tokentexts;
       final List<SelectItem> defaultTokensReturned = new ArrayList<>();
       String defaultTokenNr;
       String defaultToken;
       String defaultTokenReturned = "";//remove init empty?
       Integer stringElement;
       for(stringElement = 0; stringElement < tokenString.length; stringElement++) {
           defaultTokenNr = stringElement.toString();
           defaultToken = tokenString[stringElement.intValue()];
           defaultTokenReturned = ejbcaWebBean.getText(defaultToken);
           //defaultTokensReturned.add(new SelectItem(defaultTokenNr, defaultTokenReturned ));
           defaultTokensReturned.add(new SelectItem(defaultTokenReturned, defaultTokenReturned ));
       }
       System.out.println("DEFTOKENRETURNED= " + defaultTokenReturned);//testing
       return defaultTokensReturned;
   }
   
   // verify...
   public String getCurrentDefaultToken() { 
       //int currentDefTokenId = profiledata.getDefaultTokenType();// .getValue(EndEntityProfile.DEFKEYSTORE,0);
       String currentDefTokenId = profiledata.getValue(EndEntityProfile.DEFKEYSTORE,0);
       String returnToken = "EMPTY";// remove EMPTY
       String[] tokentexts = RAInterfaceBean.tokentexts;
       int[] tokenids = RAInterfaceBean.tokenids;
       for(int i=0; i < tokentexts.length; i++){
           System.out.println("Fetched Token: " + currentDefTokenId);//testing
           System.out.println("TokenID: " + tokenids[i]);//testing
           System.out.println("TokenText: " + tokentexts[i]);//testing
           if(currentDefTokenId.equals(Integer.toString(tokenids[i])) ) {
               returnToken = ejbcaWebBean.getText(tokentexts[i]);
           }
       }
       System.out.println("CURRENTTOKENRETURNED= " + returnToken);//testing
       //return ejbcaWebBean.getText(profiledata.getValue(EndEntityProfile.DEFKEYSTORE,0));
       //return profiledata.getValue(EndEntityProfile.DEFKEYSTORE,0);
       return returnToken;
   }
   
   //...
   public void setCurrentDefaultToken(String defaultToken) {
       String token = defaultToken;
       
       profiledata.setValue(EndEntityProfile.DEFKEYSTORE,0, token);
   }
   
   //
   public boolean isHardTokenIssuerSystemConfigured() {
       return ejbcaWebBean.getGlobalConfiguration().getIssueHardwareTokens();
   }
   
   //
   public boolean isUseHardTokenIssuer() {
       return profiledata.getUse(EndEntityProfile.AVAILTOKENISSUER,0);
   }
   
   //
   public void setUseHardTokenIssuer(boolean hardTokenIssuer) {
       profiledata.setUse(EndEntityProfile.AVAILTOKENISSUER, 0,hardTokenIssuer); 
   }
   
  //
   public List<SelectItem> getHardTokenIssuers(){
       //String[] hardtokenissueraliases = new String[0];
       //int[] hardtokenissuerids = new int[0];
       TreeMap<String,HardTokenIssuerInformation> tokenIssuerMap = ejbcaWebBean.getHardTokenIssuers();
       //hardtokenissueraliases = new String[tokenIssuerMap.keySet().size()];
       Iterator<String> issuerIterator = tokenIssuerMap.keySet().iterator();
       //hardtokenissuerids = new int[hardtokenissueraliases.length];
       final List<SelectItem> hardTokenIssuersReturned = new ArrayList<>();
       //String hardTokenIssuerNr;
       String hardTokenIssuer;
       //String hardTokenIssuerReturned;
       //Integer stringElement;
       //String tokenIssuerInfo;
       while (issuerIterator.hasNext()) {
           hardTokenIssuer = issuerIterator.next();
           hardTokenIssuersReturned.add(new SelectItem(hardTokenIssuer, hardTokenIssuer));
       }
       /*for(stringElement = 0; stringElement < tokenIssuerString.length; stringElement++) {
           hardTokenIssuerNr = stringElement.toString();
           hardTokenIssuer = tokenIssuerString[stringElement.intValue()];
           hardTokenIssuerReturned = ejbcaWebBean.getText(ejbcaWebBean.getText(hardTokenIssuer));
           hardTokenIssuersReturned.add(new SelectItem(hardTokenIssuerNr, hardTokenIssuerReturned ));
       }*/
       return hardTokenIssuersReturned;
   }
   
   public String getCurrentHardTokenIssuer() {
       return "";
   }
   
   public void setCurrentHardTokenIssuer(String str) {
       str = "";
   }
   
   // OTHER CERTIFICATE DATA
   
   //
   public boolean isUseCertSerialNumber() {
       //return profiledata.getCustomSerialNumberUsed();
       return profiledata.getUse(EndEntityProfile.CERTSERIALNR, 0);
   }
   
   //
   public boolean isUseCertValidityStartTime() {
       return profiledata.getValidityStartTimeUsed();
   }
   
   //
   public void setUseCertValidityStartTime(boolean useValidityStartTime) {
       profiledata.setUse(EndEntityProfile.STARTTIME , 0, useValidityStartTime); 
   }
   
   //
   public String getValidityStartTime() {
       return profiledata.getValidityStartTime();
   }
   
   //
   public boolean isCertValidityStartTimeMod() {
       return profiledata.isModifyable(EndEntityProfile.STARTTIME, 0);
   }
   
   //
   public boolean isUseCertValidityEndTime() {
       return profiledata.getValidityEndTimeUsed();
   }
   
   //
   public void setUseCertValidityEndTime(boolean useValidityEndTime) {
       profiledata.setUse(EndEntityProfile.ENDTIME, 0, useValidityEndTime);;
   }
   
   //
   public String getValidityEndTime() {
       return profiledata.getValidityEndTime();
   }
   
   //
   public boolean isCertValidityEndTimeMod() {
       return profiledata.isModifyable(EndEntityProfile.ENDTIME, 0);
   }
   
   //
   public String getValidityTimeExample() {
       return  ejbcaWebBean.getText("OR").toLowerCase()
           + " "
           + ejbcaWebBean.getText("DAYS").toLowerCase()
           + ejbcaWebBean.getText("HOURS").toLowerCase()
           + ejbcaWebBean.getText("MINUTES").toLowerCase();
   }
   
   //
   public boolean isUseCardNumber() {
       return profiledata.getUse(EndEntityProfile.CARDNUMBER,0);
    }
   
   public void setUseCardNumber(boolean useCardNumber) {
       profiledata.setUse(EndEntityProfile.CARDNUMBER,0, useCardNumber);
    }
   
   //
   public boolean isCardNumberRequired() {
         return profiledata.isRequired(EndEntityProfile.CARDNUMBER,0);
   }
   
   //
   public void setCardNumberRequired(boolean cardNumberRequired) {
       profiledata.setRequired(EndEntityProfile.CARDNUMBER,0, cardNumberRequired);
   }
   
   //
   public boolean isUseNameConstraintsPermitted() {
         return profiledata.getUse(EndEntityProfile.NAMECONSTRAINTS_PERMITTED,0);
   }
   
   //
   public void setUseNameConstraintsPermitted(boolean useNameConstraintsPermitted) {
         profiledata.setUse(EndEntityProfile.NAMECONSTRAINTS_PERMITTED,0, useNameConstraintsPermitted);
   }
   
   //
   public boolean isUseNameConstraintsPermittedRequired() {
         return profiledata.isRequired(EndEntityProfile.NAMECONSTRAINTS_PERMITTED,0);
   }
   
   //
   public void setUseNameConstraintsPermittedRequired(boolean useNameConstraintsRequired ) {
         profiledata.setRequired(EndEntityProfile.NAMECONSTRAINTS_PERMITTED,0, useNameConstraintsRequired);
   }
   
   //
   public boolean isUseNameConstraintsExcluded() {
         return profiledata.getUse(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED,0);
   }
   
   //
   public void setUseNameConstraintsExcluded(boolean useNameConstraintsExcluded) {
         profiledata.setUse(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED,0, useNameConstraintsExcluded);
   }
   
   //
   public boolean isUseNameConstraintsExcludedRequired() {
         return profiledata.isRequired(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED,0);
   }
   
   //
   public void isUseNameConstraintsExcludedRequired(boolean useNameConstraintsExcludedRequired) {
         profiledata.setRequired(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED,0, useNameConstraintsExcludedRequired);
   }
   
   //
   public boolean isUseCustomCertificateExtensionData() {
         return profiledata.getUseExtensiondata();
   }
   
   //
   public void setUseCustomCertificateExtensionData(boolean useCustomCertificateExtensionData) {
         profiledata.setUseExtensiondata(useCustomCertificateExtensionData);
   }
     
   // OTHER DATA    
   
   //
   public boolean isUseNumberOfAllowedRequests() {
       return profiledata.getUse(EndEntityProfile.ALLOWEDREQUESTS, 0);
   }
   
   //
   public List<SelectItem> getNumberOfAllowedRequests() {
       final List<SelectItem> numberOfAllowedRequestsListReturned = new ArrayList<>();
       Integer numberOfRequests;
       String numberOfRequestString;
       for (numberOfRequests = 1; numberOfRequests < 6; numberOfRequests++ ) {
           numberOfRequestString = numberOfRequests.toString();
           numberOfAllowedRequestsListReturned.add(new SelectItem(numberOfRequestString, numberOfRequestString));
       }
       return numberOfAllowedRequestsListReturned;
   }
   
   //
   public String getCurrentNumberOfAllowedRequests() {
       return profiledata.getValue(EndEntityProfile.ALLOWEDREQUESTS,0);
   }
   
   // correct value?
   public void setCurrentNumberOfAllowedRequests(String nar) {
       profiledata.setValue(EndEntityProfile.ALLOWEDREQUESTS,0, nar);
   }
   
   //
   public boolean isCurrentNumberOfAllowedRequests(String nar) {
       return nar.equals(profiledata.getValue(EndEntityProfile.ALLOWEDREQUESTS,0));
   }
      
   // Key Recoverable
   
   //
   public boolean isKeyRecoverableSystemConfigured() {
       return ejbcaWebBean.getGlobalConfiguration().getEnableKeyRecovery();
   }
   
   //
   public boolean isUseKeyRecoverable() {
       return profiledata.getKeyRecoverableUsed();
   }
   
   //
   public void setUseKeyRecoverable(boolean useKeyRecoverable) {
       profiledata.setUse(EndEntityProfile.KEYRECOVERABLE,0, useKeyRecoverable );
   }
   
   //
   public boolean getKeyRecoverableDefault() {
       return profiledata.getKeyRecoverableDefault();
   }
   
   //
   public void setKeyRecoverableDefault(boolean keyRecoverableDefault) {
       if(keyRecoverableDefault) {
           profiledata.setValue(EndEntityProfile.KEYRECOVERABLE, 0, EndEntityProfile.TRUE );
       }else {
           profiledata.setValue(EndEntityProfile.KEYRECOVERABLE, 0, EndEntityProfile.FALSE );
       }
   }
   
   //
   public boolean isReuseKeyRecoveredCertificate() {
       return profiledata.getReUseKeyRecoveredCertificate();
   }
   
   //
   public void setReuseKeyRecoveredCertificate(boolean reuse) {
       profiledata.setReUseKeyRecoveredCertificate(reuse);
   }
   
   //
   public boolean isKeyRecoverableRequired() {
       return profiledata.getKeyRecoverableRequired();
   }
   
   //
   public void setKeyRecoverableRequired(boolean keyRecoverableReqired) {
       profiledata.setRequired(EndEntityProfile.KEYRECOVERABLE, 0 ,keyRecoverableReqired);
   }
   
   //
   public boolean isUseRevocationReasonAfterIssuance() {
       return profiledata.getUse(EndEntityProfile.ISSUANCEREVOCATIONREASON,0);
       //return profiledata.getIssuanceRevocationReasonUsed();
   }
   
   //
   public void setUseRevocationReasonAfterIssuance(boolean useRevocationReasonAfterIssuance) {
       profiledata.setUse(EndEntityProfile.ISSUANCEREVOCATIONREASON,0, useRevocationReasonAfterIssuance);
   }
   
   //
   public String getCurrentRevocationReason() {
       return profiledata.getValue(EndEntityProfile.ISSUANCEREVOCATIONREASON ,0);
   }
   
   //
   public void setCurrentRevocationReason(String currentRevocationReason) {
       profiledata.setValue(EndEntityProfile.ISSUANCEREVOCATIONREASON ,0, currentRevocationReason);
   }
   
   // verify this
   public boolean isCurrentRevocationReason(SelectItem currentRevocationReasonItem) {
       final String value = getCurrentRevocationReason();
       final String reason = currentRevocationReasonItem.getLabel();
       return reason.equals(value);
   }
   
   //
   public List<SelectItem> getRevocationReasons(){
       final List<SelectItem> revocationReasonsReturned = new ArrayList<>();
       String humanRead;
       int dbValue;
       for (RevocationReasons revocatinReason : RevocationReasons.values() ) {
          humanRead = revocatinReason.getHumanReadable();
          dbValue = revocatinReason.getDatabaseValue();
          if (dbValue == -1) {// Not revoked
              revocationReasonsReturned.add(0, new SelectItem(dbValue, ejbcaWebBean.getText("ACTIVE")));
          }else if (dbValue == 6){// Certificate on hold    
              revocationReasonsReturned.add(1, new SelectItem(dbValue, ejbcaWebBean.getText("SUSPENDED") + ": " + humanRead));
          }else {    
              revocationReasonsReturned.add(new SelectItem(dbValue, ejbcaWebBean.getText("REVOKED") + ": " + humanRead));
          }
       }
       return revocationReasonsReturned;
   }
   
   //
   public boolean isRevocationReasonModifyable() {
       return profiledata.isModifyable(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0);
   }
   
   //
   public boolean isUseSendNotification() {
       return profiledata.getSendNotificationUsed();
   }
      
   //
   public void setUseSendNotification(boolean useSendNotification) {
       profiledata.setUse(EndEntityProfile.SENDNOTIFICATION, 0, useSendNotification);
   }
   
   private UserNotification notification;
      
   public void setCurrentNotification(UserNotification notification) {
       this.notification = notification;
   }
   
   public List<UserNotification> getNotifications() {
       return profiledata.getUserNotifications();
   }
   
   // EXPERIMENTAL
   public List<SelectItem> getAllNotificationEvents(){
       int[] statuses = ViewEndEntityHelper.statusids;
       String[] statustexts = ViewEndEntityHelper.statustexts;
       List<SelectItem> allEvents = new ArrayList<>();
       for (int i=0; i < statuses.length; i++) {
           System.out.println(" ALL  @@ " + new Integer(statuses[i]).toString() + " @@ " + statustexts[i]); //testing
           allEvents.add(new SelectItem( new Integer( statuses[i]).toString(), statustexts[i]) );
           //allEvents.add(new SelectItem( new Integer(statuses[i]).toString(), new Integer(statuses[i]).toString()));
           //allEvents.add(new SelectItem(statuses[i], statuses[i]));
       }
       return allEvents;
   }
   
   public Collection<String> getCurrentNotificationEvents() {
       Collection<String> userNotificationEventStrings = new ArrayList<String>();
       Iterator<String> eventIterator = notification.getNotificationEventsCollection().iterator();
       while(eventIterator.hasNext()) {
           String temp = new String(EndEntityConstants.getTranslatableStatusText(new Integer(eventIterator.next()).intValue()));
           userNotificationEventStrings.add(temp);
           System.out.println("Current : " + temp);
       }
       return userNotificationEventStrings;
    }
   
   private Collection<SelectItem> currentUserNotificationEvents;
   
   public void setCurrentNotificationEvents(Collection<SelectItem> currentEvents) {
       currentUserNotificationEvents = currentEvents;
   }
   
   /*public Collection<SelectItem> getCurrentNotificationEvents() {
       Collection<SelectItem> userNotificationEvents = new ArrayList<SelectItem>();
       //userNotificationEvents = new ArrayList<SelectItem>();
       Iterator<String> eventIterator = notification.getNotificationEventsCollection().iterator();
       while(eventIterator.hasNext()) {
           String tempId = new String(eventIterator.next()); 
           String tempName = new String(EndEntityConstants.getTranslatableStatusText(new Integer(tempId).intValue()));
           System.out.println(" CURRENT  @@ " + tempId + " @@ " + tempName);
           userNotificationEvents.add(new SelectItem(tempName, tempId));
       }
       return userNotificationEvents;
    }*/
   
   // 
   public String getNotificationSender() {
       List<UserNotification> unList;
       unList = profiledata.getUserNotifications();
       return unList.get(0).getNotificationSender();
   }
   
   //
   public String getNotificationRecipient() {
       List<UserNotification> unList;
       unList = profiledata.getUserNotifications();
       return unList.get(0).getNotificationRecipient();
   }
   
   //
   public boolean isSendNotificationDefault() {
       return profiledata.getSendNotificationDefault();
   }
   
   //
   public boolean isSendNotificationRequired() {
       return profiledata.getSendNotificationRequired();
   }
   
   //
   public boolean isUsePrintUserData() {
       return profiledata.getUsePrinting();
   }
   
   //
   public void setUsePrintUserData(boolean use) {
       profiledata.setUsePrinting(use);
   }
   
   //
   public boolean isPrintUserDataDefault() {
       return profiledata.getPrintingDefault();
   }
   
   //
   public void setPrintUserDataDefault(boolean printDefault) {
       profiledata.setPrintingDefault(printDefault);
   }
   
   //
   public boolean isPrintUserDataRequired() {
       return profiledata.getPrintingRequired();
   }
   
   //
   public void setPrintUserDataRequired(boolean printRequired) {
       profiledata.setPrintingRequired(printRequired);
   }
   
   //
   public List<SelectItem> getPrinters(){
       String[] printerNames = raBean.listPrinters();    
       final List<SelectItem> printersReturned = new ArrayList<>();
       String printerNr;
       String printer;
       String printerReturned;
       Integer stringElement;
       if (printerNames.length == 0) {
           printersReturned.add(new SelectItem("-1", ejbcaWebBean.getText("ERRORNOPRINTERFOUND") ));
       } else {
           for(stringElement = 0; stringElement < printerNames.length; stringElement++) {
               printerNr = stringElement.toString();
               printer = printerNames[stringElement.intValue()];
               printerReturned = ejbcaWebBean.getText(ejbcaWebBean.getText(printer));
               printersReturned.add(new SelectItem(printerNr, printerReturned ));
           }
       }
       return printersReturned;
   }
   
   //
   public String getCurrentPrinter() {
       return profiledata.getPrinterName();
   }
   
   //
   public void setCurrentPrinter(String printerName) {
       profiledata.setPrinterName(printerName);
   }
   
   //
   public List<SelectItem> getNumberOfCopies(){
       final List<SelectItem> numberOfCopiesReturned = new ArrayList<>();
       Integer copyInt;
       for(copyInt = 0; copyInt < 5; copyInt++) {
           numberOfCopiesReturned.add(new SelectItem(copyInt.toString(), copyInt.toString()));
       }
       return numberOfCopiesReturned;
   }
   
   //...
   public String getCurrentNumberCopies() { 
       Integer numberOfCopies = profiledata.getPrintedCopies(); 
       return numberOfCopies.toString();
               
   }
   
   // verify
   public void setCurrentNumberCopies(String numberOfCopies) {
       Integer copies = new Integer(numberOfCopies);
       profiledata.setPrintedCopies(copies);
   }
   
   // verify...
   public String getCurrentTemplate() {
       String currentTemplate = profiledata.getPrinterSVGFileName();;
       if (currentTemplate.equals("")) {
           return  ejbcaWebBean.getText("NOTEMPLATEUPLOADED");
       }else {
           return currentTemplate;
       }
   }
   
   
   
   
   
   
   
   
   
   // UPLOAD TEMPLATE:
   /*if(request.getParameter(BUTTON_UPLOADTEMPLATE) != null){
       includefile="uploadtemplate.jspf";
     }*/
   
  
   /*
   <% 
   int row = 0;
 %>
 <body > 
 <script type="text/javascript">
 <!--  

 function check()
 {  
   
   if(document.uploadfile.<%= FILE_TEMPLATE %>.value == ''){   
      alert("<%= ejbcawebbean.getText("YOUMUSTSELECT", true) %>"); 
    }else{  
      return true;  
    }
   
    return false;
 }
 -->
 </script>

      <c:set var="csrf_tokenname"><csrf:tokenname/></c:set>
      <c:set var="csrf_tokenvalue"><csrf:tokenvalue/></c:set>

 <div align="center">
    <h2><%= ejbcawebbean.getText("UPLOADUSERDATATEMP") %></h2>
    <h3><%= ejbcawebbean.getText("ENDENTITYPROFILE")+ " : "%> <c:out value="<%= profile %>"/></h3>
 </div>

   <form name="uploadfile" action="<%= THIS_FILENAME %>?${csrf_tokenname}=${csrf_tokenvalue}" method="post" enctype='multipart/form-data' >
   <table class="action" width="100%" border="0" cellspacing="3" cellpadding="3">
     <tr id="Row<%=row++%2%>"> 
       <td width="49%" valign="top"> 
         &nbsp;
       </td>
       <td width="51%" valign="top" align="right"> 
         <a href="<%=THIS_FILENAME %>"><%= ejbcawebbean.getText("BACKTOENDENTITYPROFILES") %></a>
       </td>
     </tr>
     <tr  id="Row<%=row++%2%>"> 
       <td width="49%" valign="top" align="right"><%= ejbcawebbean.getText("PATHTOTEMPLATE") %></td>
       <td width="51%" valign="top">     
         <input type="hidden" name='<%= ACTION %>' value='<%= ACTION_UPLOADTEMP %>'>            
         <input TYPE="FILE" NAME="<%= FILE_TEMPLATE %>" size="40">            
       </td>
     </tr>
     <tr  id="Row<%=row++%2%>"> 
       <td width="49%" valign="top" align="right"> 
         &nbsp;
       </td>
       <td width="51%" valign="top">     
         <input type="submit" name="<%= BUTTON_UPLOADFILE %>" onClick='return check()' value="<%= ejbcawebbean.getText("UPLOADTEMPLATE") %>" >
         &nbsp;&nbsp;&nbsp;
         <input type="submit" name="<%= BUTTON_CANCEL %>" value="<%= ejbcawebbean.getText("CANCEL") %>">     
       </td>
     </tr>
   </table>
   </form>
   */
   //¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
   
   // END
   
   
   // RANDOM STUFF ..REMOVE??
  
   
 //??
  // public String currentProfileId = null;
   
   //
   
 
   //??
   //public void setSelectedEndEntityProfileId(String id) {
     //  currentProfileId = id;
   //}
  
   
    
 
   
   //??
   public boolean getCheckBoxValue() { 
       return false;
   }
   
   //??
   public void handleFields() {
       // per field below...
   }
   
   //??
   
  
   
   
   //RANDOM CODE FROM OLD JSP... COMPARE WITH THIS CODE TO FIND WHAT MIGHT BE MISSING
   
   
   
   //If we do use password (boolean is true), we should not use auto-generated
   
   /*public boolean isUsePassword() {
       return profiledata.getUse(EndEntityProfile.PASSWORD,0);
   }*/
   
   /*
   public void checkAutoGenBox(){
       String usebox = CHECKBOX_USE_PASSWORD;
       String valuefield = TEXTFIELD_PASSWORD;
       String reqbox = CHECKBOX_REQUIRED_PASSWORD;
       String modifyablebox = CHECKBOX_MODIFYABLE_PASSWORD;
       String pwdtypeselect = SELECT_AUTOPASSWORDTYPE;
       String pwdlenselect = SELECT_AUTOPASSWORDLENGTH;

       if(usebox.checked){
         valuefield.value = "";
         valuefield.disabled = true;
         pwdtypeselect.disabled = false;
         pwdlenselect.disabled = false;
         reqbox.checked = false;
         reqbox.disabled = true;
         modifyablebox.checked = false;
         modifyablebox.disabled = true;
       }
       else{    
         valuefield.disabled = false;
         pwdtypeselect.disabled = true;
         pwdlenselect.disabled = true;
         reqbox.disabled = false;
         modifyablebox.disabled = false;
       }
     }
   */
   
       
    /*
    <select name="<%=SELECT_PRINTINGCOPIES %>" size="1"  <% if(!used || !authorizedToEdit) out.write(" disabled "); %>>
    <%    for(int i=0; i < 5;i++){ %>
  <option <%  if(i == profiledata.getPrintedCopies()){
                   out.write(" selected "); 
              }
             %>
           value='<c:out value="<%= i %>"/>'>
           <c:out value="<%= i %>"/></option>
   <%   }%>
</select>
    
    */
    
       
   //static final String CHECKBOX_VALUE  = EndEntityProfile.TRUE;
   
   
   
  /*
   public String getCurrentPasswordLen() {
       String str;
       str = getCurrentPasswordLenInt().toString();
       return str;
   }
   
   
   public Integer getCurrentPasswordLenInt() {
       return profiledata.getAutoGenPwdStrength() ;
   }
   
   public void setCurrentPasswordLenInt(int minPwdLen) {
       profiledata.setMinPwdStrength(minPwdLen);
   }
   
   */
   
   
   
   /*public void setUseAutoGeneratedUserNameTrue() {
       profiledata.useAutoGeneratedPasswd();
   }*/
   
   
    /*
    //Imported/copied from jsp file, edit ee section:
    if( action.equals(ACTION_EDIT_PROFILE)){
        // Display edit access rules page.
      profile = request.getParameter(HIDDEN_PROFILENAME); 
      if(profile != null){
        if(!profile.trim().equals("")){
            profiledata = raBean.getTemporaryEndEntityProfile(); 
            if(profiledata == null){
              profiledata = raBean.getEndEntityProfile(profile); 
            }
            // Save changes.
            profiledata.setAllowMergeDnWebServices(ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_ALLOW_MERGEDN_WEBSERVICES)));
            // i might wanna import all static strings from jsp to be able to use above... 
            profiledata.setRequired(EndEntityProfile.USERNAME, 0 , true);
            profiledata.setModifyable(EndEntityProfile.USERNAME, 0 , !ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_AUTOGENERATED_USERNAME)));

            profiledata.setValue(EndEntityProfile.PASSWORD, 0  ,request.getParameter(TEXTFIELD_PASSWORD));
            profiledata.setUse(EndEntityProfile.PASSWORD, 0  , !ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_PASSWORD)));
            profiledata.setRequired(EndEntityProfile.PASSWORD, 0  ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_PASSWORD)));
            profiledata.setModifyable(EndEntityProfile.PASSWORD, 0 , true);

            profiledata.setValue(EndEntityProfile.CLEARTEXTPASSWORD, 0  ,request.getParameter(CHECKBOX_CLEARTEXTPASSWORD));
            profiledata.setRequired(EndEntityProfile.CLEARTEXTPASSWORD, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_CLEARTEXTPASSWORD))); 
            profiledata.setUse(EndEntityProfile.CLEARTEXTPASSWORD, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_CLEARTEXTPASSWORD))); 
            
            profiledata.setValue(EndEntityProfile.AUTOGENPASSWORDTYPE, 0, request.getParameter(SELECT_AUTOPASSWORDTYPE));
            profiledata.setValue(EndEntityProfile.AUTOGENPASSWORDLENGTH, 0, request.getParameter(SELECT_AUTOPASSWORDLENGTH));
            
            try {
                profiledata.setMinPwdStrength(Integer.parseInt(request.getParameter(TEXTFIELD_MINPWDSTRENGTH)));
            } catch(NumberFormatException ignored) {}

            int nValue = -1;
            try {
                nValue = Integer.parseInt(request.getParameter(TEXTFIELD_MAXFAILEDLOGINS));
            } catch(NumberFormatException ignored) {}
            value = request.getParameter(RADIO_MAXFAILEDLOGINS);
            if(RADIO_MAXFAILEDLOGINS_VAL_UNLIMITED.equals(value) || nValue < -1) {
               value = "-1";
            } else {
               value = Integer.toString(nValue);
            }
            profiledata.setValue(EndEntityProfile.MAXFAILEDLOGINS, 0, value);
            profiledata.setRequired(EndEntityProfile.MAXFAILEDLOGINS, 0, raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_MAXFAILEDLOGINS)));
            profiledata.setUse(EndEntityProfile.MAXFAILEDLOGINS, 0, raBean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_MAXFAILEDLOGINS)));
            profiledata.setModifyable(EndEntityProfile.MAXFAILEDLOGINS, 0, raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_MAXFAILEDLOGINS)));
            
            profiledata.setReverseFieldChecks(raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REVERSEFIELDCHECKS)));
            
            numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
            for (int i=0; i < numberofsubjectdnfields; i ++) {
               fielddata = profiledata.getSubjectDNFieldsInOrder(i);
               final String subjectDnTextfield = request.getParameter(TEXTFIELD_SUBJECTDN + i);
               final int dnId = DnComponents.profileIdToDnId(fielddata[EndEntityProfile.FIELDTYPE]);
               final String fieldName = DnComponents.dnIdToProfileName(dnId);
               if (!EndEntityProfile.isFieldOfType(fielddata[EndEntityProfile.FIELDTYPE], DnComponents.DNEMAILADDRESS) ) {
                   if ((subjectDnTextfield == null) || (subjectDnTextfield.trim().equals("")) && 
                           raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_SUBJECTDN + i)) == false && 
                                   raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTDN + i)) == true) {
                       editerrors.put(TEXTFIELD_SUBJECTDIRATTR + i, ejbcawebbean.getText("SUBJECTDNFIELDEMPTY", true) 
                               + ejbcawebbean.getText("DN_PKIX_".concat(fieldName), true));
                   } else {
                       profiledata.setRequired(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                               raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTDN + i)));
                       profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , subjectDnTextfield);                
                       profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] ,
                               raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_SUBJECTDN + i)));    
                   }
               } else {
                   if ((request.getParameter(TEXTFIELD_EMAIL) == null) || (request.getParameter(TEXTFIELD_EMAIL) == "")  && 
                           raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_EMAIL)) == false && 
                                   raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTDN + i)) == true) {
                       editerrors.put(TEXTFIELD_EMAIL, ejbcawebbean.getText("SUBJECTDNEMAILEMPTY", true));
                   } else {
                       profiledata.setRequired(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                               raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTDN + i)));
                       profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] ,
                               request.getParameter(TEXTFIELD_EMAIL));                
                       profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] ,
                               raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_EMAIL)));
                   } 
               }
               
               final boolean useValidation = raBean.getEndEntityParameter(request.getParameter(CHECKBOX_VALIDATION_SUBJECTDN + i));
               if (useValidation) {
                   String validationRegex = request.getParameter(TEXTFIELD_VALIDATION_SUBJECTDN + i);
                   final LinkedHashMap<String,Serializable> validation = ejbcarabean.getValidationFromRegexp(validationRegex);
                   try {
                       EndEntityValidationHelper.checkValidator(fieldName, RegexFieldValidator.class.getName(), validationRegex);
                   } catch (EndEntityFieldValidatorException e) {
                       editerrors.put(TEXTFIELD_VALIDATION_SUBJECTDN + i, e.getMessage());
                   }
                   profiledata.setValidation(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER], validation);
               } else {
                   profiledata.setValidation(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER], null);
               }
            }

            numberofsubjectaltnamefields = profiledata.getSubjectAltNameFieldOrderLength();

            for(int i=0; i < numberofsubjectaltnamefields; i ++){
               fielddata = profiledata.getSubjectAltNameFieldsInOrder(i);
               if ( EndEntityProfile.isFieldOfType(fielddata[EndEntityProfile.FIELDTYPE], DnComponents.RFC822NAME) ) {
                   profiledata.setUse( fielddata[EndEntityProfile.FIELDTYPE], fielddata[EndEntityProfile.NUMBER],
                           raBean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_SUBJECTALTNAME + i)) );
               }
               profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , request.getParameter(TEXTFIELD_SUBJECTALTNAME + i));                
               profiledata.setRequired(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                       raBean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTALTNAME + i)));
               profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                       raBean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_SUBJECTALTNAME + i)));
            
               final boolean useValidation = raBean.getEndEntityParameter(request.getParameter(CHECKBOX_VALIDATION_SUBJECTALTNAME + i));
               if (useValidation) {
                   String validationRegex = request.getParameter(TEXTFIELD_VALIDATION_SUBJECTALTNAME + i);
                   final LinkedHashMap<String,Serializable> validation = ejbcarabean.getValidationFromRegexp(validationRegex);
                   try {
                       final int dnId = DnComponents.profileIdToDnId(fielddata[EndEntityProfile.FIELDTYPE]);
                       final String fieldName = DnComponents.dnIdToProfileName(dnId);
                       EndEntityValidationHelper.checkValidator(fieldName, RegexFieldValidator.class.getName(), validationRegex);
                   } catch (EndEntityFieldValidatorException e) {
                       editerrors.put(TEXTFIELD_VALIDATION_SUBJECTALTNAME + i, e.getMessage());
                   }
                   profiledata.setValidation(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER], validation);
               } else {
                   profiledata.setValidation(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER], null);
               }
            } 
           
            numberofsubjectdirattrfields = profiledata.getSubjectDirAttrFieldOrderLength();

            for(int i=0; i < numberofsubjectdirattrfields; i ++){
               fielddata = profiledata.getSubjectDirAttrFieldsInOrder(i);
               profiledata.setValue(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , request.getParameter(TEXTFIELD_SUBJECTDIRATTR + i));                
               profiledata.setRequired(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                                       ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SUBJECTDIRATTR + i)));
               profiledata.setModifyable(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER] , 
                                       ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_SUBJECTDIRATTR + i)));
            } 

            profiledata.setValue(EndEntityProfile.EMAIL, 0,request.getParameter(TEXTFIELD_EMAIL));
            profiledata.setRequired(EndEntityProfile.EMAIL, 0,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_EMAIL)));
            profiledata.setModifyable(EndEntityProfile.EMAIL, 0,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_EMAIL))); 
            profiledata.setUse(EndEntityProfile.EMAIL, 0,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_EMAIL))); 

            profiledata.setValue(EndEntityProfile.KEYRECOVERABLE, 0, ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_KEYRECOVERABLE)) ? EndEntityProfile.TRUE : EndEntityProfile.FALSE);
            profiledata.setRequired(EndEntityProfile.KEYRECOVERABLE, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_KEYRECOVERABLE)));
            profiledata.setUse(EndEntityProfile.KEYRECOVERABLE, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_KEYRECOVERABLE)));
            
            profiledata.setReUseKeyRecoveredCertificate(ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REUSECERTIFICATE)));
            
              profiledata.setValue(EndEntityProfile.CARDNUMBER, 0, ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_CARDNUMBER)) ? EndEntityProfile.TRUE : EndEntityProfile.FALSE);
              profiledata.setRequired(EndEntityProfile.CARDNUMBER, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_CARDNUMBER)));
              profiledata.setUse(EndEntityProfile.CARDNUMBER, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_CARDNUMBER))); 

            
            profiledata.setValue(EndEntityProfile.SENDNOTIFICATION, 0, ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_SENDNOTIFICATION)) ? EndEntityProfile.TRUE : EndEntityProfile.FALSE);
            profiledata.setRequired(EndEntityProfile.SENDNOTIFICATION, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_SENDNOTIFICATION)));
            profiledata.setUse(EndEntityProfile.SENDNOTIFICATION, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_SENDNOTIFICATION))); 

            String issrevreason =  request.getParameter(SELECT_ISSUANCEREVOCATIONREASON);
            if(issrevreason != null)
                profiledata.setValue(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0,issrevreason);
              else
                profiledata.setValue(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0,""+RevokedCertInfo.NOT_REVOKED);
            profiledata.setModifyable(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_MODIFYABLE_ISSUANCEREVOCATIONREASON)));
            profiledata.setUse(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_ISSUANCEREVOCATIONREASON))); 
            profiledata.setRequired(EndEntityProfile.ISSUANCEREVOCATIONREASON, 0,true);

            profiledata.setValue(EndEntityProfile.NAMECONSTRAINTS_PERMITTED, 0, "");
            profiledata.setRequired(EndEntityProfile.NAMECONSTRAINTS_PERMITTED, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_NC_PERMITTED)));
            profiledata.setUse(EndEntityProfile.NAMECONSTRAINTS_PERMITTED, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_NC_PERMITTED)));
            
            profiledata.setValue(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED, 0, "");
            profiledata.setRequired(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_REQUIRED_NC_EXCLUDED)));
            profiledata.setUse(EndEntityProfile.NAMECONSTRAINTS_EXCLUDED, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_NC_EXCLUDED)));

            profiledata.setUse(EndEntityProfile.CERTSERIALNR, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_CERTSERIALNR)));

            profiledata.setUseExtensiondata(CHECKBOX_VALUE.equalsIgnoreCase(request.getParameter(CHECKBOX_USE_EXTENSIONDATA)));

            String defaultcertprof =  request.getParameter(SELECT_DEFAULTCERTPROFILE);
            String[] values = request.getParameterValues(SELECT_AVAILABLECERTPROFILES);
            // Only set default cert profile value if it is among the available ones, if javascript check
            // was bypassed, set default to nothing in order to avoid anything bad happening
            if (ArrayUtils.contains(values, defaultcertprof)) {
                profiledata.setValue(EndEntityProfile.DEFAULTCERTPROFILE, 0, defaultcertprof);
                profiledata.setRequired(EndEntityProfile.DEFAULTCERTPROFILE, 0,true);
            } else {
                profiledata.setValue(EndEntityProfile.DEFAULTCERTPROFILE, 0, "-1");
                profiledata.setRequired(EndEntityProfile.DEFAULTCERTPROFILE, 0,true);
            }
            final String availablecertprofiles = ejbcarabean.getAvailableCertProfiles(defaultcertprof, values);
            profiledata.setValue(EndEntityProfile.AVAILCERTPROFILES, 0, availablecertprofiles);
            profiledata.setRequired(EndEntityProfile.AVAILCERTPROFILES, 0, true);    

            String defaultca =  request.getParameter(SELECT_DEFAULTCA);
            profiledata.setValue(EndEntityProfile.DEFAULTCA, 0,defaultca);
            profiledata.setRequired(EndEntityProfile.DEFAULTCA, 0,true);

            values = request.getParameterValues(SELECT_AVAILABLECAS);

            if (defaultca != null) {
              final String availablecas = ejbcarabean.getAvailableCasString(values, defaultca);
              profiledata.setValue(EndEntityProfile.AVAILCAS, 0,availablecas);
              profiledata.setRequired(EndEntityProfile.AVAILCAS, 0,true);    
            }


            String defaulttokentype =  request.getParameter(SELECT_DEFAULTTOKENTYPE);
            profiledata.setValue(EndEntityProfile.DEFKEYSTORE, 0,defaulttokentype);
            profiledata.setRequired(EndEntityProfile.DEFKEYSTORE, 0,true);

            values = request.getParameterValues(SELECT_AVAILABLETOKENTYPES);

            if(defaulttokentype != null){
              final String availabletokentypes = ejbcarabean.getAvailableTokenTypes(defaulttokentype, values);
              profiledata.setValue(EndEntityProfile.AVAILKEYSTORE, 0, availabletokentypes);
              profiledata.setRequired(EndEntityProfile.AVAILKEYSTORE, 0, true);    
            }

            profiledata.setUse(EndEntityProfile.AVAILTOKENISSUER, 0 ,ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_HARDTOKENISSUERS))); 

            String defaulthardtokenissuer =  request.getParameter(SELECT_DEFAULTHARDTOKENISSUER);
            profiledata.setValue(EndEntityProfile.DEFAULTTOKENISSUER, 0,defaulthardtokenissuer);
            profiledata.setRequired(EndEntityProfile.DEFAULTTOKENISSUER, 0,true);

            values = request.getParameterValues(SELECT_AVAILABLEHARDTOKENISSUERS);

            if(defaulthardtokenissuer != null){
              final String availablehardtokenissuers = ejbcarabean.getAvailableHardTokenIssuers(defaulthardtokenissuer, values);
              profiledata.setValue(EndEntityProfile.AVAILTOKENISSUER, 0, availablehardtokenissuers);
              profiledata.setRequired(EndEntityProfile.AVAILTOKENISSUER, 0, true);    
            }
            
            value = request.getParameter(CHECKBOX_USE_PRINTING);
            if(value != null && value.equalsIgnoreCase(CHECKBOX_VALUE)){
                profiledata.setUsePrinting(true);
                
                value = request.getParameter(CHECKBOX_PRINTING);
                profiledata.setPrintingDefault(value != null && value.equalsIgnoreCase(CHECKBOX_VALUE));
                value = request.getParameter(CHECKBOX_REQUIRED_PRINTING);
                profiledata.setPrintingRequired(value != null && value.equalsIgnoreCase(CHECKBOX_VALUE));
                
                value = request.getParameter(SELECT_PRINTINGCOPIES);
                if(value != null){
                  profiledata.setPrintedCopies(Integer.parseInt(value));
                }
                value = request.getParameter(SELECT_PRINTINGPRINTERNAME);
                if(value != null){
                  profiledata.setPrinterName(value);
                } 
                
            }else{
                profiledata.setUsePrinting(false);
                profiledata.setPrintingDefault(false);
                profiledata.setPrintingRequired(false);
                profiledata.setPrintedCopies(1);
                profiledata.setPrinterName("");
                profiledata.setPrinterSVGData("");
                profiledata.setPrinterSVGFileName("");             
            }
            
               value = request.getParameter(CHECKBOX_USE_STARTTIME);
               if( value != null && value.equalsIgnoreCase(CHECKBOX_VALUE) ) {
                   value = request.getParameter(TEXTFIELD_STARTTIME);
                   profiledata.setValue(EndEntityProfile.STARTTIME, 0, (value != null && value.length() > 0) ? ejbcawebbean.getImpliedUTCFromISO8601OrRelative(value) : "");
                   profiledata.setUse(EndEntityProfile.STARTTIME, 0, true);
                   //profiledata.setRequired(EndEntityProfile.STARTTIME, 0, true);
                   value = request.getParameter(CHECKBOX_MODIFYABLE_STARTTIME);
                   profiledata.setModifyable(EndEntityProfile.STARTTIME, 0, (value != null && value.equalsIgnoreCase(CHECKBOX_VALUE)));
               } else {
                   profiledata.setValue(EndEntityProfile.STARTTIME, 0, "");
                   profiledata.setUse(EndEntityProfile.STARTTIME, 0, false);
               }
               value = request.getParameter(CHECKBOX_USE_ENDTIME);
               if( value != null && value.equalsIgnoreCase(CHECKBOX_VALUE) ) {
                   value = request.getParameter(TEXTFIELD_ENDTIME);
                   profiledata.setValue(EndEntityProfile.ENDTIME, 0, (value != null && value.length() > 0) ? ejbcawebbean.getImpliedUTCFromISO8601OrRelative(value) : "");
                   profiledata.setUse(EndEntityProfile.ENDTIME, 0, true);
                   //profiledata.setRequired(EndEntityProfile.ENDTIME, 0, true);
                   value = request.getParameter(CHECKBOX_MODIFYABLE_ENDTIME);
                   profiledata.setModifyable(EndEntityProfile.ENDTIME, 0, (value != null && value.equalsIgnoreCase(CHECKBOX_VALUE)));
               } else {
                   profiledata.setValue(EndEntityProfile.ENDTIME, 0, "");
                   profiledata.setUse(EndEntityProfile.ENDTIME, 0, false);
               }

               value = request.getParameter(CHECKBOX_USE_ALLOWEDRQUESTS);
               if( value != null && value.equalsIgnoreCase(CHECKBOX_VALUE) ) {
                   value = request.getParameter(SELECT_ALLOWEDREQUESTS);
                   if( value != null ) {
                       profiledata.setValue(EndEntityProfile.ALLOWEDREQUESTS, 0, value);
                   }
                   profiledata.setUse(EndEntityProfile.ALLOWEDREQUESTS, 0, true);
               } else {
                   profiledata.setUse(EndEntityProfile.ALLOWEDREQUESTS, 0, false);
               }

            if(request.getParameter(BUTTON_DELETESUBJECTDN) != null){  
              numberofsubjectdnfields = profiledata.getSubjectDNFieldOrderLength();
              int pointer = 0;
              for(int i=0; i < numberofsubjectdnfields; i++){
                if(ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_SELECTSUBJECTDN + i))){
                  fielddata = profiledata.getSubjectDNFieldsInOrder(pointer);  
                  profiledata.removeField(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER]);
                }
                else
                  pointer++;
              }                          
            }
            if(request.getParameter(BUTTON_ADDSUBJECTDN) != null){             
              value = request.getParameter(SELECT_ADDSUBJECTDN);
              if(value!=null){
                profiledata.addField(value);             
              }                   
            }
            if(request.getParameter(BUTTON_DELETESUBJECTALTNAME) != null){             
              numberofsubjectaltnamefields = profiledata.getSubjectAltNameFieldOrderLength();
              int pointer = 0;
              for(int i=0; i < numberofsubjectaltnamefields; i++){
                if(ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_SELECTSUBJECTALTNAME+i))){
                  fielddata = profiledata.getSubjectAltNameFieldsInOrder(pointer);  
                  profiledata.removeField(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER]);
                }
                else
                  pointer++;
              }             
            }
            if(request.getParameter(BUTTON_ADDSUBJECTALTNAME) != null){             
              value = request.getParameter(SELECT_ADDSUBJECTALTNAME);
              if(value!=null){
                profiledata.addField(value);                
              }                       
            }
            
            if(request.getParameter(BUTTON_DELETESUBJECTDIRATTR) != null){             
              numberofsubjectdirattrfields = profiledata.getSubjectDirAttrFieldOrderLength();
              int pointer = 0;
              for(int i=0; i < numberofsubjectdirattrfields; i++){
                if(ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_SELECTSUBJECTDIRATTR+i))){
                  fielddata = profiledata.getSubjectDirAttrFieldsInOrder(pointer);  
                  profiledata.removeField(fielddata[EndEntityProfile.FIELDTYPE],fielddata[EndEntityProfile.NUMBER]);
                }
                else
                  pointer++;
              }             
            }
            if(request.getParameter(BUTTON_ADDSUBJECTDIRATTR) != null){             
              value = request.getParameter(SELECT_ADDSUBJECTDIRATTR);
              if(value!=null){
                profiledata.addField(value);                
              }                       
            }
            
            includefile="endentityprofilepage.jspf";
            ejbcarabean.setTemporaryEndEntityProfile(profiledata);
    
          */
          
            /*
             * Add user notice.
             */
     /*       if(request.getParameter(BUTTON_ADD_NOTIFICATION) != null) {
                ejbcarabean.setTemporaryEndEntityProfileNotification(new UserNotification());
                ejbcarabean.setTemporaryEndEntityProfile(profiledata);
                includefile = "endentityprofilepage.jspf";
            }*/
    
            /*
             * Remove all user notices.
             */
    /*        if(request.getParameter(BUTTON_DELETEALL_NOTIFICATION) != null) {
                List<UserNotification> emptynot = new ArrayList<UserNotification>();
                profiledata.setUserNotifications(emptynot);
                ejbcarabean.setTemporaryEndEntityProfile(profiledata);
                includefile = "endentityprofilepage.jspf";
            } */
    
            /*
             * Remove/Edit user notice.
             */
    
    /*
            if (profiledata.getUserNotifications() != null &&
                    ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_SENDNOTIFICATION))) {
                boolean removed = false;
                final int numnots = profiledata.getUserNotifications().size();
                if(request.getParameter(BUTTON_DELETE_TEMPORARY_NOTIFICATION) != null) {
                    ejbcarabean.setTemporaryEndEntityProfileNotification(null);
                }
                for(int i = 0; i < numnots; i++) {
                    String delete = request.getParameter(BUTTON_DELETE_NOTIFICATION + i);
                    
                    if (request.getParameter(TEXTFIELD_NOTIFICATIONSENDER + NEWVALUE + i) == null) {
                        continue;
                    }
                    
                    // First, delete the old value
                    { // hide variables
                        UserNotification not = ejbcarabean.getNotificationForDelete(
                           request.getParameter(TEXTFIELD_NOTIFICATIONSENDER + OLDVALUE + i),
                           request.getParameter(TEXTFIELD_NOTIFICATIONRCPT + OLDVALUE + i),
                           request.getParameter(TEXTFIELD_NOTIFICATIONSUBJECT + OLDVALUE + i),
                           request.getParameter(TEXTAREA_NOTIFICATIONMESSAGE + OLDVALUE + i),
                           request.getParameterValues(SELECT_NOTIFICATIONEVENTS + OLDVALUE + i));
                        profiledata.removeUserNotification(not);
                    }
                    
                    if (delete != null) {
                        // Delete = don't create again.
                        // Stay at the profile page.
                        removed = true;
                    } else {
                        // Edit
                        UserNotification not = ejbcarabean.getNotificationForAdd(
                           request.getParameter(TEXTFIELD_NOTIFICATIONSENDER + NEWVALUE + i),
                           request.getParameter(TEXTFIELD_NOTIFICATIONRCPT + NEWVALUE + i),
                           request.getParameter(TEXTFIELD_NOTIFICATIONSUBJECT + NEWVALUE + i),
                           request.getParameter(TEXTAREA_NOTIFICATIONMESSAGE + NEWVALUE + i),
                           request.getParameterValues(SELECT_NOTIFICATIONEVENTS + NEWVALUE + i));
                        profiledata.addUserNotification(not);
                    }
                }         
                if (removed) {
                  ejbcarabean.setTemporaryEndEntityProfile(profiledata);
                  ejbcarabean.setTemporaryEndEntityProfileNotification(null);
                  includefile = "endentityprofilepage.jspf";
                }
            }

            */
            /*
             * Add new notification
             */
            
    /*
            String sender = request.getParameter(TEXTFIELD_NOTIFICATIONSENDER);
            if ((sender != null) && (sender.length() > 0) &&
                    ejbcarabean.getEndEntityParameter(request.getParameter(CHECKBOX_USE_SENDNOTIFICATION))) {
                UserNotification not = new UserNotification();
                not.setNotificationSender(sender);
                not.setNotificationSubject(request.getParameter(TEXTFIELD_NOTIFICATIONSUBJECT));
                not.setNotificationMessage(request.getParameter(TEXTAREA_NOTIFICATIONMESSAGE));
                String rcpt = request.getParameter(TEXTFIELD_NOTIFICATIONRCPT);
                if ( (rcpt == null) || (rcpt.length() == 0) ) {
                    // Default value if nothing is entered is users email address
                    rcpt = UserNotification.RCPT_USER;
                }
                not.setNotificationRecipient(rcpt);
                String[] val = request.getParameterValues(SELECT_NOTIFICATIONEVENTS);
                String events = null;
                for (String v : val) {
                   if (events == null) {
                      events = v;
                   } else {
                      events = events + ";"+v;
                   }
                }
                not.setNotificationEvents(events);
                profiledata.addUserNotification(not);
            }
            
            if(request.getParameter(BUTTON_SAVE) != null && editerrors.isEmpty()){             
                ejbcarabean.changeEndEntityProfile(profile,profiledata);
                ejbcarabean.setTemporaryEndEntityProfile(null);
                ejbcarabean.setTemporaryEndEntityProfileNotification(null);
                includefile="endentityprofilespage.jspf"; 
                savedprofilesuccess = true;
            }
            
            if(request.getParameter(BUTTON_UPLOADTEMPLATE) != null){
                  includefile="uploadtemplate.jspf";
             }
          }
          if(request.getParameter(BUTTON_CANCEL) != null){
             // Don't save changes.
            ejbcarabean.setTemporaryEndEntityProfile(null);
            ejbcarabean.setTemporaryEndEntityProfileNotification(null);
            includefile="endentityprofilespage.jspf";
          }
     }
   }
   
   */
    //Stop import from jsp file
   
   
   // Random variables from jsp:

   
   
 /*  
   static final String ACTION                        = "action";
   static final String ACTION_EDIT_PROFILES          = "editprofiles";
   static final String ACTION_EDIT_PROFILE           = "editprofile";
   static final String ACTION_UPLOADTEMP             = "uploadtemp";
   static final String ACTION_IMPORT_EXPORT           = "importexportprofiles";

   

 
   static final String BUTTON_EDIT_PROFILE      = "buttoneditprofile"; 
   static final String BUTTON_DELETE_PROFILE    = "buttondeleteprofile";
   static final String BUTTON_ADD_PROFILE       = "buttonaddprofile"; 
   static final String BUTTON_RENAME_PROFILE    = "buttonrenameprofile";
   static final String BUTTON_CLONE_PROFILE     = "buttoncloneprofile";

   static final String SELECT_PROFILE           = "selectprofile";
   static final String TEXTFIELD_PROFILENAME    = "textfieldprofilename";
   static final String TEXTFIELD_EXPORT_DESTINATION     = "textfieldexportdestination";
   static final String HIDDEN_PROFILENAME       = "hiddenprofilename";
   static final String BUTTON_IMPORT_PROFILES   = "buttonimportprofiles";
   static final String BUTTON_EXPORT_PROFILES     = "buttonexportprofiles";
  
 
   static final String BUTTON_SAVE              = "buttonsave";
   static final String BUTTON_CANCEL            = "buttoncancel";
   static final String BUTTON_UPLOADTEMPLATE    = "buttonuploadtemplate";
   static final String BUTTON_UPLOADFILE        = "buttonuploadfile";
  
   static final String BUTTON_ADD_NOTIFICATION    = "buttonaddnotification";
   static final String BUTTON_ADD_ANOTHER_NOTIFICATION = "buttonaddanothernotification";
   static final String BUTTON_DELETEALL_NOTIFICATION = "buttondeleteallnotification";
   static final String BUTTON_DELETE_NOTIFICATION = "buttondeleltenotification";
   static final String BUTTON_DELETE_TEMPORARY_NOTIFICATION = "buttondeletetemporarynotification";
  
   static final String TEXTFIELD_USERNAME             = "textfieldusername";
   static final String TEXTFIELD_PASSWORD             = "textfieldpassword";
   static final String TEXTFIELD_MINPWDSTRENGTH       = "textfieldminpwdstrength";
   static final String TEXTFIELD_SUBJECTDN            = "textfieldsubjectdn";
   static final String TEXTFIELD_VALIDATION_SUBJECTDN = "textfieldsubjectdnvalidation";
   static final String TEXTFIELD_VALIDATION_SUBJECTALTNAME = "textfieldsubjectaltnamevalidation";
   static final String TEXTFIELD_SUBJECTALTNAME       = "textfieldsubjectaltname";
   static final String TEXTFIELD_SUBJECTDIRATTR       = "textfieldsubjectdirattr";
   static final String TEXTFIELD_EMAIL                = "textfieldemail";
   static final String TEXTFIELD_NOTIFICATIONSENDER   = "textfieldnotificationsender";
   static final String TEXTFIELD_NOTIFICATIONRCPT     = "textfieldnotificationrcpt";
   static final String TEXTFIELD_NOTIFICATIONSUBJECT  = "textfieldnotificationsubject";
   static final String SELECT_NOTIFICATIONEVENTS      = "selectnotificationevents";
   static final String TEXTFIELD_STARTTIME            = "textfieldstarttime";
   static final String TEXTFIELD_ENDTIME              = "textfieldendtime";
   static final String TEXTFIELD_MAXFAILEDLOGINS      = "textfieldmaxfailedlogins";
  
   static final String TEXTAREA_NOTIFICATIONMESSAGE  = "textareanotificationmessage";
   
   static final String CHECKBOX_CLEARTEXTPASSWORD          = "checkboxcleartextpassword";
   static final String CHECKBOX_KEYRECOVERABLE             = "checkboxkeyrecoverable";
   static final String CHECKBOX_REUSECERTIFICATE           = "checkboxreusecertificate";
   static final String CHECKBOX_REVERSEFIELDCHECKS         = "checkboxreversefieldchecks";
   static final String CHECKBOX_CARDNUMBER                 = "checkboxcardnumber";
   static final String CHECKBOX_SENDNOTIFICATION           = "checkboxsendnotification";
   static final String CHECKBOX_PRINTING                   = "checkboxprinting";
   static final String CHECKBOX_USE_STARTTIME              = "checkboxsusetarttime";
   static final String CHECKBOX_REQUIRED_STARTTIME         = "checkboxrelativestarttime";
   static final String CHECKBOX_MODIFYABLE_STARTTIME       = "checkboxmodifyablestarttime";
   static final String CHECKBOX_USE_ENDTIME                = "checkboxuseendtime";
   static final String CHECKBOX_REQUIRED_ENDTIME           = "checkboxrelativeendtime";
   static final String CHECKBOX_MODIFYABLE_ENDTIME         = "checkboxmodifyableendtime";
   static final String CHECKBOX_ALLOW_MERGEDN_WEBSERVICES = "checkboxallowmergednwebservices";
   
   static final String CHECKBOX_REQUIRED_PASSWORD          = "checkboxrequiredpassword";
   static final String CHECKBOX_REQUIRED_CLEARTEXTPASSWORD = "checkboxrequiredcleartextpassword";
   static final String CHECKBOX_REQUIRED_SUBJECTDN         = "checkboxrequiredsubjectdn";
   static final String CHECKBOX_REQUIRED_SUBJECTALTNAME    = "checkboxrequiredsubjectaltname";
   static final String CHECKBOX_REQUIRED_SUBJECTDIRATTR    = "checkboxrequiredsubjectdirattr";
   static final String CHECKBOX_REQUIRED_EMAIL             = "checkboxrequiredemail";
   static final String CHECKBOX_REQUIRED_CARDNUMBER        = "checkboxrequiredcardnumber";
   static final String CHECKBOX_REQUIRED_NC_PERMITTED      = "checkboxrequiredncpermitted";
   static final String CHECKBOX_REQUIRED_NC_EXCLUDED       = "checkboxrequiredncexcluded";
   static final String CHECKBOX_REQUIRED_SENDNOTIFICATION  = "checkboxrequiredsendnotification";
   static final String CHECKBOX_REQUIRED_KEYRECOVERABLE    = "checkboxrequiredkeyrecoverable";
   static final String CHECKBOX_REQUIRED_PRINTING          = "checkboxrequiredprinting";
   static final String CHECKBOX_REQUIRED_MAXFAILEDLOGINS   = "checkboxrequiredmaxfailedlogins";

   public static final String CHECKBOX_AUTOGENERATED_USERNAME     = "checkboxautogeneratedusername";
   static final String CHECKBOX_MODIFYABLE_PASSWORD          = "checkboxmodifyablepassword";
   static final String CHECKBOX_MODIFYABLE_SUBJECTDN         = "checkboxmodifyablesubjectdn";
   static final String CHECKBOX_MODIFYABLE_SUBJECTALTNAME    = "checkboxmodifyablesubjectaltname";
   static final String CHECKBOX_MODIFYABLE_SUBJECTDIRATTR    = "checkboxmodifyablesubjectdirattr";
   static final String CHECKBOX_MODIFYABLE_EMAIL             = "checkboxmodifyableemail";
   static final String CHECKBOX_MODIFYABLE_ISSUANCEREVOCATIONREASON = "checkboxmodifyableissuancerevocationreason";
   static final String CHECKBOX_MODIFYABLE_MAXFAILEDLOGINS   = "checkboxmodifyablemaxfailedlogins";
   
   static final String CHECKBOX_VALIDATION_SUBJECTDN  = "checkboxvalidationsubjectdn";
   static final String CHECKBOX_VALIDATION_SUBJECTALTNAME  = "checkboxvalidationsubjectaltname";
   static final String LABEL_VALIDATION_SUBJECTDN     = "labelvalidationsubjectdn";
   static final String LABEL_VALIDATION_SUBJECTALTNAME     = "labelvalidationsubjectaltname";

   static final String CHECKBOX_USE_CARDNUMBER        = "checkboxusecardnumber";
   static final String CHECKBOX_USE_PASSWORD          = "checkboxusepassword";
   static final String CHECKBOX_USE_CLEARTEXTPASSWORD = "checkboxusecleartextpassword";
   static final String CHECKBOX_USE_SUBJECTDN         = "checkboxusesubjectdn";
   static final String CHECKBOX_USE_SUBJECTALTNAME    = "checkboxusesubjectaltname";
   static final String CHECKBOX_USE_EMAIL             = "checkboxuseemail";
   static final String CHECKBOX_USE_KEYRECOVERABLE    = "checkboxusekeyrecoverable";
   static final String CHECKBOX_USE_SENDNOTIFICATION  = "checkboxusesendnotification";
   static final String CHECKBOX_USE_HARDTOKENISSUERS  = "checkboxusehardtokenissuers";
   static final String CHECKBOX_USE_PRINTING          = "checkboxuseprinting";
   static final String CHECKBOX_USE_ALLOWEDRQUESTS    = "checkboxuseallowedrequests";
   static final String CHECKBOX_USE_ISSUANCEREVOCATIONREASON = "checkboxuseissuancerevocationreason";
   static final String CHECKBOX_USE_MAXFAILEDLOGINS   = "checkboxusemaxfailedlogins";
   static final String CHECKBOX_USE_CERTSERIALNR      = "checkboxusecertserialonr";
   static final String CHECKBOX_USE_NC_PERMITTED      = "checkboxusencpermitted";
   static final String CHECKBOX_USE_NC_EXCLUDED       = "checkboxusencexcluded";
   static final String CHECKBOX_USE_EXTENSIONDATA     = "checkboxuseextensiondata";
   
   static final String RADIO_MAXFAILEDLOGINS               = "radiomaxfailedlogins";
   static final String RADIO_MAXFAILEDLOGINS_VAL_UNLIMITED = "unlimited";
   static final String RADIO_MAXFAILEDLOGINS_VAL_SPECIFIED = "specified";
   
   static final String SELECT_AUTOPASSWORDTYPE               = "selectautopasswordtype";
   static final String SELECT_AUTOPASSWORDLENGTH             = "selectautopasswordlength";

   static final String SELECT_ISSUANCEREVOCATIONREASON       = "selectissuancerevocationreason";
   
   static final String SELECT_DEFAULTCERTPROFILE             = "selectdefaultcertprofile";
   static final String SELECT_AVAILABLECERTPROFILES          = "selectavailablecertprofiles";

   static final String SELECT_DEFAULTTOKENTYPE               = "selectdefaulttokentype";
   static final String SELECT_AVAILABLETOKENTYPES            = "selectavailabletokentypes";


   static final String SELECT_DEFAULTCA                      = "selectdefaultca";
   static final String SELECT_AVAILABLECAS                   = "selectavailablecas";

   static final String SELECT_DEFAULTHARDTOKENISSUER         = "selectdefaulthardtokenissuer";
   static final String SELECT_AVAILABLEHARDTOKENISSUERS      = "selectavailablehardtokenissuers";

   static final String SELECT_PRINTINGPRINTERNAME            = "selectprinteringprintername";
   static final String SELECT_PRINTINGCOPIES                 = "selectprinteringcopies";

   static final String SELECT_ALLOWEDREQUESTS                = "selectallowedrequests";

   static final String SELECT_ADDSUBJECTDN                   = "selectaddsubjectdn";
   static final String BUTTON_DELETESUBJECTDN                = "buttondeletesubjectdn";
   static final String BUTTON_ADDSUBJECTDN                   = "buttonaddsubjectdn";
   static final String CHECKBOX_SELECTSUBJECTDN              = "checkboxselectsubjectdn";
   static final String SELECT_ADDSUBJECTALTNAME              = "selectaddsubjectaltname";
   static final String BUTTON_DELETESUBJECTALTNAME           = "buttondeletesubjectaltname";
   static final String BUTTON_ADDSUBJECTALTNAME              = "buttonaddsubjectaltname";
   static final String CHECKBOX_SELECTSUBJECTALTNAME         = "checkboxselectsubjectaltname";

   static final String SELECT_ADDSUBJECTDIRATTR              = "selectaddsubjectdirattr";
   static final String BUTTON_DELETESUBJECTDIRATTR           = "buttondeletesubjectdirattr";
   static final String BUTTON_ADDSUBJECTDIRATTR              = "buttonaddsubjectdirattr";
   static final String CHECKBOX_SELECTSUBJECTDIRATTR         = "checkboxselectsubjectdirattr";
   static final String SELECT_TYPE                         = "selecttype";
   
   static final String OLDVALUE                              = "_oldvalue";
   static final String NEWVALUE                              = "_newvalue";
   
   static final String FILE_IMPORTFILE                        = "fileimportfile";
   
   public static final String FILE_TEMPLATE             = "filetemplate";

*/
}
