{
  "swagger": "2.0",
  "info": {
    "description": "API reference documentation.",
    "version": "1.0",
    "title": "EJBCA REST Interface"
  },
  "basePath": "/ejbca/ejbca-rest-api",
  "tags": [
    {
      "name": "v1/ca_management"
    },
    {
      "name": "v1/ca"
    },
    {
      "name": "v1/certificate"
    },
    {
      "name": "v2/certificate"
    },
    {
      "name": "v1/configdump"
    },
    {
      "name": "v1/cryptotoken"
    },
    {
      "name": "v1/endentity"
    },
    {
      "name": "v2/endentity"
    },
    {
      "name": "v1/ssh"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/ca_management/status": {
      "get": {
        "tags": [
          "v1/ca_management"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/ca_management/{ca_name}/activate": {
      "put": {
        "tags": [
          "v1/ca_management"
        ],
        "summary": "Activate a CA",
        "description": "Activates CA with given name",
        "operationId": "activate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ca_name",
            "in": "path",
            "description": "Name of the CA to activate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CA activated"
          }
        }
      }
    },
    "/v1/ca_management/{ca_name}/deactivate": {
      "put": {
        "tags": [
          "v1/ca_management"
        ],
        "summary": "Deactivate a CA",
        "description": "Deactivates CA with given name",
        "operationId": "deactivate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ca_name",
            "in": "path",
            "description": "Name of the CA to deactivate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CA deactivated"
          }
        }
      }
    },
    "/v1/ca/status": {
      "get": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/ca/{issuer_dn}/importcrl": {
      "post": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Import a certificate revocation list (CRL) for a CA",
        "description": "",
        "operationId": "importCrl",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "issuer_dn",
            "in": "path",
            "description": "the CRL issuers DN (CAs subject DN)",
            "required": true,
            "type": "string"
          },
          {
            "name": "crlFile",
            "in": "formData",
            "description": "CRL file in DER format",
            "required": false,
            "type": "file"
          },
          {
            "name": "crlPartitionIndex",
            "in": "formData",
            "description": "CRL partition index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "CRL file was imported successfully"
          },
          "400": {
            "description": "Error while importing CRL file"
          }
        }
      }
    },
    "/v1/ca/{issuer_dn}/createcrl": {
      "post": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Create CRL(main, partition and delta) issued by this CA",
        "description": "",
        "operationId": "createCrl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "issuer_dn",
            "in": "path",
            "description": "the CRL issuers DN (CAs subject DN)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deltacrl",
            "in": "query",
            "description": "true to also create the deltaCRL, false to only create the base CRL",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateCrlRestResponse"
            }
          }
        }
      }
    },
    "/v1/ca/{subject_dn}/certificate/download": {
      "get": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Get PEM file with the active CA certificate chain",
        "description": "",
        "operationId": "getCertificateAsPem",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "subject_dn",
            "in": "path",
            "description": "CAs subject DN",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/ca": {
      "get": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Returns the Response containing the list of CAs with general information per CA as Json",
        "description": "Returns the Response containing the list of CAs with general information per CA as Json",
        "operationId": "listCas",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CaInfosRestResponse"
            }
          }
        }
      }
    },
    "/v1/ca/{issuer_dn}/getLatestCrl": {
      "get": {
        "tags": [
          "v1/ca"
        ],
        "summary": "Returns the latest CRL issued by this CA",
        "description": "",
        "operationId": "getLatestCrl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "issuer_dn",
            "in": "path",
            "description": "the CRL issuers DN (CAs subject DN)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deltaCrl",
            "in": "query",
            "description": "true to get the latest deltaCRL, false to get the latest complete CRL",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "crlPartitionIndex",
            "in": "query",
            "description": "the CRL partition index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CrlRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/status": {
      "get": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_2",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/{issuer_dn}/{certificate_serial_number}/revoke": {
      "put": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Revokes the specified certificate",
        "description": "Revokes the specified certificate",
        "operationId": "revokeCertificate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "issuer_dn",
            "in": "path",
            "description": "Subject DN of the issuing CA",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_serial_number",
            "in": "path",
            "description": "hex serial number (without prefix, e.g. '00')",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Must be valid RFC5280 reason. One of\n NOT_REVOKED, UNSPECIFIED ,KEY_COMPROMISE,\n CA_COMPROMISE, AFFILIATION_CHANGED, SUPERSEDED, CESSATION_OF_OPERATION,\n CERTIFICATE_HOLD, REMOVE_FROM_CRL, PRIVILEGES_WITHDRAWN, AA_COMPROMISE",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "ISO 8601 Date string, eg. '2018-06-15T14:07:09Z'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevokeStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/certificaterequest": {
      "post": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Enrollment with client generated keys for an existing End Entity",
        "description": "Enroll for a certificate given a PEM encoded PKCS#10 CSR.",
        "operationId": "certificateRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CertificateRequestRestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/expire": {
      "get": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Get a list of certificates that are about to expire",
        "description": "List of certificates expiring within specified number of days",
        "operationId": "getCertificatesAboutToExpire",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "description": "Request certificates expiring within this number of days",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Next offset to display results of, if maxNumberOfResults is exceeded. Starts from 0.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxNumberOfResults",
            "in": "query",
            "description": "Maximum number of certificates to display. If result exceeds this value. Modify 'offset' to retrieve more results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExpiringCertificatesRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/{request_id}/finalize": {
      "post": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Finalize enrollment",
        "description": "Finalizes enrollment after administrator approval using request Id",
        "operationId": "finalizeEnrollment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "description": "Approval request id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "responseFormat must be one of 'P12', 'BCFKS', 'JKS', 'DER'",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FinalizeRestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/pkcs10enroll": {
      "post": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Enrollment with client generated keys, using CSR subject",
        "description": "Enroll for a certificate given a PEM encoded PKCS#10 CSR.",
        "operationId": "enrollPkcs10Certificate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnrollCertificateRestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/enrollkeystore": {
      "post": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Keystore enrollment",
        "description": "Creates a keystore for the specified end entity",
        "operationId": "enrollKeystore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyStoreRestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CertificateRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/{issuer_dn}/{certificate_serial_number}/revocationstatus": {
      "get": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Checks revocation status of the specified certificate",
        "description": "Checks revocation status of the specified certificate",
        "operationId": "revocationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "issuer_dn",
            "in": "path",
            "description": "Subject DN of the issuing CA",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_serial_number",
            "in": "path",
            "description": "hex serial number (without prefix, e.g. '00')",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RevokeStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/certificate/search": {
      "post": {
        "tags": [
          "v1/certificate"
        ],
        "summary": "Searches for certificates confirming given criteria.",
        "description": "Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchCertificateCriteriaRestRequest model.",
        "operationId": "searchCertificates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Maximum number of results and collection of search criterias.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchCertificatesRestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchCertificatesRestResponse"
            }
          }
        }
      }
    },
    "/v2/certificate/status": {
      "get": {
        "tags": [
          "v2/certificate"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_3",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v2/certificate/search": {
      "post": {
        "tags": [
          "v2/certificate"
        ],
        "summary": "Searches for certificates confirming given criteria and pagination.",
        "description": "Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchCertificateCriteriaRestRequestV2 model.",
        "operationId": "searchCertificates_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Collection of search criterias and pagination information.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchCertificatesRestRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchCertificatesRestResponseV2"
            }
          }
        }
      }
    },
    "/v1/configdump/status": {
      "get": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_4",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/configdump": {
      "get": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Get the configuration in JSON.",
        "description": "Returns the configdump data in JSON.",
        "operationId": "getJsonConfigdump",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ignoreerrors",
            "in": "query",
            "description": "Print a warning instead of aborting and throwing an exception on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "defaults",
            "in": "query",
            "description": "Also include fields having the default value.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "externalcas",
            "in": "query",
            "description": "Enables export of external CAs (i.e. CAs where there's only a certificate and nothing else)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "include",
            "in": "query",
            "description": "Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren't listed, everything is included.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \"\\*\" are allowed. Both are case-insensitive. E.g. exclude=\"\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\".\n\nSupported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Put the configuration in JSON.",
        "description": "",
        "operationId": "postJsonImport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ignoreerrors",
            "in": "query",
            "description": "Add to warnings instead of aborting on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "initialize",
            "in": "query",
            "description": "Generate initial certificate for CAs on import",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "continue",
            "in": "query",
            "description": "Continue on errors. Default is to abort.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "How to handle already existing configuration. Options are abort,skip,yes",
            "required": false,
            "type": "string",
            "default": "abort",
            "enum": [
              "yes",
              "skip",
              "abort"
            ]
          },
          {
            "name": "resolve",
            "in": "query",
            "description": "How to resolve missing references. Options are abort,skip,default",
            "required": false,
            "type": "string",
            "default": "abort",
            "enum": [
              "abort",
              "skip",
              "useDefault"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON data in configdump format",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigdumpResults"
            }
          }
        }
      }
    },
    "/v1/configdump/{type}": {
      "get": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Get the configuration for type in JSON.",
        "description": "Returns the configdump data in JSON.",
        "operationId": "getJsonConfigdumpForType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Configuration type to export.\n\nSupported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreerrors",
            "in": "query",
            "description": "Print a warning instead of aborting and throwing an exception on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "defaults",
            "in": "query",
            "description": "Also include fields having the default value.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "externalcas",
            "in": "query",
            "description": "Enables export of external CAs (i.e. CAs where there's only a certificate and nothing else)",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      }
    },
    "/v1/configdump/{type}/{setting}": {
      "get": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Get the configuration for a type and setting in JSON.",
        "description": "Returns the configdump data in JSON.",
        "operationId": "getJsonConfigdumpForTypeAndSetting",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Configuration type to export.\n\nSupported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols",
            "required": true,
            "type": "string"
          },
          {
            "name": "setting",
            "in": "path",
            "description": "Individual configuration name to export",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreerrors",
            "in": "query",
            "description": "Print a warning instead of aborting and throwing an exception on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "defaults",
            "in": "query",
            "description": "Also include fields having the default value.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      }
    },
    "/v1/configdump/configdump.zip": {
      "get": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Get the configuration as a ZIP file.",
        "description": "Returns a zip archive of YAML files.",
        "operationId": "getZipExport",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "ignoreerrors",
            "in": "query",
            "description": "Print a warning instead of aborting and throwing an exception on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "defaults",
            "in": "query",
            "description": "Also include fields having the default value.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "externalcas",
            "in": "query",
            "description": "Enables export of external CAs (i.e. CAs where there's only a certificate and nothing else)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "include",
            "in": "query",
            "description": "Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren't listed, everything is included.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \"\\*\" are allowed. Both are case-insensitive. E.g. exclude=\"\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\".\n\nSupported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1/configdump"
        ],
        "summary": "Put the configuration as a ZIP file.",
        "description": "",
        "operationId": "postZipImport",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zipfile",
            "in": "formData",
            "description": "A zipfile containing directories of YAML files.",
            "required": false,
            "type": "file"
          },
          {
            "name": "ignoreerrors",
            "in": "formData",
            "description": "Add to warnings instead of aborting on errors.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "initialize",
            "in": "formData",
            "description": "Generate initial certificate for CAs on import",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "continue",
            "in": "formData",
            "description": "Continue on errors. Default is to abort.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "overwrite",
            "in": "formData",
            "description": "How to handle already existing configuration. Options are abort,skip,yes",
            "required": false,
            "type": "string",
            "default": "abort",
            "enum": [
              "yes",
              "skip",
              "abort"
            ]
          },
          {
            "name": "resolve",
            "in": "formData",
            "description": "How to resolve missing references. Options are abort,skip,default",
            "required": false,
            "type": "string",
            "default": "abort",
            "enum": [
              "abort",
              "skip",
              "useDefault"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigdumpResults"
            }
          }
        }
      }
    },
    "/v1/cryptotoken/status": {
      "get": {
        "tags": [
          "v1/cryptotoken"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_5",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/cryptotoken/{cryptotoken_name}/{key_pair_alias}/removekeys": {
      "post": {
        "tags": [
          "v1/cryptotoken"
        ],
        "summary": "Remove keys",
        "description": "Remove a key pair given crypto token name and key pair alias to be removed.",
        "operationId": "removeKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cryptotoken_name",
            "in": "path",
            "description": "Name of the token to remove keys for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_pair_alias",
            "in": "path",
            "description": "Alias for the key to be removed from the crypto token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/cryptotoken/{cryptotoken_name}/activate": {
      "put": {
        "tags": [
          "v1/cryptotoken"
        ],
        "summary": "Activate a Crypto Token",
        "description": "Activates Crypto Token given name and activation code",
        "operationId": "activate_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cryptotoken_name",
            "in": "path",
            "description": "Name of the token to activate",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "activation code",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CryptoTokenActivationRestRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/cryptotoken/{cryptotoken_name}/deactivate": {
      "put": {
        "tags": [
          "v1/cryptotoken"
        ],
        "summary": "Deactivate a Crypto Token",
        "description": "Deactivates Crypto Token given name",
        "operationId": "deactivate_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cryptotoken_name",
            "in": "path",
            "description": "Name of the token to deactivate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/cryptotoken/{cryptotoken_name}/generatekeys": {
      "post": {
        "tags": [
          "v1/cryptotoken"
        ],
        "summary": "Generate keys",
        "description": "Generates a key pair given crypto token name, key pair alias, key algorithm and key specification",
        "operationId": "generateKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cryptotoken_name",
            "in": "path",
            "description": "Name of the token to generate keys for",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CryptoTokenKeyGenerationRestRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/endentity": {
      "post": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Add new end entity, if it does not exist",
        "description": "Register new end entity based on provided registration data",
        "operationId": "add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddEndEntityRestRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/endentity/status": {
      "get": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_6",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/endentity/{endentity_name}": {
      "delete": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Deletes end entity",
        "description": "Deletes specified end entity and keeps certificate information untouched, if end entity does not exist success is still returned",
        "operationId": "delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endentity_name",
            "in": "path",
            "description": "Name of the end entity",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/endentity/search": {
      "post": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Searches for end entity confirming given criteria.",
        "description": "Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchEndEntityCriteriaRestRequest model.",
        "operationId": "search",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Maximum number of results and collection of search criterias.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchEndEntitiesRestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchEndEntitiesRestResponse"
            }
          }
        }
      }
    },
    "/v1/endentity/{endentity_name}/revoke": {
      "put": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Revokes all end entity certificates",
        "description": "Revokes all certificates associated with given end entity name with specified reason code (see RFC 5280 Section 5.3.1), and optionally deletes the end entity",
        "operationId": "revoke",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endentity_name",
            "in": "path",
            "description": "Name of the end entity",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EndEntityRevocationRestRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/endentity/{endentity_name}/setstatus": {
      "post": {
        "tags": [
          "v1/endentity"
        ],
        "summary": "Edits end entity setting new status",
        "description": "Edit status, password and token type of related end entity",
        "operationId": "setstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endentity_name",
            "in": "path",
            "description": "Name of the end entity to edit status for",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SetEndEntityStatusRestRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/endentity/profile/{endentity_profile_name}": {
      "get": {
        "tags": [
          "v2/endentity"
        ],
        "summary": "Get End Entity Profile content",
        "description": "Returns End Entity Profile configurations: List of available CAs, list of available Certificate Profiles.",
        "operationId": "profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endentity_profile_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EndEntityProfileResponse"
            }
          }
        }
      }
    },
    "/v2/endentity/status": {
      "get": {
        "tags": [
          "v2/endentity"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_7",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v2/endentity/profiles/authorized": {
      "get": {
        "tags": [
          "v2/endentity"
        ],
        "summary": "List of authorized end entity profiles for the current admin.",
        "description": "Returns list of all authorized end entity profiles for the current admin token",
        "operationId": "getAuthorizedEndEntityProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AuthorizedEEPsRestResponse"
            }
          }
        }
      }
    },
    "/v2/endentity/search": {
      "post": {
        "tags": [
          "v2/endentity"
        ],
        "summary": "Searches and sorts for end entity conforming given criteria.",
        "description": "Insert as many search criteria as needed and optionally a sorting criteria. A reference about allowed values for criteria could be found below, under SearchEndEntityCriteriaRestRequestV2 model.",
        "operationId": "sortedSearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Maximum number of results and collection of search criterias.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchEndEntitiesRestRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchEndEntitiesRestResponse"
            }
          }
        }
      }
    },
    "/v1/ssh/status": {
      "get": {
        "tags": [
          "v1/ssh"
        ],
        "summary": "Get the status of this REST Resource",
        "description": "Returns status, API version and EJBCA version.",
        "operationId": "status_8",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResourceStatusRestResponse"
            }
          }
        }
      }
    },
    "/v1/ssh/{ca_name}/pubkey": {
      "get": {
        "tags": [
          "v1/ssh"
        ],
        "summary": "Retrieves a CA's public key in SSH format.",
        "description": "Retrieves a CA's public key in SSH format.",
        "operationId": "pubkey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ca_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SshPublicKeyRestResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "RestResourceStatusRestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "OK",
          "description": "Status"
        },
        "version": {
          "type": "string",
          "example": "1.0",
          "description": "Resource version"
        },
        "revision": {
          "type": "string",
          "example": "EJBCA 1.0.0 Enterprise",
          "description": "Application revision"
        }
      }
    },
    "CreateCrlRestResponse": {
      "type": "object",
      "properties": {
        "issuer_dn": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Issuer Distinguished Name"
        },
        "latest_crl_version": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Latest base CRL version"
        },
        "latest_delta_crl_version": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Latest delta CRL version"
        },
        "latest_partition_crl_versions": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "latest_partition_delta_crl_versions": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "all_success": {
          "type": "boolean"
        }
      }
    },
    "CaInfoRestResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 12345678,
          "description": "CA identifier"
        },
        "name": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Certificate Authority (CA) name"
        },
        "subject_dn": {
          "type": "string",
          "example": "CN=ExampleCA,O=Sample,C=SE",
          "description": "Subject Distinguished Name"
        },
        "issuer_dn": {
          "type": "string",
          "example": "CN=ExampleCA,O=Sample,C=SE",
          "description": "Issuer Distinguished Name"
        },
        "expiration_date": {
          "type": "string",
          "format": "date-time",
          "example": "2038-01-19T03:14:07Z",
          "description": "Expiration date"
        }
      }
    },
    "CaInfosRestResponse": {
      "type": "object",
      "properties": {
        "certificate_authorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CaInfoRestResponse"
          }
        }
      }
    },
    "CrlRestResponse": {
      "type": "object",
      "properties": {
        "crl": {
          "type": "array",
          "example": "MIIEV...SqQPE",
          "description": "Certificate Revokation List (CRL)",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "response_format": {
          "type": "string",
          "example": "DER",
          "description": "Response format"
        }
      }
    },
    "RevokeStatusRestResponse": {
      "type": "object",
      "properties": {
        "issuer_dn": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Issuer Distinguished Name"
        },
        "serial_number": {
          "type": "string",
          "example": "1234567890ABCDEF",
          "description": "Hex Serial Number"
        },
        "revocation_reason": {
          "type": "string",
          "example": "KEY_COMPROMISE",
          "description": "RFC5280 revokation reason"
        },
        "revocation_date": {
          "type": "string",
          "format": "date-time",
          "example": "1970-01-01T00:00:00Z",
          "description": "Revokation date"
        },
        "message": {
          "type": "string",
          "example": "Successfully revoked",
          "description": "Message"
        },
        "revoked": {
          "type": "boolean"
        }
      }
    },
    "CertificateRestResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "array",
          "example": "MIIDXzCCA...eW1Zro0=",
          "description": "Certificate",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "serial_number": {
          "type": "string",
          "example": "1234567890ABCDEF",
          "description": "Hex Serial Number"
        },
        "response_format": {
          "type": "string",
          "example": "DER",
          "description": "Response format"
        },
        "certificate_chain": {
          "type": "array",
          "example": "[ “ABC123efg...345xyz0=“ ]",
          "description": "Certificate chain",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "certificate_profile": {
          "type": "string",
          "example": "ENDUSER",
          "description": "Certificate profile name"
        },
        "end_entity_profile": {
          "type": "string",
          "example": "ExampleEEP",
          "description": "End Entity profile name"
        }
      }
    },
    "CertificateRequestRestRequest": {
      "type": "object",
      "properties": {
        "certificate_request": {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE REQUEST-----\nMIICh...V8shQ==\n-----END CERTIFICATE REQUEST-----",
          "description": "Certificate request"
        },
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "include_chain": {
          "type": "boolean"
        },
        "certificate_authority_name": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Certificate Authority (CA) name"
        }
      }
    },
    "CertificatesRestResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateRestResponse"
          }
        }
      }
    },
    "ExpiringCertificatesRestResponse": {
      "type": "object",
      "properties": {
        "pagination_rest_response_component": {
          "$ref": "#/definitions/PaginationRestResponseComponent"
        },
        "certificates_rest_response": {
          "$ref": "#/definitions/CertificatesRestResponse"
        }
      }
    },
    "PaginationRestResponseComponent": {
      "type": "object",
      "properties": {
        "more_results": {
          "type": "boolean"
        },
        "next_offset": {
          "type": "integer",
          "format": "int32"
        },
        "number_of_results": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FinalizeRestRequest": {
      "type": "object",
      "properties": {
        "response_format": {
          "type": "string",
          "example": "P12",
          "description": "Response format",
          "enum": [
            "P12",
            "BCFKS",
            "JKS",
            "DER"
          ]
        },
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "key_alg": {
          "type": "string",
          "example": "RSA",
          "description": "Key algorithm"
        },
        "key_spec": {
          "type": "string",
          "example": "4096",
          "description": "Key specification"
        }
      }
    },
    "EnrollCertificateRestRequest": {
      "type": "object",
      "properties": {
        "certificate_request": {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE REQUEST-----\nMIICh...V8shQ==\n-----END CERTIFICATE REQUEST-----",
          "description": "Certificate request"
        },
        "certificate_profile_name": {
          "type": "string",
          "example": "ENDUSER",
          "description": "Certificate profile name"
        },
        "end_entity_profile_name": {
          "type": "string",
          "example": "ExampleEEP",
          "description": "End Entity profile name"
        },
        "certificate_authority_name": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Certificate Authority (CA) name"
        },
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "account_binding_id": {
          "type": "string",
          "example": "1234567890",
          "description": "Account Binding ID"
        },
        "include_chain": {
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com",
          "description": "Email"
        }
      }
    },
    "KeyStoreRestRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "key_alg": {
          "type": "string",
          "example": "RSA",
          "description": "Key algorithm used for enrollment"
        },
        "key_spec": {
          "type": "string",
          "example": "4096",
          "description": "Key specification to use"
        }
      }
    },
    "SearchCertificatesRestResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateRestResponse"
          }
        },
        "more_results": {
          "type": "boolean"
        }
      }
    },
    "SearchCertificateCriteriaRestRequest": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "example": "CERTIFICATE_PROFILE",
          "description": "A search property",
          "enum": [
            "QUERY",
            "END_ENTITY_PROFILE",
            "CERTIFICATE_PROFILE",
            "EXTERNAL_ACCOUNT_BINDING_ID",
            "CA",
            "STATUS",
            "ISSUED_DATE",
            "EXPIRE_DATE",
            "REVOCATION_DATE"
          ]
        },
        "value": {
          "type": "string",
          "example": "ENDUSER",
          "description": "A search value. This could be sting value, ISO 8601 Date string, an appropriate string name of End Entity Profile or Certificate Profile or CA"
        },
        "operation": {
          "type": "string",
          "example": "EQUAL",
          "description": "An operation for property on inserted value. 'EQUAL' for string, 'LIKE' for string value ('QUERY'), 'BEFORE' or 'AFTER' for date values",
          "enum": [
            "EQUAL",
            "LIKE",
            "BEFORE",
            "AFTER"
          ]
        }
      },
      "description": "Use one of allowed values as property(see enum values below).\nQUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username or SerialNr; \nAvailable STATUS - multiplicity [0, 12] - values are: CERT_ACTIVE, CERT_REVOKED, REVOCATION_REASON_UNSPECIFIED, REVOCATION_REASON_KEYCOMPROMISE, REVOCATION_REASON_CACOMPROMISE, REVOCATION_REASON_AFFILIATIONCHANGED, REVOCATION_REASON_SUPERSEDED, REVOCATION_REASON_CESSATIONOFOPERATION, REVOCATION_REASON_CERTIFICATEHOLD, REVOCATION_REASON_REMOVEFROMCRL, REVOCATION_REASON_PRIVILEGESWITHDRAWN, REVOCATION_REASON_AACOMPROMISE;\n\nEND_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA; \nISSUED_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string; \nISSUED_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string; \nEXPIRE_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string; \nEXPIRE_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string; \nREVOCATION_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string; \nREVOCATION_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string. \nUPDATE_TIME 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string; \nUPDATE_TIME 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string; \n"
    },
    "SearchCertificatesRestRequest": {
      "type": "object",
      "properties": {
        "max_number_of_results": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Maximum number of results"
        },
        "criteria": {
          "type": "array",
          "description": "A List of search criteria.",
          "items": {
            "$ref": "#/definitions/SearchCertificateCriteriaRestRequest"
          }
        }
      }
    },
    "CertificateRestResponseV2": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "example": "123abc456def789ghi123klm456nop789qrs123t",
          "description": "Certificate fingerprint",
          "readOnly": true
        },
        "c_afingerprint": {
          "type": "string",
          "example": "abc123def456ghi789klm123nop456qrs789tvx1",
          "description": "Certificate Authority fingerprint",
          "readOnly": true
        },
        "certificate_profile_id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Certificate Profile Identifier",
          "readOnly": true
        },
        "end_entity_profile_id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "End Entity Profile Identifier",
          "readOnly": true
        },
        "expire_date": {
          "type": "integer",
          "format": "int64",
          "example": 2147483647000,
          "description": "Date after which certificate should be considered expired",
          "readOnly": true
        },
        "issuer_dn": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Issuer Distinguished Name",
          "readOnly": true
        },
        "not_before": {
          "type": "integer",
          "format": "int64",
          "example": 1659952800011,
          "description": "Date at which certificate became valid",
          "readOnly": true
        },
        "revocation_date": {
          "type": "integer",
          "format": "int64",
          "example": -1,
          "description": "Revocation date",
          "readOnly": true
        },
        "revocation_reason": {
          "type": "integer",
          "format": "int32",
          "example": -1,
          "description": "Revocation reson",
          "readOnly": true,
          "enum": [
            -1,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10
          ]
        },
        "serial_number": {
          "type": "string",
          "example": "1234567890ABCDEF",
          "description": "Hex Serial Number",
          "readOnly": true
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Certificate status",
          "readOnly": true
        },
        "subject_alt_name": {
          "type": "string",
          "example": "rfc822Name=john.doe@example.com",
          "description": "Subject Alternative Name (SAN)",
          "readOnly": true
        },
        "subject_dn": {
          "type": "string",
          "example": "CN=John Doe,SURNAME=Doe,GIVENNAME=John,C=SE",
          "description": "Subject Distinguished Name",
          "readOnly": true
        },
        "subject_key_id": {
          "type": "string",
          "example": "z123abc456def789ghi123klm456nop789qrs123",
          "description": "Subject Key Identifier",
          "readOnly": true
        },
        "tag": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "udpate_time": {
          "type": "integer",
          "format": "int64",
          "example": 1659967133000,
          "description": "Update time",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username",
          "readOnly": true
        },
        "base64_cert": {
          "type": "array",
          "example": "TUlJR...t2A==",
          "description": "Base64 encoded certificate",
          "readOnly": true,
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "certificate_request": {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE REQUEST-----\nMIICh...V8shQ==\n-----END CERTIFICATE REQUEST-----",
          "description": "Certificate request",
          "readOnly": true
        },
        "crl_partition_index": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "CRL partition index",
          "readOnly": true
        }
      }
    },
    "PaginationSummary": {
      "type": "object",
      "properties": {
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "current_page": {
          "type": "integer",
          "format": "int32"
        },
        "total_certs": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchCertificatesRestResponseV2": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateRestResponseV2"
          }
        },
        "pagination_summary": {
          "$ref": "#/definitions/PaginationSummary"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "page_size": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Number of results per page"
        },
        "current_page": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Current page number"
        }
      }
    },
    "SearchCertificateSortRestRequest": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "description": "Sorted by",
          "enum": [
            "USERNAME",
            "ISSUER_DN",
            "SUBJECT_DN",
            "EXTERNAL_ACCOUNT_BINDING_ID",
            "END_ENTITY_PROFILE",
            "CERTIFICATE_PROFILE",
            "STATUS",
            "TAG",
            "TYPE",
            "UPDATE_TIME",
            "ISSUED_DATE",
            "EXPIRE_DATE",
            "REVOCATION_DATE"
          ]
        },
        "operation": {
          "type": "string",
          "description": "Sort ascending or descending. 'ASC' for ascending, 'DESC' for descending.",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      },
      "description": "Use one of allowed values as property and operation.\nAvailable propertiesUSERNAME \nISSUER_DN \nSUBJECT_DN \nEXTERNAL_ACCOUNT_BINDING_ID \nEND_ENTITY_PROFILE \nCERTIFICATE_PROFILE \nSTATUS \nTAG \nTYPE \nUPDATE_TIME \nISSUED_DATE \nEXPIRE_DATE \nREVOCATION_DATE \n\nAvailable operationsASC \nDESC \n"
    },
    "SearchCertificatesRestRequestV2": {
      "type": "object",
      "properties": {
        "pagination": {
          "description": "Pagination.",
          "$ref": "#/definitions/Pagination"
        },
        "sort": {
          "description": "Sort.",
          "$ref": "#/definitions/SearchCertificateSortRestRequest"
        },
        "criteria": {
          "type": "array",
          "description": "A List of search criteria.",
          "items": {
            "$ref": "#/definitions/SearchCertificateCriteriaRestRequest"
          }
        }
      }
    },
    "ConfigdumpResults": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CryptoTokenActivationRestRequest": {
      "type": "object",
      "properties": {
        "activation_code": {
          "type": "string",
          "example": "foo123",
          "description": "Activation Code"
        }
      }
    },
    "CryptoTokenKeyGenerationRestRequest": {
      "type": "object",
      "properties": {
        "key_pair_alias": {
          "type": "string",
          "example": "signKey",
          "description": "Key pair alias"
        },
        "key_alg": {
          "type": "string",
          "example": "RSA",
          "description": "Key algorithm"
        },
        "key_spec": {
          "type": "string",
          "example": "4096",
          "description": "Key specification"
        }
      }
    },
    "AddEndEntityRestRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "subject_dn": {
          "type": "string",
          "example": "CN=John Doe,SURNAME=Doe,GIVENNAME=John,C=SE",
          "description": "Subject Distinguished Name"
        },
        "subject_alt_name": {
          "type": "string",
          "example": "rfc822Name=john.doe@example.com",
          "description": "Subject Alternative Name (SAN)"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com",
          "description": "Email"
        },
        "extension_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedInformationRestRequestComponent"
          }
        },
        "ca_name": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Certificate Authority (CA) name"
        },
        "certificate_profile_name": {
          "type": "string",
          "example": "ENDUSER",
          "description": "Certificate profile name"
        },
        "end_entity_profile_name": {
          "type": "string",
          "example": "ExampleEEP",
          "description": "End Entity profile name"
        },
        "token": {
          "type": "string",
          "example": "P12",
          "description": "Token type property",
          "enum": [
            "USERGENERATED",
            "P12",
            "JKS",
            "PEM"
          ]
        },
        "account_binding_id": {
          "type": "string",
          "example": "1234567890",
          "description": "Account Binding ID"
        }
      }
    },
    "ExtendedInformationRestRequestComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "1.3.6.1.5.5.7.1.24",
          "description": "Certificate Extension Object Identifier (OID)"
        },
        "value": {
          "type": "string",
          "example": "3003020105",
          "description": "OID value"
        }
      }
    },
    "EndEntityRestResponse": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "JohnDoe",
          "description": "Username"
        },
        "dn": {
          "type": "string",
          "example": "CN=John Doe,SURNAME=Doe,GIVENNAME=John,C=SE",
          "description": "Subject Distinguished Name"
        },
        "subject_alt_name": {
          "type": "string",
          "example": "rfc822Name=john.doe@example.com",
          "description": "Subject Alternative Name (SAN)"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com",
          "description": "Email"
        },
        "status": {
          "type": "string",
          "example": "NEW",
          "description": "End Entity status",
          "enum": [
            "NEW",
            "FAILED",
            "INITIALIZED",
            "INPROCESS",
            "GENERATED",
            "REVOKED",
            "HISTORICAL",
            "KEYRECOVERY",
            "WAITINGFORADDAPPROVAL"
          ]
        },
        "token": {
          "type": "string",
          "example": "P12",
          "description": "Token type",
          "enum": [
            "USERGENERATED",
            "P12",
            "BCFKS",
            "JKS",
            "PEM"
          ]
        },
        "extension_data": {
          "type": "array",
          "description": "Extended Information",
          "items": {
            "$ref": "#/definitions/ExtendedInformationRestResponseComponent"
          }
        }
      }
    },
    "ExtendedInformationRestResponseComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "1.3.6.1.5.5.7.1.24",
          "description": "Extended Information property name"
        },
        "value": {
          "type": "string",
          "example": "3003020105",
          "description": "Property value"
        }
      }
    },
    "SearchEndEntitiesRestResponse": {
      "type": "object",
      "properties": {
        "end_entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndEntityRestResponse"
          }
        },
        "more_results": {
          "type": "boolean"
        }
      }
    },
    "SearchEndEntitiesRestRequest": {
      "type": "object",
      "properties": {
        "max_number_of_results": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Maximum number of results"
        },
        "current_page": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Current page number"
        },
        "criteria": {
          "type": "array",
          "description": "A List of search criteria.",
          "items": {
            "$ref": "#/definitions/SearchEndEntityCriteriaRestRequest"
          }
        }
      }
    },
    "SearchEndEntityCriteriaRestRequest": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "description": "A search property",
          "enum": [
            "QUERY",
            "END_ENTITY_PROFILE",
            "CERTIFICATE_PROFILE",
            "CA",
            "STATUS",
            "MODIFIED_BEFORE",
            "MODIFIED_AFTER"
          ]
        },
        "value": {
          "type": "string",
          "example": "exampleUsername",
          "description": "A search value. This could be string value, an appropriate string name of End Entity Profile or Certificate Profile or CA"
        },
        "operation": {
          "type": "string",
          "description": "An operation for property on inserted value. 'EQUALS' for string, 'LIKE' for string value ('QUERY')",
          "enum": [
            "EQUAL",
            "LIKE"
          ]
        }
      },
      "description": "Use one of allowed values as property(see enum values below).\nQUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username; \nAvailable STATUS - multiplicity [0, 9] - values are: NEW, FAILED, INITIALIZED, INPROCESS, GENERATED, REVOKED, HISTORICAL, KEYRECOVERY, WAITINGFORADDAPPROVAL;\n\nEND_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA; \n"
    },
    "EndEntityRevocationRestRequest": {
      "type": "object",
      "properties": {
        "reason_code": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Reason code",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10
          ]
        },
        "delete": {
          "type": "boolean",
          "example": true,
          "description": "Delete",
          "enum": [
            true,
            false
          ]
        }
      },
      "description": "End Entity revocation request. Available reason codes: \n 0 - Unspecified,\n 1 - Key Compromise,\n 2 - CA Compromise,\n 3 - Affiliation Changed,\n 4 - Superseded,\n 5 - Cessation of Operation,\n 6 - Certificate Hold,\n 8 - Remove from CRL,\n 9 - Privileges Withdrawn,\n 10 - AA Compromise"
    },
    "SetEndEntityStatusRestRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "foo123",
          "description": "Password"
        },
        "token": {
          "type": "string",
          "example": "USERGENERATED",
          "description": "Token type property",
          "enum": [
            "USERGENERATED",
            "P12",
            "BCFKS",
            "JKS",
            "PEM"
          ]
        },
        "status": {
          "type": "string",
          "example": "NEW",
          "description": "End entity status property",
          "enum": [
            "NEW",
            "FAILED",
            "INITIALIZED",
            "INPROCESS",
            "GENERATED",
            "REVOKED",
            "HISTORICAL",
            "KEYRECOVERY",
            "WAITINGFORADDAPPROVAL"
          ]
        }
      },
      "description": "Use one of allowed values as property(see enum values below).\nAvailable TOKEN - USERGENERATED, P12, BCFKS, JKS, PEM; \nAvailable STATUS - NEW, FAILED, INITIALIZED, INPROCESS, GENERATED, REVOKED, HISTORICAL, KEYRECOVERY, WAITINGFORADDAPPROVAL;\n"
    },
    "EndEntityProfileResponse": {
      "type": "object",
      "properties": {
        "end_entity_profile_name": {
          "type": "string",
          "example": "ExampleEEP",
          "description": "End Entity profile name"
        },
        "subject_domain_name_fields": {
          "type": "array",
          "example": "[ “CN“ ]",
          "description": "List of Subject DN Attributes",
          "items": {
            "type": "string"
          }
        },
        "subject_alt_name_fields": {
          "type": "array",
          "example": "[ “RFC822NAME“ ]",
          "description": "List of Subject Alternative Name fields",
          "items": {
            "type": "string"
          }
        },
        "available_certificate_profiles": {
          "type": "array",
          "example": "[ “ENDUSER“ ]",
          "position": 1,
          "description": "List of available Certificate Profiles",
          "items": {
            "type": "string"
          }
        },
        "available_cas": {
          "type": "array",
          "example": "[ “ExampleCA“ ]",
          "position": 2,
          "description": "List of available Certificate Authorities (CAs)",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuthorizedEEPsRestResponse": {
      "type": "object",
      "properties": {
        "end_entitie_profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndEntityProfileRestResponse"
          }
        }
      }
    },
    "EndEntityProfileRestResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ExampleEEP",
          "description": "End Entity profile name"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1234567890,
          "description": "End Entity profile ID"
        },
        "description": {
          "type": "string",
          "example": "Example End Entity profile",
          "description": "Description"
        }
      }
    },
    "SearchEndEntitiesRestRequestV2": {
      "type": "object",
      "properties": {
        "max_number_of_results": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Maximum number of results"
        },
        "current_page": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Current page number"
        },
        "criteria": {
          "type": "array",
          "description": "A List of search criteria.",
          "items": {
            "$ref": "#/definitions/SearchEndEntityCriteriaRestRequest"
          }
        },
        "sort_operation": {
          "description": "Sort.",
          "$ref": "#/definitions/SearchEndEntitiesSortRestRequest"
        }
      }
    },
    "SearchEndEntitiesSortRestRequest": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string",
          "description": "Sorted by",
          "enum": [
            "USERNAME",
            "SUBJECT_DN",
            "SUBJECT_ALT_NAME",
            "END_ENTITY_PROFILE",
            "CERTIFICATE_PROFILE",
            "STATUS",
            "UPDATE_TIME",
            "CREATED_TIME"
          ]
        },
        "operation": {
          "type": "string",
          "description": "Sort ascending or descending. 'ASC' for ascending, 'DESC' for descending.",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      },
      "description": "Use one of allowed values as property and operation.\nAvailable propertiesUSERNAME \nSUBJECT_DN \nSUBJECT_ALT_NAME \nEND_ENTITY_PROFILE(by databse identifier, not user-given name) \nCERTIFICATE_PROFILE(by identifier) \nCA(by identifier) \nSTATUS \nUPDATE_TIME \nCREATED_DATE \n\nAvailable operationsASC \nDESC \n"
    },
    "SshPublicKeyRestResponse": {
      "type": "object",
      "properties": {
        "ca_name": {
          "type": "string",
          "example": "CN=ExampleCA",
          "description": "Certificate Authority (CA) name"
        },
        "response": {
          "type": "array",
          "example": "ssh-rsa AAAAB...QxLwx SshCA",
          "description": "CA’s public key",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    }
  }
}